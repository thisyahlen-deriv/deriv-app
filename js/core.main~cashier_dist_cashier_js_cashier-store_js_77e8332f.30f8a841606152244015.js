/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk"] = self["webpackChunk"] || []).push([["main~cashier_dist_cashier_js_cashier-store_js_77e8332f"],{

/***/ "../../cashier/dist/cashier/js/cashier-store.js":
/*!******************************************************!*\
  !*** ../../cashier/dist/cashier/js/cashier-store.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/*\n * ATTENTION: An \"eval-source-map\" devtool has been used.\n * This devtool is neither made for production nor for readable output files.\n * It uses \"eval()\" calls to create a separate source file with attached SourceMaps in the browser devtools.\n * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)\n * or disable the default devtool with \"devtool: false\".\n * If you are looking for production-ready output files, see mode: \"production\" (https://webpack.js.org/configuration/mode/).\n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! @deriv/components */ \"../../components/src/index.js\"), __webpack_require__(/*! @deriv/shared */ \"../../shared/src/index.js\"), __webpack_require__(/*! @deriv/translations */ \"../../translations/src/index.js\"), __webpack_require__(/*! mobx */ \"../../../node_modules/mobx/lib/mobx.module.js\"), __webpack_require__(/*! react */ \"../../../node_modules/react/index.js\"));\n\telse {}\n})(self, function(__WEBPACK_EXTERNAL_MODULE__deriv_components__, __WEBPACK_EXTERNAL_MODULE__deriv_shared__, __WEBPACK_EXTERNAL_MODULE__deriv_translations__, __WEBPACK_EXTERNAL_MODULE_mobx__, __WEBPACK_EXTERNAL_MODULE_react__) {\nreturn /******/ (() => { // webpackBootstrap\n/******/ \tvar __webpack_modules__ = ({\n\n/***/ \"./Stores/cashier-store.js\":\n/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {\n\n\"use strict\";\neval(\"\\n// EXPORTS\\n__webpack_require__.d(__webpack_exports__, {\\n  \\\"default\\\": () => (/* binding */ CashierStore)\\n});\\n\\n// EXTERNAL MODULE: external \\\"mobx\\\"\\nvar external_mobx_ = __webpack_require__(\\\"mobx\\\");\\n// EXTERNAL MODULE: external \\\"@deriv/shared\\\"\\nvar shared_ = __webpack_require__(\\\"@deriv/shared\\\");\\n;// CONCATENATED MODULE: ./Stores/account-prompt-dialog-store.js\\nvar _dec, _dec2, _dec3, _dec4, _dec5, _dec6, _class, _descriptor, _descriptor2, _descriptor3, _descriptor4;\\n\\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction _initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction _applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction _initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar AccountPromptDialogStore = (_dec = external_mobx_.action.bound, _dec2 = external_mobx_.action.bound, _dec3 = external_mobx_.action.bound, _dec4 = external_mobx_.action.bound, _dec5 = external_mobx_.action.bound, _dec6 = external_mobx_.action.bound, (_class = /*#__PURE__*/function () {\\n  function AccountPromptDialogStore(root_store) {\\n    _classCallCheck(this, AccountPromptDialogStore);\\n\\n    _initializerDefineProperty(this, \\\"should_show\\\", _descriptor, this);\\n\\n    _initializerDefineProperty(this, \\\"is_confirmed\\\", _descriptor2, this);\\n\\n    _initializerDefineProperty(this, \\\"last_location\\\", _descriptor3, this);\\n\\n    _initializerDefineProperty(this, \\\"current_location\\\", _descriptor4, this);\\n\\n    this.root_store = root_store;\\n  }\\n\\n  _createClass(AccountPromptDialogStore, [{\\n    key: \\\"shouldNavigateAfterPrompt\\\",\\n    value: function shouldNavigateAfterPrompt(next_location, current_location) {\\n      if (!this.is_confirmed) {\\n        this.last_location = next_location;\\n        this.should_show = true;\\n        this.current_location = current_location;\\n      }\\n    }\\n  }, {\\n    key: \\\"resetLastLocation\\\",\\n    value: function resetLastLocation() {\\n      this.last_location = null;\\n    }\\n  }, {\\n    key: \\\"resetIsConfirmed\\\",\\n    value: function resetIsConfirmed() {\\n      this.is_confirmed = false;\\n    }\\n  }, {\\n    key: \\\"onConfirm\\\",\\n    value: function () {\\n      var _onConfirm = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store, client, modules, accounts_list, has_fiat_account;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                accounts_list = modules.cashier.account_transfer.accounts_list;\\n                this.should_show = false;\\n                this.is_confirmed = true;\\n                has_fiat_account = accounts_list.some(function (x) {\\n                  return !x.is_crypto;\\n                });\\n\\n                if (!((0,shared_.isCryptocurrency)(client === null || client === void 0 ? void 0 : client.currency) && has_fiat_account)) {\\n                  _context.next = 8;\\n                  break;\\n                }\\n\\n                _context.next = 8;\\n                return this.doSwitch();\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onConfirm() {\\n        return _onConfirm.apply(this, arguments);\\n      }\\n\\n      return onConfirm;\\n    }()\\n  }, {\\n    key: \\\"doSwitch\\\",\\n    value: function () {\\n      var _doSwitch = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store2, client, modules, _modules$cashier, account_transfer, general_store, non_crypto_accounts, loginid;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier = modules.cashier, account_transfer = _modules$cashier.account_transfer, general_store = _modules$cashier.general_store;\\n                non_crypto_accounts = account_transfer.accounts_list.filter(function (x) {\\n                  return !x.is_crypto;\\n                });\\n                loginid = non_crypto_accounts.map(function (x) {\\n                  return x.value;\\n                })[0];\\n                _context2.next = 6;\\n                return client.switchAccount(loginid);\\n\\n              case 6:\\n                if (this.current_location === 'deposit') {\\n                  general_store.setIsDeposit(true);\\n                }\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function doSwitch() {\\n        return _doSwitch.apply(this, arguments);\\n      }\\n\\n      return doSwitch;\\n    }()\\n  }, {\\n    key: \\\"onCancel\\\",\\n    value: function onCancel() {\\n      this.should_show = false;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      if (this.is_confirmed && this.last_location) {\\n        this.root_store.common.routeTo(this.last_location);\\n      }\\n    }\\n  }]);\\n\\n  return AccountPromptDialogStore;\\n}(), (_descriptor = _applyDecoratedDescriptor(_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor2 = _applyDecoratedDescriptor(_class.prototype, \\\"is_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor3 = _applyDecoratedDescriptor(_class.prototype, \\\"last_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor4 = _applyDecoratedDescriptor(_class.prototype, \\\"current_location\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _applyDecoratedDescriptor(_class.prototype, \\\"shouldNavigateAfterPrompt\\\", [_dec], Object.getOwnPropertyDescriptor(_class.prototype, \\\"shouldNavigateAfterPrompt\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"resetLastLocation\\\", [_dec2], Object.getOwnPropertyDescriptor(_class.prototype, \\\"resetLastLocation\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"resetIsConfirmed\\\", [_dec3], Object.getOwnPropertyDescriptor(_class.prototype, \\\"resetIsConfirmed\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onConfirm\\\", [_dec4], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onConfirm\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"onCancel\\\", [_dec5], Object.getOwnPropertyDescriptor(_class.prototype, \\\"onCancel\\\"), _class.prototype), _applyDecoratedDescriptor(_class.prototype, \\\"continueRoute\\\", [_dec6], Object.getOwnPropertyDescriptor(_class.prototype, \\\"continueRoute\\\"), _class.prototype)), _class));\\n\\n// EXTERNAL MODULE: external \\\"react\\\"\\nvar external_react_ = __webpack_require__(\\\"react\\\");\\nvar external_react_default = /*#__PURE__*/__webpack_require__.n(external_react_);\\n// EXTERNAL MODULE: external \\\"@deriv/translations\\\"\\nvar translations_ = __webpack_require__(\\\"@deriv/translations\\\");\\n;// CONCATENATED MODULE: ./Constants/constants.js\\nvar containers = {\\n  account_transfer: 'account_transfer',\\n  deposit: 'deposit',\\n  payment_agent: 'payment_agent',\\n  payment_agent_transfer: 'payment_agent_transfer',\\n  withdraw: 'withdraw'\\n};\\nvar map_action = {\\n  withdraw: 'payment_withdraw',\\n  payment_agent: 'payment_agent_withdraw'\\n};\\n/* harmony default export */ const constants = ({\\n  containers: containers,\\n  map_action: map_action\\n});\\n;// CONCATENATED MODULE: ./Stores/error-store.js\\nvar error_store_dec, error_store_dec2, error_store_dec3, error_store_dec4, error_store_dec5, error_store_dec6, _dec7, error_store_class, error_store_descriptor, error_store_descriptor2, error_store_descriptor3, error_store_descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9;\\n\\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction error_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction error_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar ErrorStore = (error_store_dec = external_mobx_.action.bound, error_store_dec2 = external_mobx_.action.bound, error_store_dec3 = external_mobx_.action.bound, error_store_dec4 = external_mobx_.action.bound, error_store_dec5 = external_mobx_.action.bound, error_store_dec6 = external_mobx_.action.bound, _dec7 = external_mobx_.action.bound, (error_store_class = /*#__PURE__*/function () {\\n  function ErrorStore() {\\n    error_store_classCallCheck(this, ErrorStore);\\n\\n    error_store_initializerDefineProperty(this, \\\"message\\\", error_store_descriptor, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"code\\\", error_store_descriptor2, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"fields\\\", error_store_descriptor3, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_show_full_page\\\", error_store_descriptor4, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"onClickButton\\\", _descriptor5, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_uk_funds_protection\\\", _descriptor6, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_self_exclusion_max_turnover_set\\\", _descriptor7, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_authentication\\\", _descriptor8, this);\\n\\n    error_store_initializerDefineProperty(this, \\\"is_ask_financial_risk_approval\\\", _descriptor9, this);\\n  }\\n\\n  error_store_createClass(ErrorStore, [{\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(error, onClickButton, is_show_full_page) {\\n      // for errors that need to show a button, reset the form\\n      var error_object = _objectSpread({\\n        onClickButton: onClickButton,\\n        code: error.code,\\n        message: error.message,\\n        is_show_full_page: is_show_full_page || /InvalidToken|WrongResponse/.test(error.code)\\n      }, (0,shared_.getPropertyValue)(error, ['details', 'fields']) && {\\n        fields: error.details.fields\\n      });\\n\\n      this.onClickButton = error_object.onClickButton;\\n      this.code = error_object.code;\\n      this.message = error_object.message;\\n      this.is_show_full_page = error_object.is_show_full_page;\\n      this.fields = error_object.fields;\\n      this.is_ask_uk_funds_protection = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_uk_funds_protection;\\n      this.is_self_exclusion_max_turnover_set = error_object === null || error_object === void 0 ? void 0 : error_object.is_self_exclusion_max_turnover_set;\\n      this.is_ask_authentication = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_authentication;\\n      this.is_ask_financial_risk_approval = error_object === null || error_object === void 0 ? void 0 : error_object.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"handleCashierError\\\",\\n    value: function handleCashierError(error) {\\n      switch (error.code) {\\n        case 'ASK_TNC_APPROVAL':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_FIX_DETAILS':\\n          this.setErrorMessage(error, null, true);\\n          break;\\n\\n        case 'ASK_UK_FUNDS_PROTECTION':\\n          this.setIsAskUkFundsProtection(true);\\n          break;\\n\\n        case 'ASK_SELF_EXCLUSION_MAX_TURNOVER_SET':\\n          this.setIsSelfExclusionMaxTurnoverSet(true);\\n          break;\\n\\n        case 'ASK_AUTHENTICATE':\\n        case 'ASK_AGE_VERIFICATION':\\n          this.setIsAskAuthentication(true);\\n          break;\\n\\n        case 'ASK_FINANCIAL_RISK_APPROVAL':\\n          this.setIsAskFinancialRiskApproval(true);\\n          break;\\n\\n        default:\\n          this.setErrorMessage(error);\\n          this.setIsAskUkFundsProtection(false);\\n          this.setIsSelfExclusionMaxTurnoverSet(false);\\n          this.setIsAskAuthentication(false);\\n          this.setIsAskFinancialRiskApproval(false);\\n      }\\n    }\\n  }, {\\n    key: \\\"setMessage\\\",\\n    value: function setMessage(value) {\\n      this.message = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskUkFundsProtection\\\",\\n    value: function setIsAskUkFundsProtection(value) {\\n      this.is_ask_uk_funds_protection = value;\\n    }\\n  }, {\\n    key: \\\"setIsSelfExclusionMaxTurnoverSet\\\",\\n    value: function setIsSelfExclusionMaxTurnoverSet(value) {\\n      this.is_self_exclusion_max_turnover_set = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskAuthentication\\\",\\n    value: function setIsAskAuthentication(value) {\\n      this.is_ask_authentication = value;\\n    }\\n  }, {\\n    key: \\\"setIsAskFinancialRiskApproval\\\",\\n    value: function setIsAskFinancialRiskApproval(value) {\\n      this.is_ask_financial_risk_approval = value;\\n    }\\n  }]);\\n\\n  return ErrorStore;\\n}(), (error_store_descriptor = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor2 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"code\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor3 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"fields\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_store_descriptor4 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_show_full_page\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor5 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"onClickButton\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor6 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_uk_funds_protection\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor7 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_self_exclusion_max_turnover_set\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor8 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_authentication\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), _descriptor9 = error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"is_ask_financial_risk_approval\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setErrorMessage\\\", [error_store_dec], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setErrorMessage\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"handleCashierError\\\", [error_store_dec2], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"handleCashierError\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setMessage\\\", [error_store_dec3], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setMessage\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskUkFundsProtection\\\", [error_store_dec4], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskUkFundsProtection\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsSelfExclusionMaxTurnoverSet\\\", [error_store_dec5], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsSelfExclusionMaxTurnoverSet\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskAuthentication\\\", [error_store_dec6], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskAuthentication\\\"), error_store_class.prototype), error_store_applyDecoratedDescriptor(error_store_class.prototype, \\\"setIsAskFinancialRiskApproval\\\", [_dec7], Object.getOwnPropertyDescriptor(error_store_class.prototype, \\\"setIsAskFinancialRiskApproval\\\"), error_store_class.prototype)), error_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/account-transfer-store.js\\nvar account_transfer_store_dec, account_transfer_store_dec2, account_transfer_store_dec3, account_transfer_store_dec4, account_transfer_store_dec5, account_transfer_store_dec6, account_transfer_store_dec7, _dec8, _dec9, _dec10, _dec11, _dec12, _dec13, _dec14, _dec15, _dec16, _dec17, _dec18, _dec19, _dec20, _dec21, _dec22, _dec23, _dec24, account_transfer_store_class, account_transfer_store_descriptor, account_transfer_store_descriptor2, account_transfer_store_descriptor3, account_transfer_store_descriptor4, account_transfer_store_descriptor5, account_transfer_store_descriptor6, account_transfer_store_descriptor7, account_transfer_store_descriptor8, account_transfer_store_descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _descriptor15, _descriptor16;\\n\\nfunction account_transfer_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction account_transfer_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? account_transfer_store_ownKeys(Object(source), !0).forEach(function (key) { account_transfer_store_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : account_transfer_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction account_transfer_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }\\n\\nfunction _nonIterableRest() { throw new TypeError(\\\"Invalid attempt to destructure non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\\\"); }\\n\\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \\\"string\\\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \\\"Object\\\" && o.constructor) n = o.constructor.name; if (n === \\\"Map\\\" || n === \\\"Set\\\") return Array.from(o); if (n === \\\"Arguments\\\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\\n\\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\\n\\nfunction _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== \\\"undefined\\\" && arr[Symbol.iterator] || arr[\\\"@@iterator\\\"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\\\"return\\\"] != null) _i[\\\"return\\\"](); } finally { if (_d) throw _e; } } return _arr; }\\n\\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\\n\\nfunction account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction account_transfer_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { account_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction account_transfer_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction account_transfer_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction account_transfer_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction account_transfer_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) account_transfer_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) account_transfer_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction account_transfer_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction account_transfer_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar hasTransferNotAllowedLoginid = function hasTransferNotAllowedLoginid(loginid) {\\n  return loginid.startsWith('MX');\\n};\\n\\nvar getSelectedError = function getSelectedError(selected_value, is_from_account) {\\n  if (is_from_account) {\\n    return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n      i18n_default_text: \\\"Transfer from {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n      values: {\\n        selected_value: selected_value\\n      }\\n    });\\n  }\\n\\n  return /*#__PURE__*/external_react_default().createElement(translations_.Localize, {\\n    i18n_default_text: \\\"Transfer to {{selected_value}} is not allowed, Please choose another account from dropdown\\\",\\n    values: {\\n      selected_value: selected_value\\n    }\\n  });\\n};\\n\\nvar AccountTransferStore = (account_transfer_store_dec = external_mobx_.action.bound, account_transfer_store_dec2 = external_mobx_.action.bound, account_transfer_store_dec3 = external_mobx_.action.bound, account_transfer_store_dec4 = external_mobx_.action.bound, account_transfer_store_dec5 = external_mobx_.action.bound, account_transfer_store_dec6 = external_mobx_.action.bound, account_transfer_store_dec7 = external_mobx_.action.bound, _dec8 = external_mobx_.action.bound, _dec9 = external_mobx_.action.bound, _dec10 = external_mobx_.action.bound, _dec11 = external_mobx_.action.bound, _dec12 = external_mobx_.action.bound, _dec13 = external_mobx_.action.bound, _dec14 = external_mobx_.action.bound, _dec15 = external_mobx_.action.bound, _dec16 = external_mobx_.action.bound, _dec17 = external_mobx_.action.bound, _dec18 = external_mobx_.action.bound, _dec19 = external_mobx_.action.bound, _dec20 = external_mobx_.action.bound, _dec21 = external_mobx_.action.bound, _dec22 = external_mobx_.action.bound, _dec23 = external_mobx_.action.bound, _dec24 = external_mobx_.action.bound, (account_transfer_store_class = /*#__PURE__*/function () {\\n  function AccountTransferStore(_ref) {\\n    var _this = this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    account_transfer_store_classCallCheck(this, AccountTransferStore);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"accounts_list\\\", account_transfer_store_descriptor, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"container\\\", account_transfer_store_descriptor2, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"error\\\", account_transfer_store_descriptor3, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"has_no_account\\\", account_transfer_store_descriptor4, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"has_no_accounts_balance\\\", account_transfer_store_descriptor5, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_transfer_confirm\\\", account_transfer_store_descriptor6, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", account_transfer_store_descriptor7, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"is_mt5_transfer_in_progress\\\", account_transfer_store_descriptor8, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"minimum_fee\\\", account_transfer_store_descriptor9, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"receipt\\\", _descriptor10, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"selected_from\\\", _descriptor11, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"selected_to\\\", _descriptor12, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"account_transfer_amount\\\", _descriptor13, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"transfer_fee\\\", _descriptor14, this);\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"transfer_limit\\\", _descriptor15, this);\\n\\n    this.requestTransferBetweenAccounts = /*#__PURE__*/function () {\\n      var _ref3 = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {\\n        var amount, _this$root_store, client, modules, setLoading, is_logged_in, responseMt5LoginList, responseTradingPlatformAccountsList, setAccountStatus, setBalanceOtherAccounts, is_mt_transfer, currency, transfer_between_accounts, account_status_response;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                amount = _ref2.amount;\\n                _this$root_store = _this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                setLoading = modules.cashier.general_store.setLoading;\\n                is_logged_in = client.is_logged_in, responseMt5LoginList = client.responseMt5LoginList, responseTradingPlatformAccountsList = client.responseTradingPlatformAccountsList, setAccountStatus = client.setAccountStatus, setBalanceOtherAccounts = client.setBalanceOtherAccounts;\\n\\n                if (is_logged_in) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\", null);\\n\\n              case 6:\\n                setLoading(true);\\n\\n                _this.error.setErrorMessage('');\\n\\n                is_mt_transfer = _this.selected_from.is_mt || _this.selected_to.is_mt;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(true);\\n                currency = _this.selected_from.currency;\\n                _context.next = 13;\\n                return _this.WS.authorized.transferBetweenAccounts(_this.selected_from.value, _this.selected_to.value, currency, amount);\\n\\n              case 13:\\n                transfer_between_accounts = _context.sent;\\n                if (is_mt_transfer) _this.setIsMT5TransferInProgress(false);\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context.next = 24;\\n                  break;\\n                }\\n\\n                if (!(transfer_between_accounts.error.code === 'Fiat2CryptoTransferOverLimit')) {\\n                  _context.next = 21;\\n                  break;\\n                }\\n\\n                _context.next = 19;\\n                return _this.WS.authorized.getAccountStatus();\\n\\n              case 19:\\n                account_status_response = _context.sent;\\n\\n                if (!account_status_response.error) {\\n                  setAccountStatus(account_status_response.get_account_status);\\n                }\\n\\n              case 21:\\n                _this.error.setErrorMessage(transfer_between_accounts.error);\\n\\n                _context.next = 28;\\n                break;\\n\\n              case 24:\\n                _this.setReceiptTransfer({\\n                  amount: (0,shared_.formatMoney)(currency, amount, true)\\n                });\\n\\n                transfer_between_accounts.accounts.forEach(function (account) {\\n                  _this.setBalanceByLoginId(account.loginid, account.balance);\\n\\n                  if (account.loginid === _this.selected_from.value) {\\n                    _this.setBalanceSelectedFrom(account.balance);\\n                  } else if (account.loginid === _this.selected_to.value) {\\n                    _this.setBalanceSelectedTo(account.balance);\\n                  } // if one of the accounts was mt5\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5) {\\n                    Promise.all([_this.WS.mt5LoginList(), _this.WS.balanceAll()]).then(function (_ref4) {\\n                      var _ref5 = _slicedToArray(_ref4, 2),\\n                          mt5_login_list_response = _ref5[0],\\n                          balance_response = _ref5[1];\\n\\n                      // update the balance for account switcher by renewing the mt5_login_list response\\n                      responseMt5LoginList(mt5_login_list_response); // update total balance since MT5 total only comes in non-stream balance call\\n\\n                      setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  } // if one of the accounts was dxtrade\\n\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE) {\\n                    Promise.all([_this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE), _this.WS.balanceAll()]).then(function (_ref6) {\\n                      var _ref7 = _slicedToArray(_ref6, 2),\\n                          dxtrade_login_list_response = _ref7[0],\\n                          balance_response = _ref7[1];\\n\\n                      // update the balance for account switcher by renewing the dxtrade_login_list_response\\n                      responseTradingPlatformAccountsList(dxtrade_login_list_response); // update total balance since Dxtrade total only comes in non-stream balance call\\n\\n                      setBalanceOtherAccounts(balance_response.balance);\\n                    });\\n                  }\\n                });\\n\\n                _this.setAccountTransferAmount(null);\\n\\n                _this.setIsTransferConfirm(true);\\n\\n              case 28:\\n                setLoading(false);\\n                return _context.abrupt(\\\"return\\\", transfer_between_accounts);\\n\\n              case 30:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee);\\n      }));\\n\\n      return function (_x) {\\n        return _ref3.apply(this, arguments);\\n      };\\n    }();\\n\\n    account_transfer_store_initializerDefineProperty(this, \\\"resetAccountTransfer\\\", _descriptor16, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  account_transfer_store_createClass(AccountTransferStore, [{\\n    key: \\\"is_account_transfer_visible\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          has_maltainvest_account = _this$root_store$clie.has_maltainvest_account,\\n          landing_company_shortcode = _this$root_store$clie.landing_company_shortcode,\\n          residence = _this$root_store$clie.residence; // cashier Transfer account tab is hidden for iom clients\\n      // check for residence to hide the tab before creating a real money account\\n\\n      return residence !== 'im' && (landing_company_shortcode !== 'malta' || has_maltainvest_account);\\n    }\\n  }, {\\n    key: \\\"is_transfer_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie2 = this.root_store.client,\\n          is_financial_account = _this$root_store$clie2.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie2.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie2.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie2.account_status;\\n      if (!account_status.status) return false;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete);\\n      return need_financial_assessment && this.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"setBalanceByLoginId\\\",\\n    value: function setBalanceByLoginId(loginid, balance) {\\n      this.accounts_list.find(function (acc) {\\n        return loginid === acc.value;\\n      }).balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedFrom\\\",\\n    value: function setBalanceSelectedFrom(balance) {\\n      this.selected_from.balance = balance;\\n    }\\n  }, {\\n    key: \\\"setBalanceSelectedTo\\\",\\n    value: function setBalanceSelectedTo(balance) {\\n      this.selected_to.balance = balance;\\n    } // possible transfers:\\n    // 1. fiat to crypto & vice versa\\n    // 2. fiat to mt & vice versa\\n    // 3. crypto to mt & vice versa\\n\\n  }, {\\n    key: \\\"onMountAccountTransfer\\\",\\n    value: function () {\\n      var _onMountAccountTransfer = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store2, client, modules, _modules$cashier$gene, onMountCommon, setLoading, setOnRemount, active_accounts, is_logged_in, has_updated_account_balance, _this$accounts_list, transfer_between_accounts, cfd_transfer_to_login_id, obj_values;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading, setOnRemount = _modules$cashier$gene.setOnRemount;\\n                active_accounts = client.active_accounts, is_logged_in = client.is_logged_in;\\n                setLoading(true);\\n                setOnRemount(this.onMountAccountTransfer);\\n                _context2.next = 7;\\n                return onMountCommon();\\n\\n              case 7:\\n                _context2.next = 9;\\n                return this.WS.wait('website_status');\\n\\n              case 9:\\n                // check if some balance update has come in since the last mount\\n                has_updated_account_balance = this.has_no_accounts_balance && Object.keys(active_accounts).find(function (account) {\\n                  return !active_accounts[account].is_virtual && active_accounts[account].balance;\\n                });\\n\\n                if (has_updated_account_balance) {\\n                  this.setHasNoAccountsBalance(false);\\n                } // various issues happen when loading from cache\\n                // e.g. new account may have been created, transfer may have been done elsewhere, etc\\n                // so on load of this page just call it again\\n\\n\\n                if (!is_logged_in) {\\n                  _context2.next = 27;\\n                  break;\\n                }\\n\\n                _context2.next = 14;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 14:\\n                transfer_between_accounts = _context2.sent;\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context2.next = 19;\\n                  break;\\n                }\\n\\n                this.error.setErrorMessage(transfer_between_accounts.error, this.onMountAccountTransfer);\\n                setLoading(false);\\n                return _context2.abrupt(\\\"return\\\");\\n\\n              case 19:\\n                if (this.canDoAccountTransfer(transfer_between_accounts.accounts)) {\\n                  _context2.next = 21;\\n                  break;\\n                }\\n\\n                return _context2.abrupt(\\\"return\\\");\\n\\n              case 21:\\n                _context2.next = 23;\\n                return this.sortAccountsTransfer(transfer_between_accounts);\\n\\n              case 23:\\n                this.setTransferFee();\\n                this.setMinimumFee();\\n                this.setTransferLimit();\\n\\n                if (((_this$accounts_list = this.accounts_list) === null || _this$accounts_list === void 0 ? void 0 : _this$accounts_list.length) > 0) {\\n                  cfd_transfer_to_login_id = sessionStorage.getItem('cfd_transfer_to_login_id');\\n                  sessionStorage.removeItem('cfd_transfer_to_login_id');\\n                  obj_values = this.accounts_list.find(function (account) {\\n                    return account.value === cfd_transfer_to_login_id;\\n                  });\\n\\n                  if (obj_values) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    }\\n\\n                    this.setSelectedTo(obj_values);\\n                  }\\n                }\\n\\n              case 27:\\n                setLoading(false);\\n\\n              case 28:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onMountAccountTransfer() {\\n        return _onMountAccountTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountAccountTransfer;\\n    }()\\n  }, {\\n    key: \\\"canDoAccountTransfer\\\",\\n    value: function canDoAccountTransfer(accounts) {\\n      var can_transfer = true; // should have at least one account with balance\\n\\n      if (!accounts.find(function (account) {\\n        return +account.balance > 0;\\n      })) {\\n        can_transfer = false;\\n        this.setHasNoAccountsBalance(true);\\n      } else {\\n        this.setHasNoAccountsBalance(false);\\n      } // should have at least two real-money accounts\\n\\n\\n      if (accounts.length <= 1) {\\n        can_transfer = false;\\n        this.setHasNoAccount(true);\\n      } else {\\n        this.setHasNoAccount(false);\\n      }\\n\\n      if (!can_transfer) {\\n        this.root_store.modules.cashier.general_store.setLoading(false);\\n      }\\n\\n      return can_transfer;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccountsBalance\\\",\\n    value: function setHasNoAccountsBalance(has_no_accounts_balance) {\\n      this.has_no_accounts_balance = has_no_accounts_balance;\\n    }\\n  }, {\\n    key: \\\"setHasNoAccount\\\",\\n    value: function setHasNoAccount(has_no_account) {\\n      this.has_no_account = has_no_account;\\n    }\\n  }, {\\n    key: \\\"setTransferFee\\\",\\n    value: function setTransferFee() {\\n      var transfer_fee = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.selected_from.currency, 'transfer_between_accounts', 'fees', this.selected_to.currency]);\\n      this.transfer_fee = Number(transfer_fee || 0);\\n    }\\n  }, {\\n    key: \\\"setMinimumFee\\\",\\n    value: function setMinimumFee() {\\n      var decimals = (0,shared_.getDecimalPlaces)(this.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.minimum_fee = (1 / Math.pow(10, decimals)).toFixed(decimals);\\n    }\\n  }, {\\n    key: \\\"setTransferLimit\\\",\\n    value: function setTransferLimit() {\\n      var is_mt_transfer = this.selected_from.is_mt || this.selected_to.is_mt;\\n      var is_dxtrade_transfer = this.selected_from.is_dxtrade || this.selected_to.is_dxtrade;\\n      var limits_key;\\n\\n      if (is_mt_transfer) {\\n        limits_key = 'limits_mt5';\\n      } else if (is_dxtrade_transfer) {\\n        limits_key = 'limits_dxtrade';\\n      } else {\\n        limits_key = 'limits';\\n      }\\n\\n      var transfer_limit = (0,shared_.getPropertyValue)((0,shared_.getCurrencies)(), [this.selected_from.currency, 'transfer_between_accounts', limits_key]);\\n      var balance = this.selected_from.balance;\\n      var decimal_places = (0,shared_.getDecimalPlaces)(this.selected_from.currency); // we need .toFixed() so that it doesn't display in scientific notation, e.g. 1e-8 for currencies with 8 decimal places\\n\\n      this.transfer_limit = {\\n        max: !(transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.max) || +balance >= ((transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min) || 0) && +balance <= (transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max) ? balance : transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.max.toFixed(decimal_places),\\n        min: transfer_limit !== null && transfer_limit !== void 0 && transfer_limit.min ? (+(transfer_limit === null || transfer_limit === void 0 ? void 0 : transfer_limit.min)).toFixed(decimal_places) : null\\n      };\\n    }\\n  }, {\\n    key: \\\"sortAccountsTransfer\\\",\\n    value: function () {\\n      var _sortAccountsTransfer = account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(response_accounts) {\\n        var _yield$this$WS$storag,\\n            _yield$this$WS$tradin,\\n            _this2 = this;\\n\\n        var transfer_between_accounts, mt5_login_list, dxtrade_accounts_list, accounts, arr_accounts;\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.t0 = response_accounts;\\n\\n                if (_context3.t0) {\\n                  _context3.next = 5;\\n                  break;\\n                }\\n\\n                _context3.next = 4;\\n                return this.WS.authorized.transferBetweenAccounts();\\n\\n              case 4:\\n                _context3.t0 = _context3.sent;\\n\\n              case 5:\\n                transfer_between_accounts = _context3.t0;\\n\\n                if (this.accounts_list.length) {\\n                  _context3.next = 9;\\n                  break;\\n                }\\n\\n                if (!transfer_between_accounts.error) {\\n                  _context3.next = 9;\\n                  break;\\n                }\\n\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 9:\\n                _context3.next = 11;\\n                return this.WS.storage.mt5LoginList();\\n\\n              case 11:\\n                _context3.t2 = _yield$this$WS$storag = _context3.sent;\\n                _context3.t1 = _context3.t2 === null;\\n\\n                if (_context3.t1) {\\n                  _context3.next = 15;\\n                  break;\\n                }\\n\\n                _context3.t1 = _yield$this$WS$storag === void 0;\\n\\n              case 15:\\n                if (!_context3.t1) {\\n                  _context3.next = 19;\\n                  break;\\n                }\\n\\n                _context3.t3 = void 0;\\n                _context3.next = 20;\\n                break;\\n\\n              case 19:\\n                _context3.t3 = _yield$this$WS$storag.mt5_login_list;\\n\\n              case 20:\\n                mt5_login_list = _context3.t3;\\n                _context3.next = 23;\\n                return this.WS.tradingPlatformAccountsList(shared_.CFD_PLATFORMS.DXTRADE);\\n\\n              case 23:\\n                _context3.t5 = _yield$this$WS$tradin = _context3.sent;\\n                _context3.t4 = _context3.t5 === null;\\n\\n                if (_context3.t4) {\\n                  _context3.next = 27;\\n                  break;\\n                }\\n\\n                _context3.t4 = _yield$this$WS$tradin === void 0;\\n\\n              case 27:\\n                if (!_context3.t4) {\\n                  _context3.next = 31;\\n                  break;\\n                }\\n\\n                _context3.t6 = void 0;\\n                _context3.next = 32;\\n                break;\\n\\n              case 31:\\n                _context3.t6 = _yield$this$WS$tradin.trading_platform_accounts;\\n\\n              case 32:\\n                dxtrade_accounts_list = _context3.t6;\\n                // TODO: remove this temporary mapping when API adds market_type and sub_account_type to transfer_between_accounts\\n                accounts = transfer_between_accounts.accounts.map(function (account) {\\n                  if (account.account_type === shared_.CFD_PLATFORMS.MT5 && Array.isArray(mt5_login_list) && mt5_login_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in mt5_login_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var found_account = mt5_login_list.find(function (acc) {\\n                      return acc.login === account.loginid;\\n                    });\\n                    if (found_account === undefined) return account;\\n                    return account_transfer_store_objectSpread(account_transfer_store_objectSpread(account_transfer_store_objectSpread({}, account), found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.MT5\\n                    });\\n                  }\\n\\n                  if (account.account_type === shared_.CFD_PLATFORMS.DXTRADE && Array.isArray(dxtrade_accounts_list) && dxtrade_accounts_list.length) {\\n                    // account_type in transfer_between_accounts (mt5|binary)\\n                    // gets overridden by account_type in dxtrade_accounts_list (demo|real)\\n                    // since in cashier all these are real accounts, the mt5 account type is what we want to keep\\n                    var _found_account = dxtrade_accounts_list.find(function (acc) {\\n                      return acc.account_id === account.loginid;\\n                    });\\n\\n                    if (_found_account === undefined) return account;\\n                    return account_transfer_store_objectSpread(account_transfer_store_objectSpread(account_transfer_store_objectSpread({}, account), _found_account), {}, {\\n                      account_type: shared_.CFD_PLATFORMS.DXTRADE\\n                    });\\n                  }\\n\\n                  return account;\\n                }); // sort accounts as follows:\\n                // for MT5, synthetic, financial, financial stp\\n                // for non-MT5, fiat, crypto (alphabetically by currency)\\n                // should have more than one account\\n\\n                if (transfer_between_accounts.accounts.length > 1) {\\n                  accounts.sort(function (a, b) {\\n                    var a_is_mt = a.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var b_is_mt = b.account_type === shared_.CFD_PLATFORMS.MT5;\\n                    var a_is_crypto = !a_is_mt && (0,shared_.isCryptocurrency)(a.currency);\\n                    var b_is_crypto = !b_is_mt && (0,shared_.isCryptocurrency)(b.currency);\\n                    var a_is_fiat = !a_is_mt && !a_is_crypto;\\n                    var b_is_fiat = !b_is_mt && !b_is_crypto;\\n\\n                    if (a_is_mt && b_is_mt) {\\n                      if (a.market_type === 'gaming' || a.market_type === 'synthetic') {\\n                        return -1;\\n                      }\\n\\n                      if (a.sub_account_type === 'financial') {\\n                        return b.market_type === 'gaming' || b.market_type === 'synthetic' ? 1 : -1;\\n                      }\\n\\n                      return 1;\\n                    } else if (a_is_crypto && b_is_crypto || a_is_fiat && b_is_fiat) {\\n                      return a.currency < b.currency ? -1 : 1;\\n                    } else if (a_is_crypto && b_is_mt || a_is_fiat && b_is_crypto || a_is_fiat && b_is_mt) {\\n                      return -1;\\n                    }\\n\\n                    return a_is_mt ? -1 : 1;\\n                  });\\n                }\\n\\n                arr_accounts = [];\\n                this.setSelectedTo({}); // set selected to empty each time so we can redetermine its value on reload\\n\\n                accounts.forEach(function (account) {\\n                  var _cfd_platforms$accoun, _cfd_platforms$accoun2;\\n\\n                  var cfd_platforms = {\\n                    mt5: {\\n                      name: 'DMT5',\\n                      icon: 'IcMt5'\\n                    },\\n                    dxtrade: {\\n                      name: 'Deriv X',\\n                      icon: 'IcDxtrade'\\n                    }\\n                  };\\n                  var is_cfd = Object.keys(cfd_platforms).includes(account.account_type);\\n                  var cfd_text_display = (_cfd_platforms$accoun = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun === void 0 ? void 0 : _cfd_platforms$accoun.name;\\n                  var cfd_icon_display = \\\"\\\".concat((_cfd_platforms$accoun2 = cfd_platforms[account.account_type]) === null || _cfd_platforms$accoun2 === void 0 ? void 0 : _cfd_platforms$accoun2.icon, \\\"-\\\").concat((0,shared_.getCFDAccount)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this2.root_store.client.is_eu\\n                  }));\\n                  var account_text_display = is_cfd ? \\\"\\\".concat(cfd_text_display, \\\" \\\").concat((0,shared_.getCFDAccountDisplay)({\\n                    market_type: account.market_type,\\n                    sub_account_type: account.sub_account_type,\\n                    platform: account.account_type,\\n                    is_eu: _this2.root_store.client.is_eu\\n                  })) : (0,shared_.getCurrencyDisplayCode)(account.currency !== 'eUSDT' ? account.currency.toUpperCase() : account.currency);\\n\\n                  var obj_values = account_transfer_store_objectSpread({\\n                    text: account_text_display,\\n                    value: account.loginid,\\n                    balance: account.balance,\\n                    currency: account.currency,\\n                    is_crypto: (0,shared_.isCryptocurrency)(account.currency),\\n                    is_mt: account.account_type === shared_.CFD_PLATFORMS.MT5,\\n                    is_dxtrade: account.account_type === shared_.CFD_PLATFORMS.DXTRADE\\n                  }, is_cfd && {\\n                    platform_icon: cfd_icon_display,\\n                    market_type: (0,shared_.getCFDAccount)({\\n                      market_type: account.market_type,\\n                      sub_account_type: account.sub_account_type,\\n                      platform: account.account_type,\\n                      is_eu: _this2.root_store.client.is_eu\\n                    })\\n                  }); // set current logged in client as the default transfer from account\\n\\n\\n                  if (account.loginid === _this2.root_store.client.loginid) {\\n                    // check if selected from is not allowed account\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      obj_values.error = getSelectedError(obj_values.value, true);\\n                    }\\n\\n                    _this2.setSelectedFrom(obj_values);\\n                  } else if ((0,shared_.isEmptyObject)(_this2.selected_to)) {\\n                    if (hasTransferNotAllowedLoginid(obj_values.value)) {\\n                      // check if selected to is not allowed account\\n                      obj_values.error = getSelectedError(obj_values.value);\\n                    } // set the first available account as the default transfer to account\\n\\n\\n                    _this2.setSelectedTo(obj_values);\\n                  }\\n\\n                  arr_accounts.push(obj_values);\\n                });\\n                this.setAccounts(arr_accounts);\\n\\n              case 39:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function sortAccountsTransfer(_x2) {\\n        return _sortAccountsTransfer.apply(this, arguments);\\n      }\\n\\n      return sortAccountsTransfer;\\n    }()\\n  }, {\\n    key: \\\"setSelectedFrom\\\",\\n    value: function setSelectedFrom(obj_values) {\\n      this.selected_from = obj_values;\\n    }\\n  }, {\\n    key: \\\"setSelectedTo\\\",\\n    value: function setSelectedTo(obj_values) {\\n      this.selected_to = obj_values;\\n    }\\n  }, {\\n    key: \\\"setAccounts\\\",\\n    value: function setAccounts(arr_accounts) {\\n      this.accounts_list = arr_accounts;\\n    }\\n  }, {\\n    key: \\\"setIsTransferConfirm\\\",\\n    value: function setIsTransferConfirm(is_transfer_confirm) {\\n      this.is_transfer_confirm = is_transfer_confirm;\\n    }\\n  }, {\\n    key: \\\"setAccountTransferAmount\\\",\\n    value: function setAccountTransferAmount(amount) {\\n      this.account_transfer_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsMT5TransferInProgress\\\",\\n    value: function setIsMT5TransferInProgress(is_mt5_transfer_in_progress) {\\n      this.is_mt5_transfer_in_progress = is_mt5_transfer_in_progress;\\n    }\\n  }, {\\n    key: \\\"setReceiptTransfer\\\",\\n    value: function setReceiptTransfer(_ref8) {\\n      var amount = _ref8.amount;\\n      this.receipt = {\\n        amount_transferred: amount\\n      };\\n    }\\n  }, {\\n    key: \\\"onChangeTransferFrom\\\",\\n    value: function onChangeTransferFrom(_ref9) {\\n      var target = _ref9.target;\\n      this.error.setErrorMessage('');\\n      this.selected_from.error = '';\\n      var accounts = this.accounts_list;\\n      var selected_from = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }); // if new value of selected_from is the same as the current selected_to\\n      // switch the value of selected_from and selected_to\\n\\n      if (selected_from.value === this.selected_to.value) {\\n        this.onChangeTransferTo({\\n          target: {\\n            value: this.selected_from.value\\n          }\\n        });\\n      } else if (selected_from.is_mt && this.selected_to.is_mt || selected_from.is_dxtrade && this.selected_to.is_dxtrade || selected_from.is_dxtrade && this.selected_to.is_mt || selected_from.is_mt && this.selected_to.is_dxtrade) {\\n        // not allowed to transfer from MT to MT\\n        // not allowed to transfer from Dxtrade to Dxtrade\\n        // not allowed to transfer between MT and Dxtrade\\n        var first_non_cfd = this.accounts_list.find(function (account) {\\n          return !account.is_mt && !account.is_dxtrade;\\n        });\\n        this.onChangeTransferTo({\\n          target: {\\n            value: first_non_cfd.value\\n          }\\n        });\\n      }\\n\\n      if (hasTransferNotAllowedLoginid(selected_from.value)) {\\n        selected_from.error = getSelectedError(selected_from.value, true);\\n      }\\n\\n      this.selected_from = selected_from;\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"onChangeTransferTo\\\",\\n    value: function onChangeTransferTo(_ref10) {\\n      var target = _ref10.target;\\n      this.error.setErrorMessage('');\\n      this.selected_to.error = '';\\n      var accounts = this.accounts_list;\\n      this.selected_to = accounts.find(function (account) {\\n        return account.value === target.value;\\n      }) || {};\\n\\n      if (hasTransferNotAllowedLoginid(this.selected_to.value)) {\\n        this.selected_to.error = getSelectedError(this.selected_to.value);\\n      }\\n\\n      this.setTransferFee();\\n      this.setMinimumFee();\\n      this.setTransferLimit();\\n    }\\n  }, {\\n    key: \\\"setTransferPercentageSelectorResult\\\",\\n    value: function setTransferPercentageSelectorResult(amount) {\\n      var _this$root_store$modu = this.root_store.modules.cashier,\\n          crypto_fiat_converter = _this$root_store$modu.crypto_fiat_converter,\\n          general_store = _this$root_store$modu.general_store;\\n      var selected_from_currency = this.selected_from.currency;\\n      var selected_to_currency = this.selected_to.currency;\\n\\n      if (amount > 0 || +this.selected_from.balance === 0) {\\n        crypto_fiat_converter.setConverterFromAmount(amount);\\n        this.validateTransferFromAmount();\\n        crypto_fiat_converter.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, selected_from_currency, selected_to_currency);\\n      } else {\\n        crypto_fiat_converter.resetConverter();\\n      }\\n\\n      crypto_fiat_converter.setIsTimerVisible(false);\\n      general_store.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateTransferFromAmount\\\",\\n    value: function validateTransferFromAmount() {\\n      var _this$root_store$modu2 = this.root_store.modules.cashier.crypto_fiat_converter,\\n          converter_from_amount = _this$root_store$modu2.converter_from_amount,\\n          setConverterFromError = _this$root_store$modu2.setConverterFromError;\\n\\n      if (!converter_from_amount) {\\n        setConverterFromError((0,translations_.localize)('This field is required.'));\\n      } else {\\n        var _validNumber = (0,shared_.validNumber)(converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(this.selected_from.currency),\\n          min: this.transfer_limit.min,\\n          max: this.transfer_limit.max\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) {\\n          setConverterFromError(message);\\n        } else if (+this.selected_from.balance < +converter_from_amount) {\\n          setConverterFromError((0,translations_.localize)('Insufficient funds'));\\n        } else {\\n          setConverterFromError('');\\n        }\\n      }\\n    }\\n  }, {\\n    key: \\\"validateTransferToAmount\\\",\\n    value: function validateTransferToAmount() {\\n      var _this$root_store$modu3 = this.root_store.modules.cashier.crypto_fiat_converter,\\n          converter_to_amount = _this$root_store$modu3.converter_to_amount,\\n          setConverterToError = _this$root_store$modu3.setConverterToError;\\n\\n      if (converter_to_amount) {\\n        var currency = this.selected_to.currency;\\n\\n        var _validNumber2 = (0,shared_.validNumber)(converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) {\\n          setConverterToError(message);\\n        } else {\\n          setConverterToError('');\\n        }\\n      }\\n    }\\n  }]);\\n\\n  return AccountTransferStore;\\n}(), (account_transfer_store_descriptor = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"accounts_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), account_transfer_store_descriptor2 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.account_transfer;\\n  }\\n}), account_transfer_store_descriptor3 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), account_transfer_store_descriptor4 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"has_no_account\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor5 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"has_no_accounts_balance\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor6 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor7 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor8 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_mt5_transfer_in_progress\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), account_transfer_store_descriptor9 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"minimum_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor10 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor11 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"selected_from\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor12 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"selected_to\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), _descriptor13 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"account_transfer_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), _descriptor14 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"transfer_fee\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), _descriptor15 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_account_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"is_account_transfer_visible\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"is_transfer_locked\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceByLoginId\\\", [account_transfer_store_dec], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceByLoginId\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedFrom\\\", [account_transfer_store_dec2], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedTo\\\", [account_transfer_store_dec3], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setBalanceSelectedTo\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onMountAccountTransfer\\\", [account_transfer_store_dec4], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onMountAccountTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccountsBalance\\\", [account_transfer_store_dec5], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccountsBalance\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccount\\\", [account_transfer_store_dec6], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setHasNoAccount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferFee\\\", [account_transfer_store_dec7], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferFee\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setMinimumFee\\\", [_dec8], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setMinimumFee\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferLimit\\\", [_dec9], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferLimit\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"sortAccountsTransfer\\\", [_dec10], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"sortAccountsTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setSelectedFrom\\\", [_dec11], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setSelectedFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setSelectedTo\\\", [_dec12], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setSelectedTo\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setAccounts\\\", [_dec13], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setAccounts\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferConfirm\\\", [_dec14], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferConfirm\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setAccountTransferAmount\\\", [_dec15], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setAccountTransferAmount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\", [_dec16], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setIsMT5TransferInProgress\\\", [_dec17], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setIsMT5TransferInProgress\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setReceiptTransfer\\\", [_dec18], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setReceiptTransfer\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferFrom\\\", [_dec19], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferFrom\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferTo\\\", [_dec20], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"onChangeTransferTo\\\"), account_transfer_store_class.prototype), _descriptor16 = account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"resetAccountTransfer\\\", [_dec21], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this3 = this;\\n\\n    return /*#__PURE__*/account_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n        while (1) {\\n          switch (_context4.prev = _context4.next) {\\n            case 0:\\n              _this3.setIsTransferConfirm(false);\\n\\n              _this3.setTransferLimit();\\n\\n            case 2:\\n            case \\\"end\\\":\\n              return _context4.stop();\\n          }\\n        }\\n      }, _callee4);\\n    }));\\n  }\\n}), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"setTransferPercentageSelectorResult\\\", [_dec22], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"setTransferPercentageSelectorResult\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"validateTransferFromAmount\\\", [_dec23], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"validateTransferFromAmount\\\"), account_transfer_store_class.prototype), account_transfer_store_applyDecoratedDescriptor(account_transfer_store_class.prototype, \\\"validateTransferToAmount\\\", [_dec24], Object.getOwnPropertyDescriptor(account_transfer_store_class.prototype, \\\"validateTransferToAmount\\\"), account_transfer_store_class.prototype)), account_transfer_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/crypto-fiat-converter-store.js\\nvar crypto_fiat_converter_store_dec, crypto_fiat_converter_store_dec2, crypto_fiat_converter_store_dec3, crypto_fiat_converter_store_dec4, crypto_fiat_converter_store_dec5, crypto_fiat_converter_store_dec6, crypto_fiat_converter_store_dec7, crypto_fiat_converter_store_dec8, crypto_fiat_converter_store_dec9, crypto_fiat_converter_store_dec10, crypto_fiat_converter_store_dec11, crypto_fiat_converter_store_dec12, crypto_fiat_converter_store_class, crypto_fiat_converter_store_descriptor, crypto_fiat_converter_store_descriptor2, crypto_fiat_converter_store_descriptor3, crypto_fiat_converter_store_descriptor4, crypto_fiat_converter_store_descriptor5;\\n\\nfunction crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction crypto_fiat_converter_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { crypto_fiat_converter_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction crypto_fiat_converter_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction crypto_fiat_converter_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction crypto_fiat_converter_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction crypto_fiat_converter_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) crypto_fiat_converter_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) crypto_fiat_converter_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction crypto_fiat_converter_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction crypto_fiat_converter_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar CryptoFiatConverterStore = (crypto_fiat_converter_store_dec = external_mobx_.action.bound, crypto_fiat_converter_store_dec2 = external_mobx_.action.bound, crypto_fiat_converter_store_dec3 = external_mobx_.action.bound, crypto_fiat_converter_store_dec4 = external_mobx_.action.bound, crypto_fiat_converter_store_dec5 = external_mobx_.action.bound, crypto_fiat_converter_store_dec6 = external_mobx_.action.bound, crypto_fiat_converter_store_dec7 = external_mobx_.action.bound, crypto_fiat_converter_store_dec8 = external_mobx_.action.bound, crypto_fiat_converter_store_dec9 = external_mobx_.action.bound, crypto_fiat_converter_store_dec10 = external_mobx_.action.bound, crypto_fiat_converter_store_dec11 = external_mobx_.action.bound, crypto_fiat_converter_store_dec12 = external_mobx_.action.bound, (crypto_fiat_converter_store_class = /*#__PURE__*/function () {\\n  function CryptoFiatConverterStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    crypto_fiat_converter_store_classCallCheck(this, CryptoFiatConverterStore);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_from_amount\\\", crypto_fiat_converter_store_descriptor, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_to_amount\\\", crypto_fiat_converter_store_descriptor2, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_from_error\\\", crypto_fiat_converter_store_descriptor3, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"converter_to_error\\\", crypto_fiat_converter_store_descriptor4, this);\\n\\n    crypto_fiat_converter_store_initializerDefineProperty(this, \\\"is_timer_visible\\\", crypto_fiat_converter_store_descriptor5, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  crypto_fiat_converter_store_createClass(CryptoFiatConverterStore, [{\\n    key: \\\"setConverterFromAmount\\\",\\n    value: function setConverterFromAmount(amount) {\\n      this.converter_from_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterToAmount\\\",\\n    value: function setConverterToAmount(amount) {\\n      this.converter_to_amount = amount;\\n    }\\n  }, {\\n    key: \\\"setConverterFromError\\\",\\n    value: function setConverterFromError(error) {\\n      this.converter_from_error = error;\\n    }\\n  }, {\\n    key: \\\"setConverterToError\\\",\\n    value: function setConverterToError(error) {\\n      this.converter_to_error = error;\\n    }\\n  }, {\\n    key: \\\"setIsTimerVisible\\\",\\n    value: function setIsTimerVisible(is_timer_visible) {\\n      this.is_timer_visible = is_timer_visible;\\n    }\\n  }, {\\n    key: \\\"resetTimer\\\",\\n    value: function resetTimer() {\\n      this.setIsTimerVisible(false);\\n    }\\n  }, {\\n    key: \\\"getExchangeRate\\\",\\n    value: function () {\\n      var _getExchangeRate = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(from_currency, to_currency) {\\n        var _yield$this$WS$send, exchange_rates;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.send({\\n                  exchange_rates: 1,\\n                  base_currency: from_currency\\n                });\\n\\n              case 2:\\n                _yield$this$WS$send = _context.sent;\\n                exchange_rates = _yield$this$WS$send.exchange_rates;\\n                return _context.abrupt(\\\"return\\\", exchange_rates.rates[to_currency]);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getExchangeRate(_x, _x2) {\\n        return _getExchangeRate.apply(this, arguments);\\n      }\\n\\n      return getExchangeRate;\\n    }()\\n  }, {\\n    key: \\\"validateFromAmount\\\",\\n    value: function validateFromAmount() {\\n      var _this$root_store$modu = this.root_store.modules.cashier,\\n          account_transfer = _this$root_store$modu.account_transfer,\\n          general_store = _this$root_store$modu.general_store,\\n          withdraw = _this$root_store$modu.withdraw;\\n\\n      if (general_store.active_container === account_transfer.container) {\\n        account_transfer.validateTransferFromAmount();\\n      } else {\\n        withdraw.validateWithdrawFromAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"validateToAmount\\\",\\n    value: function validateToAmount() {\\n      var _this$root_store$modu2 = this.root_store.modules.cashier,\\n          account_transfer = _this$root_store$modu2.account_transfer,\\n          general_store = _this$root_store$modu2.general_store,\\n          withdraw = _this$root_store$modu2.withdraw;\\n\\n      if (general_store.active_container === account_transfer.container) {\\n        account_transfer.validateTransferToAmount();\\n      } else {\\n        withdraw.validateWithdrawToAmount();\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangeConverterFromAmount\\\",\\n    value: function () {\\n      var _onChangeConverterFromAmount = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(_ref2, from_currency, to_currency) {\\n        var target, _this$root_store$modu3, account_transfer, general_store, rate, decimals, amount;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                target = _ref2.target;\\n                _this$root_store$modu3 = this.root_store.modules.cashier, account_transfer = _this$root_store$modu3.account_transfer, general_store = _this$root_store$modu3.general_store;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context2.next = 27;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount(target.value);\\n                this.validateFromAmount();\\n                general_store.percentageSelectorSelectionStatus(true);\\n                general_store.calculatePercentage();\\n\\n                if (!this.converter_from_error) {\\n                  _context2.next = 15;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount('');\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(false);\\n                account_transfer.setAccountTransferAmount('');\\n                _context2.next = 25;\\n                break;\\n\\n              case 15:\\n                _context2.next = 17;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 17:\\n                rate = _context2.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_from_amount) {\\n                  this.setConverterToAmount(amount);\\n                } else {\\n                  this.setConverterToAmount('');\\n                }\\n\\n                this.validateToAmount();\\n                this.setConverterToError('');\\n                this.setIsTimerVisible(true);\\n                account_transfer.setAccountTransferAmount(target.value);\\n\\n              case 25:\\n                _context2.next = 28;\\n                break;\\n\\n              case 27:\\n                this.resetConverter();\\n\\n              case 28:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function onChangeConverterFromAmount(_x3, _x4, _x5) {\\n        return _onChangeConverterFromAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterFromAmount;\\n    }()\\n  }, {\\n    key: \\\"onChangeConverterToAmount\\\",\\n    value: function () {\\n      var _onChangeConverterToAmount = crypto_fiat_converter_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(_ref3, from_currency, to_currency) {\\n        var target, _this$root_store$modu4, account_transfer, general_store, rate, decimals, amount;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                target = _ref3.target;\\n                _this$root_store$modu4 = this.root_store.modules.cashier, account_transfer = _this$root_store$modu4.account_transfer, general_store = _this$root_store$modu4.general_store;\\n                this.resetTimer();\\n\\n                if (!target.value) {\\n                  _context3.next = 25;\\n                  break;\\n                }\\n\\n                this.setConverterToAmount(target.value);\\n                this.validateToAmount();\\n\\n                if (!this.converter_to_error) {\\n                  _context3.next = 13;\\n                  break;\\n                }\\n\\n                this.setConverterFromAmount('');\\n                this.setConverterFromError('');\\n                this.setIsTimerVisible(false);\\n                account_transfer.setAccountTransferAmount('');\\n                _context3.next = 23;\\n                break;\\n\\n              case 13:\\n                _context3.next = 15;\\n                return this.getExchangeRate(from_currency, to_currency);\\n\\n              case 15:\\n                rate = _context3.sent;\\n                decimals = (0,shared_.getDecimalPlaces)(to_currency);\\n                amount = (rate * target.value).toFixed(decimals);\\n\\n                if (+amount || this.converter_to_amount) {\\n                  this.setConverterFromAmount(amount);\\n                } else {\\n                  this.setConverterFromAmount('');\\n                }\\n\\n                general_store.percentageSelectorSelectionStatus(true);\\n                general_store.calculatePercentage();\\n                this.validateFromAmount();\\n\\n                if (this.converter_from_error) {\\n                  this.setIsTimerVisible(false);\\n                  account_transfer.setAccountTransferAmount('');\\n                } else {\\n                  this.setConverterFromError('');\\n                  this.setIsTimerVisible(true);\\n                  account_transfer.setAccountTransferAmount(amount);\\n                }\\n\\n              case 23:\\n                _context3.next = 26;\\n                break;\\n\\n              case 25:\\n                this.resetConverter();\\n\\n              case 26:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onChangeConverterToAmount(_x6, _x7, _x8) {\\n        return _onChangeConverterToAmount.apply(this, arguments);\\n      }\\n\\n      return onChangeConverterToAmount;\\n    }()\\n  }, {\\n    key: \\\"resetConverter\\\",\\n    value: function resetConverter() {\\n      this.setConverterFromAmount('');\\n      this.setConverterToAmount('');\\n      this.setConverterFromError('');\\n      this.setConverterToError('');\\n      this.setIsTimerVisible(false);\\n      this.root_store.modules.cashier.general_store.percentageSelectorSelectionStatus(true);\\n    }\\n  }]);\\n\\n  return CryptoFiatConverterStore;\\n}(), (crypto_fiat_converter_store_descriptor = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_from_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor2 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_to_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor3 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_from_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor4 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"converter_to_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), crypto_fiat_converter_store_descriptor5 = crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"is_timer_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromAmount\\\", [crypto_fiat_converter_store_dec], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToAmount\\\", [crypto_fiat_converter_store_dec2], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromError\\\", [crypto_fiat_converter_store_dec3], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterFromError\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToError\\\", [crypto_fiat_converter_store_dec4], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setConverterToError\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setIsTimerVisible\\\", [crypto_fiat_converter_store_dec5], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"setIsTimerVisible\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetTimer\\\", [crypto_fiat_converter_store_dec6], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetTimer\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"getExchangeRate\\\", [crypto_fiat_converter_store_dec7], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"getExchangeRate\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateFromAmount\\\", [crypto_fiat_converter_store_dec8], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateToAmount\\\", [crypto_fiat_converter_store_dec9], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"validateToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterFromAmount\\\", [crypto_fiat_converter_store_dec10], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterFromAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterToAmount\\\", [crypto_fiat_converter_store_dec11], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"onChangeConverterToAmount\\\"), crypto_fiat_converter_store_class.prototype), crypto_fiat_converter_store_applyDecoratedDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetConverter\\\", [crypto_fiat_converter_store_dec12], Object.getOwnPropertyDescriptor(crypto_fiat_converter_store_class.prototype, \\\"resetConverter\\\"), crypto_fiat_converter_store_class.prototype)), crypto_fiat_converter_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/deposit-store.js\\nvar deposit_store_dec, deposit_store_dec2, deposit_store_class, deposit_store_descriptor, deposit_store_descriptor2;\\n\\nfunction deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction deposit_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { deposit_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction deposit_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction deposit_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction deposit_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction deposit_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) deposit_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) deposit_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction deposit_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction deposit_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\nvar DepositStore = (deposit_store_dec = external_mobx_.action.bound, deposit_store_dec2 = external_mobx_.action.bound, (deposit_store_class = /*#__PURE__*/function () {\\n  function DepositStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    deposit_store_classCallCheck(this, DepositStore);\\n\\n    deposit_store_initializerDefineProperty(this, \\\"container\\\", deposit_store_descriptor, this);\\n\\n    deposit_store_initializerDefineProperty(this, \\\"error\\\", deposit_store_descriptor2, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  deposit_store_createClass(DepositStore, [{\\n    key: \\\"onMountDeposit\\\",\\n    value: function () {\\n      var _onMountDeposit = deposit_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _account_status$statu;\\n\\n        var _this$root_store, client, modules, _modules$cashier$gene, active_container, is_crypto, onMountCommon, setLoading, setOnRemount, _modules$cashier$ifra, checkIframeLoaded, clearTimeoutCashierUrl, is_session_timeout, setContainerHeight, setIframeUrl, setSessionTimeout, setTimeoutCashierUrl, account_status, is_virtual, updateAccountStatus, current_container, response_cashier;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, active_container = _modules$cashier$gene.active_container, is_crypto = _modules$cashier$gene.is_crypto, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading, setOnRemount = _modules$cashier$gene.setOnRemount;\\n                _modules$cashier$ifra = modules.cashier.iframe, checkIframeLoaded = _modules$cashier$ifra.checkIframeLoaded, clearTimeoutCashierUrl = _modules$cashier$ifra.clearTimeoutCashierUrl, is_session_timeout = _modules$cashier$ifra.is_session_timeout, setContainerHeight = _modules$cashier$ifra.setContainerHeight, setIframeUrl = _modules$cashier$ifra.setIframeUrl, setSessionTimeout = _modules$cashier$ifra.setSessionTimeout, setTimeoutCashierUrl = _modules$cashier$ifra.setTimeoutCashierUrl;\\n                account_status = client.account_status, is_virtual = client.is_virtual, updateAccountStatus = client.updateAccountStatus;\\n                current_container = active_container;\\n                setOnRemount(this.onMountDeposit);\\n                _context.next = 8;\\n                return onMountCommon();\\n\\n              case 8:\\n                this.error.setErrorMessage('');\\n                setContainerHeight(0);\\n                setLoading(true);\\n\\n                if (is_session_timeout) {\\n                  _context.next = 14;\\n                  break;\\n                }\\n\\n                checkIframeLoaded();\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 14:\\n                // if session has timed out reset everything\\n                setIframeUrl('');\\n\\n                if (!is_virtual) {\\n                  _context.next = 18;\\n                  break;\\n                }\\n\\n                setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 18:\\n                if (is_crypto) {\\n                  _context.next = 36;\\n                  break;\\n                }\\n\\n                _context.next = 21;\\n                return this.WS.authorized.cashier(active_container, {\\n                  verification_code: 'undefined'\\n                });\\n\\n              case 21:\\n                response_cashier = _context.sent;\\n\\n                if (!(current_container !== active_container)) {\\n                  _context.next = 25;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 25:\\n                if (!response_cashier.error) {\\n                  _context.next = 31;\\n                  break;\\n                }\\n\\n                this.error.handleCashierError(response_cashier.error);\\n                setSessionTimeout(true);\\n                clearTimeoutCashierUrl();\\n                _context.next = 36;\\n                break;\\n\\n              case 31:\\n                _context.next = 33;\\n                return checkIframeLoaded();\\n\\n              case 33:\\n                setIframeUrl(response_cashier.cashier);\\n                setSessionTimeout(false);\\n                setTimeoutCashierUrl();\\n\\n              case 36:\\n                if (account_status !== null && account_status !== void 0 && (_account_status$statu = account_status.status) !== null && _account_status$statu !== void 0 && _account_status$statu.includes('deposit_attempt')) {\\n                  _context.next = 39;\\n                  break;\\n                }\\n\\n                _context.next = 39;\\n                return updateAccountStatus();\\n\\n              case 39:\\n                setLoading(false);\\n\\n              case 40:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMountDeposit() {\\n        return _onMountDeposit.apply(this, arguments);\\n      }\\n\\n      return onMountDeposit;\\n    }()\\n  }, {\\n    key: \\\"is_deposit_locked\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          is_authentication_needed = _this$root_store$clie.is_authentication_needed,\\n          is_tnc_needed = _this$root_store$clie.is_tnc_needed,\\n          is_financial_account = _this$root_store$clie.is_financial_account,\\n          is_financial_information_incomplete = _this$root_store$clie.is_financial_information_incomplete,\\n          is_trading_experience_incomplete = _this$root_store$clie.is_trading_experience_incomplete,\\n          account_status = _this$root_store$clie.account_status,\\n          is_eu = _this$root_store$clie.is_eu,\\n          mt5_login_list = _this$root_store$clie.mt5_login_list,\\n          is_deposit_lock = _this$root_store$clie.is_deposit_lock;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      var need_authentication = this.error.is_ask_authentication || is_authentication_needed && is_eu;\\n      var need_financial_assessment = is_financial_account && (is_financial_information_incomplete || is_trading_experience_incomplete); // CR can deposit without accepting latest tnc except those with Financial STP\\n\\n      var need_tnc = (is_eu || mt5_login_list.some(function (item) {\\n        return item.account_type === 'real' && item.sub_account_type === 'financial_stp';\\n      })) && is_tnc_needed;\\n      return is_deposit_lock || need_authentication || need_tnc || need_financial_assessment || this.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"submitFundsProtection\\\",\\n    value: function submitFundsProtection() {\\n      var _this = this;\\n\\n      this.WS.send({\\n        ukgc_funds_protection: 1,\\n        tnc_approval: 1\\n      }).then(function (response) {\\n        if (response.error) {\\n          _this.error.setMessage(response.error.message);\\n        } else {\\n          location.reload();\\n        }\\n      });\\n    }\\n  }]);\\n\\n  return DepositStore;\\n}(), (deposit_store_descriptor = deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.deposit;\\n  }\\n}), deposit_store_descriptor2 = deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"onMountDeposit\\\", [deposit_store_dec], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"onMountDeposit\\\"), deposit_store_class.prototype), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"is_deposit_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"is_deposit_locked\\\"), deposit_store_class.prototype), deposit_store_applyDecoratedDescriptor(deposit_store_class.prototype, \\\"submitFundsProtection\\\", [deposit_store_dec2], Object.getOwnPropertyDescriptor(deposit_store_class.prototype, \\\"submitFundsProtection\\\"), deposit_store_class.prototype)), deposit_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/error-dialog-store.js\\nvar error_dialog_store_dec, error_dialog_store_dec2, error_dialog_store_dec3, error_dialog_store_dec4, error_dialog_store_dec5, error_dialog_store_dec6, error_dialog_store_dec7, error_dialog_store_class, error_dialog_store_descriptor, error_dialog_store_descriptor2, error_dialog_store_descriptor3, error_dialog_store_descriptor4, error_dialog_store_descriptor5;\\n\\nfunction error_dialog_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction error_dialog_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction error_dialog_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction error_dialog_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) error_dialog_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) error_dialog_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction error_dialog_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction error_dialog_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\nvar ErrorDialogStore = (error_dialog_store_dec = external_mobx_.action.bound, error_dialog_store_dec2 = external_mobx_.action.bound, error_dialog_store_dec3 = external_mobx_.action.bound, error_dialog_store_dec4 = external_mobx_.action.bound, error_dialog_store_dec5 = external_mobx_.action.bound, error_dialog_store_dec6 = external_mobx_.action.bound, error_dialog_store_dec7 = external_mobx_.action.bound, (error_dialog_store_class = /*#__PURE__*/function () {\\n  function ErrorDialogStore() {\\n    error_dialog_store_classCallCheck(this, ErrorDialogStore);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"confirm_button_text\\\", error_dialog_store_descriptor, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"error_message\\\", error_dialog_store_descriptor2, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"has_no_close_icon\\\", error_dialog_store_descriptor3, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"should_show\\\", error_dialog_store_descriptor4, this);\\n\\n    error_dialog_store_initializerDefineProperty(this, \\\"should_not_show_title\\\", error_dialog_store_descriptor5, this);\\n  }\\n\\n  error_dialog_store_createClass(ErrorDialogStore, [{\\n    key: \\\"setShouldShow\\\",\\n    value: function setShouldShow(value) {\\n      this.should_show = value;\\n    }\\n  }, {\\n    key: \\\"setErrorMessage\\\",\\n    value: function setErrorMessage(message) {\\n      this.error_message = message;\\n      this.setShouldShow(true);\\n    }\\n  }, {\\n    key: \\\"setConfirmButtonText\\\",\\n    value: function setConfirmButtonText(text) {\\n      this.confirm_button_text = text;\\n    }\\n  }, {\\n    key: \\\"setShouldNotShowTitle\\\",\\n    value: function setShouldNotShowTitle(value) {\\n      this.should_not_show_title = value;\\n    }\\n  }, {\\n    key: \\\"setHasNoCloseIcon\\\",\\n    value: function setHasNoCloseIcon(value) {\\n      this.has_no_close_icon = value;\\n    }\\n  }, {\\n    key: \\\"openReadMoreDialog\\\",\\n    value: function openReadMoreDialog(error_content, confirm_button_text) {\\n      this.setErrorMessage(error_content);\\n      this.setConfirmButtonText(confirm_button_text);\\n      this.setHasNoCloseIcon(true);\\n      this.setShouldNotShowTitle(true);\\n    }\\n  }, {\\n    key: \\\"reset\\\",\\n    value: function reset() {\\n      this.setConfirmButtonText('');\\n      this.setShouldNotShowTitle(false);\\n      this.setHasNoCloseIcon(false);\\n    }\\n  }]);\\n\\n  return ErrorDialogStore;\\n}(), (error_dialog_store_descriptor = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"confirm_button_text\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_dialog_store_descriptor2 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"error_message\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), error_dialog_store_descriptor3 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"has_no_close_icon\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_descriptor4 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"should_show\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_descriptor5 = error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"should_not_show_title\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\", [error_dialog_store_dec], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setShouldShow\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\", [error_dialog_store_dec2], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setErrorMessage\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setConfirmButtonText\\\", [error_dialog_store_dec3], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setConfirmButtonText\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setShouldNotShowTitle\\\", [error_dialog_store_dec4], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setShouldNotShowTitle\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"setHasNoCloseIcon\\\", [error_dialog_store_dec5], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"setHasNoCloseIcon\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"openReadMoreDialog\\\", [error_dialog_store_dec6], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"openReadMoreDialog\\\"), error_dialog_store_class.prototype), error_dialog_store_applyDecoratedDescriptor(error_dialog_store_class.prototype, \\\"reset\\\", [error_dialog_store_dec7], Object.getOwnPropertyDescriptor(error_dialog_store_class.prototype, \\\"reset\\\"), error_dialog_store_class.prototype)), error_dialog_store_class));\\n\\n// EXTERNAL MODULE: ../../../node_modules/prop-types/index.js\\nvar prop_types = __webpack_require__(\\\"../../../node_modules/prop-types/index.js\\\");\\nvar prop_types_default = /*#__PURE__*/__webpack_require__.n(prop_types);\\n// EXTERNAL MODULE: external \\\"@deriv/components\\\"\\nvar components_ = __webpack_require__(\\\"@deriv/components\\\");\\n;// CONCATENATED MODULE: ./Containers/cashier-notifications.jsx\\n\\n\\n\\n\\nvar CashierNotifications = function CashierNotifications(_ref) {\\n  var p2p_notification_count = _ref.p2p_notification_count;\\n  return /*#__PURE__*/external_react_default().createElement((external_react_default()).Fragment, null, /*#__PURE__*/external_react_default().createElement(components_.Icon, {\\n    icon: \\\"IcCashier\\\",\\n    className: \\\"header__icon\\\"\\n  }), !!p2p_notification_count && /*#__PURE__*/external_react_default().createElement(components_.Counter, {\\n    className: \\\"cashier__counter\\\",\\n    count: p2p_notification_count\\n  }));\\n};\\n\\nCashierNotifications.propTypes = {\\n  p2p_notification_count: (prop_types_default()).number\\n};\\n/* harmony default export */ const cashier_notifications = (CashierNotifications);\\n;// CONCATENATED MODULE: ./_common/utility.js\\nfunction utility_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction utility_createClass(Constructor, protoProps, staticProps) { if (protoProps) utility_defineProperties(Constructor.prototype, protoProps); if (staticProps) utility_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction utility_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\nvar template = function template(string, content) {\\n  var to_replace = content;\\n\\n  if (content && !Array.isArray(content)) {\\n    to_replace = [content];\\n  }\\n\\n  return string.replace(/\\\\[_(\\\\d+)]/g, function (s, index) {\\n    return to_replace[+index - 1];\\n  });\\n};\\n/**\\n * Creates a DOM element and adds any attributes to it.\\n *\\n * @param {String} tag_name: the tag to create, e.g. 'div', 'a', etc\\n * @param {Object} attributes: all the attributes to assign, e.g. { id: '...', class: '...', html: '...', ... }\\n * @return the created DOM element\\n */\\n\\n\\nvar createElement = function createElement(tag_name) {\\n  var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\\n  var el = document.createElement(tag_name);\\n  Object.keys(attributes).forEach(function (attr) {\\n    var value = attributes[attr];\\n\\n    if (attr === 'text') {\\n      el.textContent = value;\\n    } else if (attr === 'html') {\\n      el.html(value);\\n    } else {\\n      el.setAttribute(attr, value);\\n    }\\n  });\\n  return el;\\n};\\n\\nvar static_hash;\\n\\nvar getStaticHash = function getStaticHash() {\\n  static_hash = static_hash || (document.querySelector('script[src*=\\\"main\\\"]').getAttribute('src') || '').split('.')[1];\\n  return static_hash;\\n};\\n\\nvar PromiseClass = /*#__PURE__*/(/* unused pure expression or super */ null && (utility_createClass(function PromiseClass() {\\n  var _this = this;\\n\\n  utility_classCallCheck(this, PromiseClass);\\n\\n  this.promise = new Promise(function (resolve, reject) {\\n    _this.reject = reject;\\n    _this.resolve = resolve;\\n  });\\n})));\\n\\nvar copyToClipboard = function copyToClipboard(text) {\\n  var textField = document.createElement('textarea');\\n  textField.innerText = text;\\n  document.body.appendChild(textField);\\n  textField.select();\\n  document.execCommand('copy');\\n  textField.remove();\\n}; // TODO: [duplicate_code] - Move this to shared package\\n// eu countries to support\\n\\n\\nvar eu_countries = (/* unused pure expression or super */ null && (['it', 'de', 'fr', 'lu', 'gr', 'mf', 'es', 'sk', 'lt', 'nl', 'at', 'bg', 'si', 'cy', 'be', 'ro', 'hr', 'pt', 'pl', 'lv', 'ee', 'cz', 'fi', 'hu', 'dk', 'se', 'ie', 'im', 'gb', 'mt'])); // TODO: [duplicate_code] - Move this to shared package\\n// check if client is from EU\\n\\nvar isEuCountry = function isEuCountry(country) {\\n  return eu_countries.includes(country);\\n}; // check if mlt or dxtrade for account text\\n\\n\\nvar getAccountText = function getAccountText(account) {\\n  var account_text = '';\\n\\n  if (account.is_dxtrade || account.is_mt) {\\n    account_text = account.text;\\n  } else {\\n    account_text = getCurrencyDisplayCode(account.text);\\n  }\\n\\n  return account_text;\\n};\\n\\n\\n;// CONCATENATED MODULE: ./Utils/Validator/errors.js\\nfunction errors_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction errors_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction errors_createClass(Constructor, protoProps, staticProps) { if (protoProps) errors_defineProperties(Constructor.prototype, protoProps); if (staticProps) errors_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nvar Errors = /*#__PURE__*/function () {\\n  function Errors() {\\n    errors_classCallCheck(this, Errors);\\n\\n    this.errors = {};\\n  }\\n\\n  errors_createClass(Errors, [{\\n    key: \\\"add\\\",\\n    value: function add(attribute, message) {\\n      if (!this.has(attribute)) {\\n        this.errors[attribute] = [];\\n      }\\n\\n      if (this.errors[attribute].indexOf(message) === -1) {\\n        this.errors[attribute].push(message);\\n      }\\n    }\\n  }, {\\n    key: \\\"all\\\",\\n    value: function all() {\\n      return this.errors;\\n    }\\n  }, {\\n    key: \\\"first\\\",\\n    value: function first(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute][0];\\n      }\\n\\n      return null;\\n    }\\n  }, {\\n    key: \\\"get\\\",\\n    value: function get(attribute) {\\n      if (this.has(attribute)) {\\n        return this.errors[attribute];\\n      }\\n\\n      return [];\\n    }\\n  }, {\\n    key: \\\"has\\\",\\n    value: function has(attribute) {\\n      return Object.prototype.hasOwnProperty.call(this.errors, attribute);\\n    }\\n  }]);\\n\\n  return Errors;\\n}();\\n\\n/* harmony default export */ const errors = (Errors);\\n;// CONCATENATED MODULE: ./Utils/Validator/validator.js\\nfunction validator_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction validator_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction validator_createClass(Constructor, protoProps, staticProps) { if (protoProps) validator_defineProperties(Constructor.prototype, protoProps); if (staticProps) validator_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\n\\n\\n\\n\\nvar Validator = /*#__PURE__*/function () {\\n  function Validator(input, rules) {\\n    var store = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\\n\\n    validator_classCallCheck(this, Validator);\\n\\n    this.input = input;\\n    this.rules = rules;\\n    this.store = store;\\n    this.errors = new errors();\\n    this.error_count = 0;\\n  }\\n  /**\\n   * Add failure and error message for given rule\\n   *\\n   * @param {string} attribute\\n   * @param {object} rule\\n   */\\n\\n\\n  validator_createClass(Validator, [{\\n    key: \\\"addFailure\\\",\\n    value: function addFailure(attribute, rule, error_message) {\\n      var message = error_message || rule.options.message || (0,shared_.getPreBuildDVRs)()[rule.name].message();\\n\\n      if (rule.name === 'length') {\\n        message = template(message, [rule.options.min === rule.options.max ? rule.options.min : \\\"\\\".concat(rule.options.min, \\\"-\\\").concat(rule.options.max)]);\\n      } else if (rule.name === 'min') {\\n        message = template(message, [rule.options.min]);\\n      } else if (rule.name === 'not_equal') {\\n        message = template(message, [rule.options.name1, rule.options.name2]);\\n      }\\n\\n      this.errors.add(attribute, message);\\n      this.error_count++;\\n    }\\n    /**\\n     * Runs validator\\n     *\\n     * @return {boolean} Whether it passes; true = passes, false = fails\\n     */\\n\\n  }, {\\n    key: \\\"check\\\",\\n    value: function check() {\\n      var _this = this;\\n\\n      Object.keys(this.input).forEach(function (attribute) {\\n        if (!Object.prototype.hasOwnProperty.call(_this.rules, attribute)) {\\n          return;\\n        }\\n\\n        _this.rules[attribute].forEach(function (rule) {\\n          var ruleObject = Validator.getRuleObject(rule);\\n\\n          if (!ruleObject.validator && typeof ruleObject.validator !== 'function') {\\n            return;\\n          }\\n\\n          if (ruleObject.options.condition && !ruleObject.options.condition(_this.store)) {\\n            return;\\n          }\\n\\n          if (_this.input[attribute] === '' && ruleObject.name !== 'req') {\\n            return;\\n          }\\n\\n          var is_valid, error_message;\\n\\n          if (ruleObject.name === 'number') {\\n            var _ruleObject$validator = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input),\\n                is_ok = _ruleObject$validator.is_ok,\\n                message = _ruleObject$validator.message;\\n\\n            is_valid = is_ok;\\n            error_message = message;\\n          } else {\\n            is_valid = ruleObject.validator(_this.input[attribute], ruleObject.options, _this.store, _this.input);\\n          }\\n\\n          if (!is_valid) {\\n            _this.addFailure(attribute, ruleObject, error_message);\\n          }\\n        });\\n      });\\n      return !this.error_count;\\n    }\\n    /**\\n     * Determine if validation passes\\n     *\\n     * @return {boolean}\\n     */\\n\\n  }, {\\n    key: \\\"isPassed\\\",\\n    value: function isPassed() {\\n      return this.check();\\n    }\\n    /**\\n     * Converts the rule array to an object\\n     *\\n     * @param {array} rule\\n     * @return {object}\\n     */\\n\\n  }], [{\\n    key: \\\"getRuleObject\\\",\\n    value: function getRuleObject(rule) {\\n      var is_rule_string = typeof rule === 'string';\\n      var rule_object = {\\n        name: is_rule_string ? rule : rule[0],\\n        options: is_rule_string ? {} : rule[1] || {}\\n      };\\n      rule_object.validator = rule_object.name === 'custom' ? rule[1].func : (0,shared_.getPreBuildDVRs)()[rule_object.name].func;\\n      return rule_object;\\n    }\\n  }]);\\n\\n  return Validator;\\n}();\\n\\n/* harmony default export */ const Validator_validator = (Validator);\\n;// CONCATENATED MODULE: ./Utils/Validator/index.js\\n\\n\\n;// CONCATENATED MODULE: ./Stores/base-store.js\\nvar base_store_dec, base_store_dec2, base_store_dec3, base_store_dec4, base_store_dec5, base_store_dec6, base_store_dec7, base_store_dec8, base_store_dec9, base_store_dec10, base_store_dec11, base_store_dec12, base_store_dec13, base_store_dec14, base_store_dec15, base_store_dec16, base_store_class, base_store_descriptor, base_store_descriptor2, base_store_descriptor3, _class2, _temp;\\n\\nfunction base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction base_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { base_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction base_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction base_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? base_store_ownKeys(Object(source), !0).forEach(function (key) { base_store_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : base_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction base_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction base_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction base_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction base_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction base_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) base_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) base_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction base_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction base_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n/**\\n * BaseStore class is the base class for all defined stores in the application. It handles some stuff such as:\\n *  1. Creating snapshot object from the store.\\n *  2. Saving the store's snapshot in local/session storage and keeping them in sync.\\n */\\n\\nvar BaseStore = (base_store_dec = external_mobx_.action.bound, base_store_dec2 = external_mobx_.action.bound, base_store_dec3 = external_mobx_.action.bound, base_store_dec4 = external_mobx_.action.bound, base_store_dec5 = external_mobx_.action.bound, base_store_dec6 = external_mobx_.action.bound, base_store_dec7 = external_mobx_.action.bound, base_store_dec8 = external_mobx_.action.bound, base_store_dec9 = external_mobx_.action.bound, base_store_dec10 = external_mobx_.action.bound, base_store_dec11 = external_mobx_.action.bound, base_store_dec12 = external_mobx_.action.bound, base_store_dec13 = external_mobx_.action.bound, base_store_dec14 = external_mobx_.action.bound, base_store_dec15 = external_mobx_.action.bound, base_store_dec16 = external_mobx_.action.bound, (base_store_class = (_temp = _class2 = /*#__PURE__*/function () {\\n  /**\\n   * An enum object to define LOCAL_STORAGE and SESSION_STORAGE\\n   */\\n\\n  /**\\n   * Constructor of the base class that gets properties' name of child which should be saved in storages\\n   *\\n   * @param {Object} options - An object that contains the following properties:\\n   *     @property {Object}   root_store - An object that contains the root store of the app.\\n   *     @property {String[]} local_storage_properties - A list of properties' names that should be kept in localStorage.\\n   *     @property {String[]} session_storage_properties - A list of properties' names that should be kept in sessionStorage.\\n   *     @property {Object}   validation_rules - An object that contains the validation rules for each property of the store.\\n   *     @property {String}   store_name - Explicit store name for browser application storage (to bypass minification)\\n   */\\n  function BaseStore() {\\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n\\n    base_store_classCallCheck(this, BaseStore);\\n\\n    base_store_initializerDefineProperty(this, \\\"validation_errors\\\", base_store_descriptor, this);\\n\\n    base_store_initializerDefineProperty(this, \\\"validation_rules\\\", base_store_descriptor2, this);\\n\\n    this.preSwitchAccountDisposer = null;\\n    this.pre_switch_account_listener = null;\\n    this.switchAccountDisposer = null;\\n    this.switch_account_listener = null;\\n    this.logoutDisposer = null;\\n    this.logout_listener = null;\\n    this.clientInitDisposer = null;\\n    this.client_init_listener = null;\\n    this.networkStatusChangeDisposer = null;\\n    this.network_status_change_listener = null;\\n    this.themeChangeDisposer = null;\\n    this.theme_change_listener = null;\\n    this.realAccountSignupEndedDisposer = null;\\n    this.real_account_signup_ended_listener = null;\\n\\n    base_store_initializerDefineProperty(this, \\\"partial_fetch_time\\\", base_store_descriptor3, this);\\n\\n    var root_store = options.root_store,\\n        local_storage_properties = options.local_storage_properties,\\n        session_storage_properties = options.session_storage_properties,\\n        validation_rules = options.validation_rules,\\n        store_name = options.store_name;\\n    Object.defineProperty(this, 'root_store', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'local_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    Object.defineProperty(this, 'session_storage_properties', {\\n      enumerable: false,\\n      writable: true\\n    });\\n    var has_local_or_session_storage = local_storage_properties && local_storage_properties.length || session_storage_properties && session_storage_properties.length;\\n\\n    if (has_local_or_session_storage) {\\n      if (!store_name) {\\n        throw new Error('store_name is required for local/session storage');\\n      }\\n\\n      Object.defineProperty(this, 'store_name', {\\n        value: store_name,\\n        enumerable: false,\\n        writable: false\\n      });\\n    }\\n\\n    this.root_store = root_store;\\n    this.local_storage_properties = local_storage_properties || [];\\n    this.session_storage_properties = session_storage_properties || [];\\n    this.setValidationRules(validation_rules);\\n    this.setupReactionForLocalStorage();\\n    this.setupReactionForSessionStorage();\\n    this.retrieveFromStorage();\\n  }\\n  /**\\n   * Returns an snapshot of the current store\\n   *\\n   * @param {String[]} properties - A list of properties' names that should be in the snapshot.\\n   *\\n   * @return {Object} Returns a cloned object of the store.\\n   */\\n\\n\\n  base_store_createClass(BaseStore, [{\\n    key: \\\"getSnapshot\\\",\\n    value: function getSnapshot(properties) {\\n      var snapshot = (0,external_mobx_.toJS)(this);\\n\\n      if (!(0,shared_.isEmptyObject)(this.root_store)) {\\n        snapshot.root_store = this.root_store;\\n      }\\n\\n      if (properties && properties.length) {\\n        snapshot = properties.reduce(function (result, p) {\\n          return Object.assign(result, base_store_defineProperty({}, p, snapshot[p]));\\n        }, {});\\n      }\\n\\n      return snapshot;\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `local_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForLocalStorage\\\",\\n    value: function setupReactionForLocalStorage() {\\n      var _this = this;\\n\\n      if (this.local_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this.local_storage_properties.map(function (i) {\\n            return _this[i];\\n          });\\n        }, function () {\\n          return _this.saveToStorage(_this.local_storage_properties, BaseStore.STORAGES.LOCAL_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Sets up a reaction on properties which are mentioned in `session_storage_properties`\\n     *  and invokes `saveToStorage` when there are any changes on them.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setupReactionForSessionStorage\\\",\\n    value: function setupReactionForSessionStorage() {\\n      var _this2 = this;\\n\\n      if (this.session_storage_properties.length) {\\n        (0,external_mobx_.reaction)(function () {\\n          return _this2.session_storage_properties.map(function (i) {\\n            return _this2[i];\\n          });\\n        }, function () {\\n          return _this2.saveToStorage(_this2.session_storage_properties, BaseStore.STORAGES.SESSION_STORAGE);\\n        });\\n      }\\n    }\\n    /**\\n     * Removes properties that are not passed from the snapshot of the store and saves it to the passed storage\\n     *\\n     * @param {String[]} properties - A list of the store's properties' names which should be saved in the storage.\\n     * @param {Symbol}   storage    - A symbol object that defines the storage which the snapshot should be stored in it.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"saveToStorage\\\",\\n    value: function saveToStorage(properties, storage) {\\n      var snapshot = JSON.stringify(this.getSnapshot(properties), function (key, value) {\\n        if (value !== null) return value;\\n        return undefined;\\n      });\\n\\n      if (storage === BaseStore.STORAGES.LOCAL_STORAGE) {\\n        localStorage.setItem(this.store_name, snapshot);\\n      } else if (storage === BaseStore.STORAGES.SESSION_STORAGE) {\\n        sessionStorage.setItem(this.store_name, snapshot);\\n      }\\n    }\\n    /**\\n     * Retrieves saved snapshot of the store and assigns to the current instance.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"retrieveFromStorage\\\",\\n    value: function retrieveFromStorage() {\\n      var _this3 = this;\\n\\n      var local_storage_snapshot = JSON.parse(localStorage.getItem(this.store_name, {}));\\n      var session_storage_snapshot = JSON.parse(sessionStorage.getItem(this.store_name, {}));\\n\\n      var snapshot = base_store_objectSpread(base_store_objectSpread({}, local_storage_snapshot), session_storage_snapshot);\\n\\n      Object.keys(snapshot).forEach(function (k) {\\n        return _this3[k] = snapshot[k];\\n      });\\n    }\\n    /**\\n     * Sets validation error messages for an observable property of the store\\n     *\\n     * @param {String} propertyName - The observable property's name\\n     * @param [{String}] messages - An array of strings that contains validation error messages for the particular property.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationErrorMessages\\\",\\n    value: function setValidationErrorMessages(propertyName, messages) {\\n      var _this4 = this;\\n\\n      var is_different = function is_different() {\\n        return !!_this4.validation_errors[propertyName].filter(function (x) {\\n          return !messages.includes(x);\\n        }).concat(messages.filter(function (x) {\\n          return !_this4.validation_errors[propertyName].includes(x);\\n        })).length;\\n      };\\n\\n      if (!this.validation_errors[propertyName] || is_different()) {\\n        this.validation_errors[propertyName] = messages;\\n      }\\n    }\\n    /**\\n     * Sets validation rules\\n     *\\n     * @param {object} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"setValidationRules\\\",\\n    value: function setValidationRules() {\\n      var _this5 = this;\\n\\n      var rules = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\\n      Object.keys(rules).forEach(function (key) {\\n        _this5.addRule(key, rules[key]);\\n      });\\n    }\\n    /**\\n     * Adds rules to the particular property\\n     *\\n     * @param {String} property\\n     * @param {String} rules\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"addRule\\\",\\n    value: function addRule(property, rules) {\\n      var _this6 = this;\\n\\n      this.validation_rules[property] = rules;\\n      (0,external_mobx_.intercept)(this, property, function (change) {\\n        _this6.validateProperty(property, change.newValue);\\n\\n        return change;\\n      });\\n    }\\n    /**\\n     * Validates a particular property of the store\\n     *\\n     * @param {String} property - The name of the property in the store\\n     * @param {object} value    - The value of the property, it can be undefined.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateProperty\\\",\\n    value: function validateProperty(property, value) {\\n      var _this7 = this;\\n\\n      var trigger = this.validation_rules[property].trigger;\\n\\n      var inputs = base_store_defineProperty({}, property, value !== undefined ? value : this[property]);\\n\\n      var validation_rules = base_store_defineProperty({}, property, this.validation_rules[property].rules || []);\\n\\n      if (!!trigger && Object.hasOwnProperty.call(this, trigger)) {\\n        inputs[trigger] = this[trigger];\\n        validation_rules[trigger] = this.validation_rules[trigger].rules || [];\\n      }\\n\\n      var validator = new Validator_validator(inputs, validation_rules, this);\\n      validator.isPassed();\\n      Object.keys(inputs).forEach(function (key) {\\n        _this7.setValidationErrorMessages(key, validator.errors.get(key));\\n      });\\n    }\\n    /**\\n     * Validates all properties which validation rule has been set for.\\n     *\\n     */\\n\\n  }, {\\n    key: \\\"validateAllProperties\\\",\\n    value: function validateAllProperties() {\\n      var _this8 = this;\\n\\n      var validation_rules = Object.keys(this.validation_rules);\\n      var validation_errors = Object.keys(this.validation_errors);\\n      validation_rules.forEach(function (p) {\\n        _this8.validateProperty(p, _this8[p]);\\n      }); // Remove keys that are present in error, but not in rules:\\n\\n      validation_errors.forEach(function (error) {\\n        if (!validation_rules.includes(error)) {\\n          delete _this8.validation_errors[error];\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onSwitchAccount\\\",\\n    value: function onSwitchAccount(listener) {\\n      var _this9 = this;\\n\\n      if (listener) {\\n        this.switch_account_listener = listener;\\n        this.switchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this9.root_store.client.switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this9.switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this9.root_store.client.switchEndSignal();\\n\\n                _this9.onSwitchAccount(_this9.switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Switching account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onPreSwitchAccount\\\",\\n    value: function onPreSwitchAccount(listener) {\\n      var _this10 = this;\\n\\n      if (listener) {\\n        this.pre_switch_account_listener = listener;\\n        this.preSwitchAccountDisposer = (0,external_mobx_.when)(function () {\\n          return _this10.root_store.client.pre_switch_broadcast;\\n        }, function () {\\n          try {\\n            var result = _this10.pre_switch_account_listener();\\n\\n            if (result && result.then && typeof result.then === 'function') {\\n              result.then(function () {\\n                _this10.root_store.client.setPreSwitchAccount(false);\\n\\n                _this10.onPreSwitchAccount(_this10.pre_switch_account_listener);\\n              });\\n            } else {\\n              throw new Error('Pre-switch account listeners are required to return a promise.');\\n            }\\n          } catch (error) {\\n            // there is no listener currently active. so we can just ignore the error raised from treating\\n            // a null object as a function. Although, in development mode, we throw a console error.\\n            if (!(0,shared_.isProduction)()) {\\n              console.error(error); // eslint-disable-line\\n            }\\n          }\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"onLogout\\\",\\n    value: function onLogout(listener) {\\n      var _this11 = this;\\n\\n      this.logoutDisposer = (0,external_mobx_.when)(function () {\\n        return _this11.root_store.client.has_logged_out;\\n      }, /*#__PURE__*/base_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.prev = 0;\\n                result = _this11.logout_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this11.root_store.client.setLogout(false);\\n\\n                  _this11.onLogout(_this11.logout_listener);\\n                });\\n                _context.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Logout listeners are required to return a promise.');\\n\\n              case 7:\\n                _context.next = 12;\\n                break;\\n\\n              case 9:\\n                _context.prev = 9;\\n                _context.t0 = _context[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, null, [[0, 9]]);\\n      })));\\n      this.logout_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onClientInit\\\",\\n    value: function onClientInit(listener) {\\n      var _this12 = this;\\n\\n      this.clientInitDisposer = (0,external_mobx_.when)(function () {\\n        return _this12.root_store.client.initialized_broadcast;\\n      }, /*#__PURE__*/base_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var result;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.prev = 0;\\n                result = _this12.client_init_listener();\\n\\n                if (!(result && result.then && typeof result.then === 'function')) {\\n                  _context2.next = 6;\\n                  break;\\n                }\\n\\n                result.then(function () {\\n                  _this12.root_store.client.setInitialized(false);\\n\\n                  _this12.onClientInit(_this12.client_init_listener);\\n                });\\n                _context2.next = 7;\\n                break;\\n\\n              case 6:\\n                throw new Error('Client init listeners are required to return a promise.');\\n\\n              case 7:\\n                _context2.next = 12;\\n                break;\\n\\n              case 9:\\n                _context2.prev = 9;\\n                _context2.t0 = _context2[\\\"catch\\\"](0);\\n\\n                // there is no listener currently active. so we can just ignore the error raised from treating\\n                // a null object as a function. Although, in development mode, we throw a console error.\\n                if (!(0,shared_.isProduction)()) {\\n                  console.error(_context2.t0); // eslint-disable-line\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, null, [[0, 9]]);\\n      })));\\n      this.client_init_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onNetworkStatusChange\\\",\\n    value: function onNetworkStatusChange(listener) {\\n      var _this13 = this;\\n\\n      this.networkStatusChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this13.root_store.common.is_network_online;\\n      }, function (is_online) {\\n        try {\\n          _this13.network_status_change_listener(is_online);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.network_status_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onThemeChange\\\",\\n    value: function onThemeChange(listener) {\\n      var _this14 = this;\\n\\n      this.themeChangeDisposer = (0,external_mobx_.reaction)(function () {\\n        return _this14.root_store.ui.is_dark_mode_on;\\n      }, function (is_dark_mode_on) {\\n        try {\\n          _this14.theme_change_listener(is_dark_mode_on);\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.theme_change_listener = listener;\\n    }\\n  }, {\\n    key: \\\"onRealAccountSignupEnd\\\",\\n    value: function onRealAccountSignupEnd(listener) {\\n      var _this15 = this;\\n\\n      this.realAccountSignupEndedDisposer = (0,external_mobx_.when)(function () {\\n        return _this15.root_store.ui.has_real_account_signup_ended;\\n      }, function () {\\n        try {\\n          var result = _this15.real_account_signup_ended_listener();\\n\\n          if (result && result.then && typeof result.then === 'function') {\\n            result.then(function () {\\n              _this15.root_store.ui.setRealAccountSignupEnd(false);\\n\\n              _this15.onRealAccountSignupEnd(_this15.real_account_signup_ended_listener);\\n            });\\n          } else {\\n            throw new Error('Real account signup listeners are required to return a promise.');\\n          }\\n        } catch (error) {\\n          // there is no listener currently active. so we can just ignore the error raised from treating\\n          // a null object as a function. Although, in development mode, we throw a console error.\\n          if (!(0,shared_.isProduction)()) {\\n            console.error(error); // eslint-disable-line\\n          }\\n        }\\n      });\\n      this.real_account_signup_ended_listener = listener;\\n    }\\n  }, {\\n    key: \\\"disposePreSwitchAccount\\\",\\n    value: function disposePreSwitchAccount() {\\n      if (typeof this.preSwitchAccountDisposer === 'function') {\\n        this.preSwitchAccountDisposer();\\n      }\\n\\n      this.pre_switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeSwitchAccount\\\",\\n    value: function disposeSwitchAccount() {\\n      if (typeof this.switchAccountDisposer === 'function') {\\n        this.switchAccountDisposer();\\n      }\\n\\n      this.switch_account_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeLogout\\\",\\n    value: function disposeLogout() {\\n      if (typeof this.logoutDisposer === 'function') {\\n        this.logoutDisposer();\\n      }\\n\\n      this.logout_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeClientInit\\\",\\n    value: function disposeClientInit() {\\n      if (typeof this.clientInitDisposer === 'function') {\\n        this.clientInitDisposer();\\n      }\\n\\n      this.client_init_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeNetworkStatusChange\\\",\\n    value: function disposeNetworkStatusChange() {\\n      if (typeof this.networkStatusChangeDisposer === 'function') {\\n        this.networkStatusChangeDisposer();\\n      }\\n\\n      this.network_status_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeThemeChange\\\",\\n    value: function disposeThemeChange() {\\n      if (typeof this.themeChangeDisposer === 'function') {\\n        this.themeChangeDisposer();\\n      }\\n\\n      this.theme_change_listener = null;\\n    }\\n  }, {\\n    key: \\\"disposeRealAccountSignupEnd\\\",\\n    value: function disposeRealAccountSignupEnd() {\\n      if (typeof this.realAccountSignupEndedDisposer === 'function') {\\n        this.realAccountSignupEndedDisposer();\\n      }\\n\\n      this.real_account_signup_ended_listener = null;\\n    }\\n  }, {\\n    key: \\\"onUnmount\\\",\\n    value: function onUnmount() {\\n      this.disposePreSwitchAccount();\\n      this.disposeSwitchAccount();\\n      this.disposeLogout();\\n      this.disposeClientInit();\\n      this.disposeNetworkStatusChange();\\n      this.disposeThemeChange();\\n      this.disposeRealAccountSignupEnd();\\n    }\\n  }, {\\n    key: \\\"assertHasValidCache\\\",\\n    value: function assertHasValidCache(loginid) {\\n      // account was changed when this was unmounted.\\n      if (this.root_store.client.loginid !== loginid) {\\n        for (var _len = arguments.length, reactions = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\\n          reactions[_key - 1] = arguments[_key];\\n        }\\n\\n        reactions.forEach(function (act) {\\n          return act();\\n        });\\n        this.partial_fetch_time = false;\\n      }\\n    }\\n  }]);\\n\\n  return BaseStore;\\n}(), _class2.STORAGES = Object.freeze({\\n  LOCAL_STORAGE: Symbol('LOCAL_STORAGE'),\\n  SESSION_STORAGE: Symbol('SESSION_STORAGE')\\n}), _temp), (base_store_descriptor = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validation_errors\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), base_store_descriptor2 = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validation_rules\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), base_store_descriptor3 = base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"partial_fetch_time\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"retrieveFromStorage\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"retrieveFromStorage\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"setValidationErrorMessages\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"setValidationErrorMessages\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"setValidationRules\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"setValidationRules\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"addRule\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"addRule\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validateProperty\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"validateProperty\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"validateAllProperties\\\", [external_mobx_.action], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"validateAllProperties\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onSwitchAccount\\\", [base_store_dec], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onPreSwitchAccount\\\", [base_store_dec2], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onPreSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onLogout\\\", [base_store_dec3], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onLogout\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onClientInit\\\", [base_store_dec4], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onClientInit\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onNetworkStatusChange\\\", [base_store_dec5], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onNetworkStatusChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onThemeChange\\\", [base_store_dec6], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onThemeChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onRealAccountSignupEnd\\\", [base_store_dec7], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onRealAccountSignupEnd\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposePreSwitchAccount\\\", [base_store_dec8], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposePreSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeSwitchAccount\\\", [base_store_dec9], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeSwitchAccount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeLogout\\\", [base_store_dec10], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeLogout\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeClientInit\\\", [base_store_dec11], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeClientInit\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeNetworkStatusChange\\\", [base_store_dec12], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeNetworkStatusChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeThemeChange\\\", [base_store_dec13], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeThemeChange\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"disposeRealAccountSignupEnd\\\", [base_store_dec14], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"disposeRealAccountSignupEnd\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"onUnmount\\\", [base_store_dec15], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"onUnmount\\\"), base_store_class.prototype), base_store_applyDecoratedDescriptor(base_store_class.prototype, \\\"assertHasValidCache\\\", [base_store_dec16], Object.getOwnPropertyDescriptor(base_store_class.prototype, \\\"assertHasValidCache\\\"), base_store_class.prototype)), base_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/general-store.js\\nfunction _typeof(obj) { \\\"@babel/helpers - typeof\\\"; return _typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \\\"function\\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }, _typeof(obj); }\\n\\nvar general_store_dec, general_store_dec2, general_store_dec3, general_store_dec4, general_store_dec5, general_store_dec6, general_store_dec7, general_store_dec8, general_store_dec9, general_store_dec10, general_store_dec11, general_store_dec12, general_store_dec13, general_store_dec14, general_store_dec15, general_store_dec16, general_store_dec17, general_store_dec18, general_store_dec19, general_store_dec20, general_store_dec21, general_store_dec22, general_store_dec23, general_store_dec24, _dec25, general_store_class, general_store_descriptor, general_store_descriptor2, general_store_descriptor3, general_store_descriptor4, general_store_descriptor5, general_store_descriptor6, general_store_descriptor7, general_store_descriptor8, general_store_descriptor9, general_store_descriptor10, general_store_descriptor11, general_store_descriptor12, general_store_descriptor13, general_store_descriptor14, general_store_descriptor15;\\n\\nfunction general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction general_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { general_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction general_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction general_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction general_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction general_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) general_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) general_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \\\"prototype\\\", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }\\n\\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\\n\\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\\n\\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } else if (call !== void 0) { throw new TypeError(\\\"Derived constructors may only return object or undefined\\\"); } return _assertThisInitialized(self); }\\n\\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\\n\\nfunction general_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction general_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\nvar GeneralStore = (general_store_dec = external_mobx_.action.bound, general_store_dec2 = external_mobx_.action.bound, general_store_dec3 = external_mobx_.action.bound, general_store_dec4 = external_mobx_.action.bound, general_store_dec5 = external_mobx_.action.bound, general_store_dec6 = external_mobx_.action.bound, general_store_dec7 = external_mobx_.action.bound, general_store_dec8 = external_mobx_.action.bound, general_store_dec9 = external_mobx_.action.bound, general_store_dec10 = external_mobx_.action.bound, general_store_dec11 = external_mobx_.action.bound, general_store_dec12 = external_mobx_.action.bound, general_store_dec13 = external_mobx_.action.bound, general_store_dec14 = external_mobx_.action.bound, general_store_dec15 = external_mobx_.action.bound, general_store_dec16 = external_mobx_.action.bound, general_store_dec17 = external_mobx_.action.bound, general_store_dec18 = external_mobx_.action.bound, general_store_dec19 = external_mobx_.action.bound, general_store_dec20 = external_mobx_.action.bound, general_store_dec21 = external_mobx_.action.bound, general_store_dec22 = external_mobx_.action.bound, general_store_dec23 = external_mobx_.action.bound, general_store_dec24 = external_mobx_.action.bound, _dec25 = external_mobx_.action.bound, (general_store_class = /*#__PURE__*/function (_BaseStore) {\\n  _inherits(GeneralStore, _BaseStore);\\n\\n  var _super = _createSuper(GeneralStore);\\n\\n  function GeneralStore(_ref) {\\n    var _this;\\n\\n    var root_store = _ref.root_store,\\n        WS = _ref.WS;\\n\\n    general_store_classCallCheck(this, GeneralStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_loading\\\", general_store_descriptor, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_p2p_visible\\\", general_store_descriptor2, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"p2p_notification_count\\\", general_store_descriptor3, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"cashier_route_tab_index\\\", general_store_descriptor4, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_deposit\\\", general_store_descriptor5, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_show_all_available_currencies\\\", general_store_descriptor6, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"is_cashier_default\\\", general_store_descriptor7, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"deposit_target\\\", general_store_descriptor8, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_set_currency_modal_title_change\\\", general_store_descriptor9, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"p2p_advertiser_error\\\", general_store_descriptor10, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"has_set_currency\\\", general_store_descriptor11, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"should_percentage_reset\\\", general_store_descriptor12, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"percentage\\\", general_store_descriptor13, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"show_p2p_in_cashier_default\\\", general_store_descriptor14, _assertThisInitialized(_this));\\n\\n    general_store_initializerDefineProperty(_this, \\\"onRemount\\\", general_store_descriptor15, _assertThisInitialized(_this));\\n\\n    _this.active_container = constants.containers.deposit;\\n    _this.is_populating_values = false;\\n    _this.WS = WS;\\n    _this.root_store = root_store;\\n    (0,external_mobx_.when)(function () {\\n      return _this.root_store.client.is_logged_in;\\n    }, function () {\\n      _this.setHasSetCurrency();\\n\\n      _this.attachCashierToMenu();\\n    });\\n\\n    if (!_this.has_set_currency) {\\n      _this.changeSetCurrencyModalTitle();\\n    }\\n\\n    (0,external_mobx_.reaction)(function () {\\n      return [_this.root_store.client.switched, _this.root_store.client.is_logged_in, _this.root_store.client.currency];\\n    }, function () {\\n      _this.init();\\n    });\\n    return _this;\\n  }\\n\\n  general_store_createClass(GeneralStore, [{\\n    key: \\\"setOnRemount\\\",\\n    value: function setOnRemount(func) {\\n      this.onRemount = func;\\n    }\\n  }, {\\n    key: \\\"is_crypto\\\",\\n    get: function get() {\\n      var currency = this.root_store.client.currency;\\n      return !!currency && (0,shared_.isCryptocurrency)(currency);\\n    }\\n  }, {\\n    key: \\\"is_p2p_enabled\\\",\\n    get: function get() {\\n      return this.is_p2p_visible && !this.root_store.client.is_eu;\\n    }\\n  }, {\\n    key: \\\"showP2pInCashierDefault\\\",\\n    value: function showP2pInCashierDefault() {\\n      var _this$root_store$clie = this.root_store.client,\\n          account_list = _this$root_store$clie.account_list,\\n          is_virtual = _this$root_store$clie.is_virtual;\\n      var is_p2p_restricted = this.p2p_advertiser_error === 'RestrictedCountry';\\n      var has_usd_currency = account_list.some(function (account) {\\n        return account.title === 'USD';\\n      });\\n      var has_user_fiat_currency = account_list.some(function (account) {\\n        return !(0,shared_.isCryptocurrency)(account.title) && account.title !== 'Real';\\n      });\\n\\n      if (is_p2p_restricted || is_virtual || has_user_fiat_currency && !has_usd_currency) {\\n        this.show_p2p_in_cashier_default = false;\\n      } else {\\n        this.show_p2p_in_cashier_default = true;\\n      }\\n    }\\n  }, {\\n    key: \\\"attachCashierToMenu\\\",\\n    value: function attachCashierToMenu() {\\n      var _this$root_store = this.root_store,\\n          menu = _this$root_store.menu,\\n          ui = _this$root_store.ui;\\n\\n      if (!this.has_set_currency) {\\n        this.setHasSetCurrency();\\n      }\\n\\n      menu.attach({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency && ui.toggleSetCurrencyModal,\\n        login_only: true\\n      });\\n    }\\n  }, {\\n    key: \\\"replaceCashierMenuOnclick\\\",\\n    value: function replaceCashierMenuOnclick() {\\n      var _this$root_store2 = this.root_store,\\n          menu = _this$root_store2.menu,\\n          ui = _this$root_store2.ui;\\n      this.setHasSetCurrency();\\n      menu.update({\\n        id: 'dt_cashier_tab',\\n        icon: /*#__PURE__*/external_react_default().createElement(cashier_notifications, {\\n          p2p_notification_count: this.p2p_notification_count\\n        }),\\n        text: function text() {\\n          return (0,translations_.localize)('Cashier');\\n        },\\n        link_to: this.has_set_currency && shared_.routes.cashier,\\n        onClick: !this.has_set_currency ? ui.toggleSetCurrencyModal : false,\\n        login_only: true\\n      }, 1);\\n    }\\n  }, {\\n    key: \\\"setHasSetCurrency\\\",\\n    value: function setHasSetCurrency() {\\n      var _this$root_store$clie2 = this.root_store.client,\\n          account_list = _this$root_store$clie2.account_list,\\n          has_active_real_account = _this$root_store$clie2.has_active_real_account;\\n      this.has_set_currency = account_list.filter(function (account) {\\n        return !account.is_virtual;\\n      }).some(function (account) {\\n        return account.title !== 'Real';\\n      }) || !has_active_real_account;\\n    }\\n  }, {\\n    key: \\\"changeSetCurrencyModalTitle\\\",\\n    value: function changeSetCurrencyModalTitle() {\\n      this.should_set_currency_modal_title_change = true;\\n    }\\n  }, {\\n    key: \\\"onMountCashierDefault\\\",\\n    value: function () {\\n      var _onMountCashierDefault = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _payment_agent$all_pa, _payment_agent$all_pa2;\\n\\n        var _this$root_store$modu, account_prompt_dialog, payment_agent, agent_list;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier, account_prompt_dialog = _this$root_store$modu.account_prompt_dialog, payment_agent = _this$root_store$modu.payment_agent;\\n\\n                if (!this.has_set_currency) {\\n                  this.setHasSetCurrency();\\n                }\\n\\n                this.setIsCashierDefault(true);\\n                account_prompt_dialog.resetIsConfirmed();\\n                this.setLoading(true);\\n\\n                if ((_payment_agent$all_pa = payment_agent.all_payment_agent_list) !== null && _payment_agent$all_pa !== void 0 && (_payment_agent$all_pa2 = _payment_agent$all_pa.paymentagent_list) !== null && _payment_agent$all_pa2 !== void 0 && _payment_agent$all_pa2.list) {\\n                  _context.next = 10;\\n                  break;\\n                }\\n\\n                _context.next = 8;\\n                return payment_agent.getAllPaymentAgentList();\\n\\n              case 8:\\n                agent_list = _context.sent;\\n                payment_agent.setAllPaymentAgentList(agent_list);\\n\\n              case 10:\\n                this.setLoading(false);\\n\\n              case 11:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMountCashierDefault() {\\n        return _onMountCashierDefault.apply(this, arguments);\\n      }\\n\\n      return onMountCashierDefault;\\n    }()\\n  }, {\\n    key: \\\"calculatePercentage\\\",\\n    value: function calculatePercentage() {\\n      var amount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n      var _this$root_store3 = this.root_store,\\n          client = _this$root_store3.client,\\n          modules = _this$root_store3.modules;\\n      var account_transfer = modules.cashier.account_transfer;\\n\\n      if (this.active_container === account_transfer.container) {\\n        this.percentage = +(amount / +account_transfer.selected_from.balance * 100).toFixed(0);\\n      } else {\\n        this.percentage = +(amount / +client.balance * 100).toFixed(0);\\n      }\\n\\n      if (!isFinite(this.percentage)) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"percentageSelectorSelectionStatus\\\",\\n    value: function percentageSelectorSelectionStatus(should_percentage_reset) {\\n      this.should_percentage_reset = should_percentage_reset;\\n\\n      if (should_percentage_reset) {\\n        this.percentage = 0;\\n      }\\n    }\\n  }, {\\n    key: \\\"setIsDeposit\\\",\\n    value: function setIsDeposit(is_deposit) {\\n      this.is_deposit = is_deposit;\\n    }\\n  }, {\\n    key: \\\"setShouldShowAllAvailableCurrencies\\\",\\n    value: function setShouldShowAllAvailableCurrencies(value) {\\n      this.should_show_all_available_currencies = value;\\n    }\\n  }, {\\n    key: \\\"setIsCashierDefault\\\",\\n    value: function setIsCashierDefault(is_cashier_default) {\\n      this.is_cashier_default = is_cashier_default;\\n    }\\n  }, {\\n    key: \\\"setDepositTarget\\\",\\n    value: function setDepositTarget(target) {\\n      this.deposit_target = target;\\n    }\\n  }, {\\n    key: \\\"continueRoute\\\",\\n    value: function continueRoute() {\\n      this.root_store.common.routeTo(this.deposit_target);\\n    }\\n  }, {\\n    key: \\\"setAccountSwitchListener\\\",\\n    value: function setAccountSwitchListener() {\\n      // cashier inits once and tries to stay active until switching account\\n      // since cashier calls take a long time to respond or display in iframe\\n      // so we don't have any unmount function here and everything gets reset on switch instead\\n      this.disposeSwitchAccount();\\n      this.onSwitchAccount(this.accountSwitcherListener);\\n    } // Initialise P2P attributes on app load without mounting the entire cashier\\n\\n  }, {\\n    key: \\\"init\\\",\\n    value: function () {\\n      var _init = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this$root_store4, _this$root_store4$cli, is_logged_in, switched, modules, _modules$cashier, account_prompt_dialog, withdraw;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                if (!this.root_store.modules.cashier) {\\n                  _context2.next = 13;\\n                  break;\\n                }\\n\\n                _this$root_store4 = this.root_store, _this$root_store4$cli = _this$root_store4.client, is_logged_in = _this$root_store4$cli.is_logged_in, switched = _this$root_store4$cli.switched, modules = _this$root_store4.modules;\\n                _modules$cashier = modules.cashier, account_prompt_dialog = _modules$cashier.account_prompt_dialog, withdraw = _modules$cashier.withdraw; // wait for client settings to be populated in client-store\\n\\n                _context2.next = 5;\\n                return this.WS.wait('get_settings');\\n\\n              case 5:\\n                if (!is_logged_in) {\\n                  _context2.next = 13;\\n                  break;\\n                }\\n\\n                _context2.next = 8;\\n                return this.getAdvertizerError();\\n\\n              case 8:\\n                account_prompt_dialog.resetLastLocation();\\n\\n                if (switched) {\\n                  _context2.next = 13;\\n                  break;\\n                }\\n\\n                this.checkP2pStatus(); // check if withdrawal limit is reached\\n                // if yes, this will trigger to show a notification\\n\\n                _context2.next = 13;\\n                return withdraw.check10kLimit();\\n\\n              case 13:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function init() {\\n        return _init.apply(this, arguments);\\n      }\\n\\n      return init;\\n    }()\\n  }, {\\n    key: \\\"getAdvertizerError\\\",\\n    value: function () {\\n      var _getAdvertizerError = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var advertiser_info;\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return this.WS.authorized.p2pAdvertiserInfo();\\n\\n              case 2:\\n                advertiser_info = _context3.sent;\\n                this.setP2pAdvertiserError((0,shared_.getPropertyValue)(advertiser_info, ['error', 'code']));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function getAdvertizerError() {\\n        return _getAdvertizerError.apply(this, arguments);\\n      }\\n\\n      return getAdvertizerError;\\n    }()\\n  }, {\\n    key: \\\"setP2pAdvertiserError\\\",\\n    value: function setP2pAdvertiserError(value) {\\n      this.p2p_advertiser_error = value;\\n    }\\n  }, {\\n    key: \\\"checkP2pStatus\\\",\\n    value: function checkP2pStatus() {\\n      var advertiser_error = this.p2p_advertiser_error;\\n      var is_p2p_restricted = advertiser_error === 'RestrictedCountry' || advertiser_error === 'RestrictedCurrency';\\n      this.setIsP2pVisible(!(is_p2p_restricted || this.root_store.client.is_virtual));\\n    }\\n  }, {\\n    key: \\\"onMountCommon\\\",\\n    value: function () {\\n      var _onMountCommon = general_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(should_remount) {\\n        var _this$root_store5, client, common, modules, _modules$cashier2, account_transfer, onramp, payment_agent, payment_agent_transfer, transaction_history;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _this$root_store5 = this.root_store, client = _this$root_store5.client, common = _this$root_store5.common, modules = _this$root_store5.modules;\\n                _modules$cashier2 = modules.cashier, account_transfer = _modules$cashier2.account_transfer, onramp = _modules$cashier2.onramp, payment_agent = _modules$cashier2.payment_agent, payment_agent_transfer = _modules$cashier2.payment_agent_transfer, transaction_history = _modules$cashier2.transaction_history;\\n\\n                if (!client.is_logged_in) {\\n                  _context4.next = 12;\\n                  break;\\n                }\\n\\n                if (!this.is_populating_values) {\\n                  _context4.next = 5;\\n                  break;\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\");\\n\\n              case 5:\\n                this.is_populating_values = true;\\n\\n                if (should_remount) {\\n                  this.setOnRemount(this.onMountCommon);\\n                } // we need to see if client's country has PA\\n                // if yes, we can show the PA tab in cashier\\n\\n\\n                payment_agent.setPaymentAgentList().then(payment_agent.filterPaymentAgentList);\\n\\n                if (!payment_agent_transfer.is_payment_agent) {\\n                  payment_agent_transfer.checkIsPaymentAgent();\\n                }\\n\\n                if (!account_transfer.accounts_list.length) {\\n                  account_transfer.sortAccountsTransfer();\\n                }\\n\\n                if (!onramp.is_onramp_tab_visible && window.location.pathname.endsWith(shared_.routes.cashier_onramp)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n                if (!transaction_history.is_crypto_transactions_visible && window.location.pathname.endsWith(shared_.routes.cashier_crypto_transactions)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                  transaction_history.setIsCryptoTransactionsVisible(true);\\n                  transaction_history.onMount();\\n                }\\n\\n              case 12:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function onMountCommon(_x) {\\n        return _onMountCommon.apply(this, arguments);\\n      }\\n\\n      return onMountCommon;\\n    }()\\n  }, {\\n    key: \\\"setCashierTabIndex\\\",\\n    value: function setCashierTabIndex(index) {\\n      this.cashier_route_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"setNotificationCount\\\",\\n    value: function setNotificationCount(notification_count) {\\n      this.p2p_notification_count = notification_count;\\n    }\\n  }, {\\n    key: \\\"setIsP2pVisible\\\",\\n    value: function setIsP2pVisible(is_p2p_visible) {\\n      this.is_p2p_visible = is_p2p_visible;\\n\\n      if (!is_p2p_visible && window.location.pathname.endsWith(shared_.routes.cashier_p2p)) {\\n        var _this$root_store$modu2;\\n\\n        this.root_store.common.routeTo((_this$root_store$modu2 = this.root_store.modules.cashier.account_prompt_dialog.last_location) !== null && _this$root_store$modu2 !== void 0 ? _this$root_store$modu2 : shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"is_cashier_locked\\\",\\n    get: function get() {\\n      var account_status = this.root_store.client.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.status)) return false;\\n      return account_status.status.some(function (status_name) {\\n        return status_name === 'cashier_locked';\\n      });\\n    }\\n  }, {\\n    key: \\\"is_system_maintenance\\\",\\n    get: function get() {\\n      var account_status = this.root_store.client.account_status;\\n      if (!(account_status !== null && account_status !== void 0 && account_status.cashier_validation)) return false;\\n      return account_status.cashier_validation.some(function (validation) {\\n        return validation === 'system_maintenance';\\n      });\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(container) {\\n      this.active_container = container;\\n    }\\n  }, {\\n    key: \\\"accountSwitcherListener\\\",\\n    value: function accountSwitcherListener() {\\n      var _this$root_store$modu3 = this.root_store.modules.cashier,\\n          iframe = _this$root_store$modu3.iframe,\\n          payment_agent = _this$root_store$modu3.payment_agent,\\n          withdraw = _this$root_store$modu3.withdraw;\\n      withdraw.verification.clearVerification();\\n      payment_agent.verification.clearVerification();\\n      iframe.clearIframe();\\n      this.payment_agent = payment_agent;\\n      this.is_populating_values = false;\\n      this.onRemount();\\n      return Promise.resolve();\\n    }\\n  }]);\\n\\n  return GeneralStore;\\n}(BaseStore), (general_store_descriptor = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor2 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_p2p_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor3 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"p2p_notification_count\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor4 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"cashier_route_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor5 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_deposit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor6 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_show_all_available_currencies\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor7 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), general_store_descriptor8 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"deposit_target\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), general_store_descriptor9 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_set_currency_modal_title_change\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor10 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"p2p_advertiser_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), general_store_descriptor11 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"has_set_currency\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor12 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"should_percentage_reset\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor13 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"percentage\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), general_store_descriptor14 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"show_p2p_in_cashier_default\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), general_store_descriptor15 = general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onRemount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return function () {};\\n  }\\n}), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setOnRemount\\\", [general_store_dec], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setOnRemount\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_crypto\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_crypto\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_p2p_enabled\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_p2p_enabled\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"showP2pInCashierDefault\\\", [general_store_dec2], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"showP2pInCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"attachCashierToMenu\\\", [general_store_dec3], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"attachCashierToMenu\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"replaceCashierMenuOnclick\\\", [general_store_dec4], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"replaceCashierMenuOnclick\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setHasSetCurrency\\\", [general_store_dec5], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setHasSetCurrency\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"changeSetCurrencyModalTitle\\\", [general_store_dec6], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"changeSetCurrencyModalTitle\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onMountCashierDefault\\\", [general_store_dec7], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"onMountCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"calculatePercentage\\\", [general_store_dec8], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"calculatePercentage\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"percentageSelectorSelectionStatus\\\", [general_store_dec9], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"percentageSelectorSelectionStatus\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsDeposit\\\", [general_store_dec10], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsDeposit\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setShouldShowAllAvailableCurrencies\\\", [general_store_dec11], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setShouldShowAllAvailableCurrencies\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsCashierDefault\\\", [general_store_dec12], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsCashierDefault\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setDepositTarget\\\", [general_store_dec13], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setDepositTarget\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"continueRoute\\\", [general_store_dec14], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"continueRoute\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setAccountSwitchListener\\\", [general_store_dec15], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setAccountSwitchListener\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"init\\\", [general_store_dec16], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"init\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"getAdvertizerError\\\", [general_store_dec17], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"getAdvertizerError\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setP2pAdvertiserError\\\", [general_store_dec18], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setP2pAdvertiserError\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"checkP2pStatus\\\", [general_store_dec19], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"checkP2pStatus\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"onMountCommon\\\", [general_store_dec20], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"onMountCommon\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setCashierTabIndex\\\", [general_store_dec21], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setCashierTabIndex\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setNotificationCount\\\", [general_store_dec22], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setNotificationCount\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setIsP2pVisible\\\", [general_store_dec23], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setIsP2pVisible\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_cashier_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_cashier_locked\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"is_system_maintenance\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"is_system_maintenance\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setLoading\\\", [general_store_dec24], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setLoading\\\"), general_store_class.prototype), general_store_applyDecoratedDescriptor(general_store_class.prototype, \\\"setActiveTab\\\", [_dec25], Object.getOwnPropertyDescriptor(general_store_class.prototype, \\\"setActiveTab\\\"), general_store_class.prototype)), general_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/iframe-store.js\\nvar iframe_store_dec, iframe_store_dec2, iframe_store_dec3, iframe_store_dec4, iframe_store_dec5, iframe_store_dec6, iframe_store_dec7, iframe_store_class, iframe_store_descriptor, iframe_store_descriptor2, iframe_store_descriptor3, iframe_store_descriptor4;\\n\\nfunction iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction iframe_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { iframe_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction iframe_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction iframe_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction iframe_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction iframe_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) iframe_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) iframe_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction iframe_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction iframe_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar IframeStore = (iframe_store_dec = external_mobx_.action.bound, iframe_store_dec2 = external_mobx_.action.bound, iframe_store_dec3 = external_mobx_.action.bound, iframe_store_dec4 = external_mobx_.action.bound, iframe_store_dec5 = external_mobx_.action.bound, iframe_store_dec6 = external_mobx_.action.bound, iframe_store_dec7 = external_mobx_.action.bound, (iframe_store_class = /*#__PURE__*/function () {\\n  function IframeStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    iframe_store_classCallCheck(this, IframeStore);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"iframe_height\\\", iframe_store_descriptor, this);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"iframe_url\\\", iframe_store_descriptor2, this);\\n\\n    iframe_store_initializerDefineProperty(this, \\\"is_session_timeout\\\", iframe_store_descriptor3, this);\\n\\n    this.onIframeLoaded = '';\\n\\n    iframe_store_initializerDefineProperty(this, \\\"timeout_session\\\", iframe_store_descriptor4, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  iframe_store_createClass(IframeStore, [{\\n    key: \\\"setSessionTimeout\\\",\\n    value: function setSessionTimeout(is_session_time_out) {\\n      this.is_session_timeout = is_session_time_out;\\n\\n      if (is_session_time_out) {\\n        this.removeOnIframeLoaded();\\n      }\\n    }\\n  }, {\\n    key: \\\"checkIframeLoaded\\\",\\n    value: function () {\\n      var _checkIframeLoaded = iframe_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store, modules, ui;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, modules = _this$root_store.modules, ui = _this$root_store.ui;\\n                this.removeOnIframeLoaded();\\n\\n                this.onIframeLoaded = function (e) {\\n                  if (/cashier|doughflow/.test(e.origin)) {\\n                    modules.cashier.general_store.setLoading(false); // set the height of the container after content loads so that the\\n                    // loading bar stays vertically centered until the end\\n\\n                    if (ui.is_mobile) {\\n                      this.setContainerHeight(window.innerHeight - 100);\\n                    } else {\\n                      this.setContainerHeight(window.innerHeight - 190);\\n                    } // do not remove the listener\\n                    // on every iframe screen change we need to update the height to more/less to match the new content\\n\\n                  }\\n                }.bind(this);\\n\\n                window.addEventListener('message', this.onIframeLoaded, false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function checkIframeLoaded() {\\n        return _checkIframeLoaded.apply(this, arguments);\\n      }\\n\\n      return checkIframeLoaded;\\n    }()\\n  }, {\\n    key: \\\"removeOnIframeLoaded\\\",\\n    value: function removeOnIframeLoaded() {\\n      if (this.onIframeLoaded) {\\n        window.removeEventListener('message', this.onIframeLoaded, false);\\n        this.onIframeLoaded = '';\\n      }\\n    }\\n  }, {\\n    key: \\\"clearTimeoutCashierUrl\\\",\\n    value: function clearTimeoutCashierUrl() {\\n      if (this.timeout_session) {\\n        clearTimeout(this.timeout_session);\\n      }\\n    }\\n  }, {\\n    key: \\\"setTimeoutCashierUrl\\\",\\n    value: function setTimeoutCashierUrl() {\\n      var _this = this;\\n\\n      this.clearTimeoutCashierUrl();\\n      this.timeout_session = setTimeout(function () {\\n        _this.setSessionTimeout(true);\\n      }, 60000);\\n    }\\n  }, {\\n    key: \\\"setIframeUrl\\\",\\n    value: function setIframeUrl(url) {\\n      var container = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.root_store.modules.cashier.general_store.active_container;\\n      var _this$root_store2 = this.root_store,\\n          client = _this$root_store2.client,\\n          ui = _this$root_store2.ui;\\n\\n      if (url) {\\n        this.iframe_url = \\\"\\\".concat(url, \\\"&theme=\\\").concat(ui.is_dark_mode_on ? 'dark' : 'light'); // after we set iframe url we can clear verification code\\n\\n        client.setVerificationCode('', constants.map_action[container]);\\n      } else {\\n        this.iframe_url = url;\\n      }\\n    }\\n  }, {\\n    key: \\\"setContainerHeight\\\",\\n    value: function setContainerHeight(height) {\\n      this.iframe_height = height;\\n    }\\n  }, {\\n    key: \\\"clearIframe\\\",\\n    value: function clearIframe() {\\n      this.setContainerHeight(0);\\n      this.setIframeUrl('');\\n      this.clearTimeoutCashierUrl();\\n      this.setSessionTimeout(true);\\n    }\\n  }]);\\n\\n  return IframeStore;\\n}(), (iframe_store_descriptor = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"iframe_height\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), iframe_store_descriptor2 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"iframe_url\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), iframe_store_descriptor3 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"is_session_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), iframe_store_descriptor4 = iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"timeout_session\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setSessionTimeout\\\", [iframe_store_dec], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setSessionTimeout\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"checkIframeLoaded\\\", [iframe_store_dec2], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"checkIframeLoaded\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"clearTimeoutCashierUrl\\\", [iframe_store_dec3], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"clearTimeoutCashierUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setTimeoutCashierUrl\\\", [iframe_store_dec4], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setTimeoutCashierUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setIframeUrl\\\", [iframe_store_dec5], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setIframeUrl\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"setContainerHeight\\\", [iframe_store_dec6], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"setContainerHeight\\\"), iframe_store_class.prototype), iframe_store_applyDecoratedDescriptor(iframe_store_class.prototype, \\\"clearIframe\\\", [iframe_store_dec7], Object.getOwnPropertyDescriptor(iframe_store_class.prototype, \\\"clearIframe\\\"), iframe_store_class.prototype)), iframe_store_class));\\n\\n;// CONCATENATED MODULE: ./Config/on-ramp-providers.js\\n\\n\\nvar createBanxaProvider = function createBanxaProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierBanxaDark',\\n      light: 'IcCashierBanxaLight'\\n    },\\n    name: 'Banxa',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('A fast and secure fiat-to-crypto payment service. Deposit cryptocurrencies from anywhere in the world using your credit/debit cards and bank transfers.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }, {\\n        dark: 'IcCashierBpayDark',\\n        light: 'IcCashierBpayLight'\\n      }, {\\n        dark: 'IcCashierSepaDark',\\n        light: 'IcCashierSepaLight'\\n      }, {\\n        dark: 'IcCashierBlueshyftDark',\\n        light: 'IcCashierBlueshyftLight'\\n      }, {\\n        dark: 'IcCashierFlexepinDark',\\n        light: 'IcCashierFlexepinLight'\\n      }, {\\n        dark: 'IcCashierPayIdDark',\\n        light: 'IcCashierPayIdLight'\\n      }, {\\n        dark: 'IcCashierPoliDark',\\n        light: 'IcCashierPoliLight'\\n      }, {\\n        dark: 'IcCashierApplePay',\\n        light: 'IcCashierApplePay'\\n      }, {\\n        dark: 'IcCashierInteracEtransfer',\\n        light: 'IcCashierInteracEtransfer'\\n      }, {\\n        dark: 'IcCashierIdeal',\\n        light: 'IcCashierIdeal'\\n      }, {\\n        dark: 'IcCashierPostBillPayDark',\\n        light: 'IcCashierPostBillPayLight'\\n      }, {\\n        dark: 'IcCashierSofort',\\n        light: 'IcCashierSofort'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    // None.\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return '';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['*'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['*'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve, reject) {\\n        store.WS.serviceToken({\\n          service_token: 1,\\n          service: 'banxa',\\n          referrer: window.location.href\\n        }).then(function (response) {\\n          if (response.error) {\\n            reject(response.error.message);\\n          } else {\\n            var url = response.service_token.banxa.url;\\n\\n            if (url) {\\n              window.open(url);\\n            } // Resolving empty will/should redirect user.\\n\\n\\n            resolve();\\n          }\\n        });\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\nvar createChangellyProvider = function createChangellyProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierChangellyDark',\\n      light: 'IcCashierChangellyLight'\\n    },\\n    name: 'Changelly',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Your simple access to crypto. Fast and secure way to exchange and purchase cryptocurrencies. 24/7 live chat support.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierVisaDark',\\n        light: 'IcCashierVisaLight'\\n      }, {\\n        dark: 'IcCashierMastercardDark',\\n        light: 'IcCashierMastercardLight'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getDefaultFromCurrency: function getDefaultFromCurrency() {\\n      return 'usd';\\n    },\\n    getFromCurrencies: function getFromCurrencies() {\\n      return ['usd', 'eur', 'gbp'];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['bch', 'btc', 'etc', 'eth', 'ltc', 'ust'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      var _this = this;\\n\\n      return new Promise(function (resolve) {\\n        var url = new URL('https://widget.changelly.com/?v=3&theme=default');\\n        url.searchParams.append('fromDefault', _this.getDefaultFromCurrency());\\n        var currency = store.root_store.client.currency.toLowerCase();\\n\\n        if (_this.getToCurrencies().includes(currency)) {\\n          var to_currency = currency === 'ust' ? 'usdt' : currency;\\n          url.searchParams.append('to', to_currency);\\n          url.searchParams.append('toDefault', to_currency);\\n        }\\n\\n        url.searchParams.append('amount', 1);\\n        url.searchParams.append('merchant_id', 'iiq3jdt2p44yrfbx');\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: true\\n  };\\n};\\n\\nvar createXanPoolProvider = function createXanPoolProvider(store) {\\n  return {\\n    icon: {\\n      dark: 'IcCashierXanpoolDark',\\n      light: 'IcCashierXanpoolLight'\\n    },\\n    name: 'XanPool',\\n    getDescription: function getDescription() {\\n      return (0,translations_.localize)('Buy cryptocurrencies in an instant. Enjoy easy, quick, and secure exchanges using your local payment methods.');\\n    },\\n    getAllowedResidencies: function getAllowedResidencies() {\\n      return ['*'];\\n    },\\n    getPaymentIcons: function getPaymentIcons() {\\n      return [{\\n        dark: 'IcCashierFpsDark',\\n        light: 'IcCashierFpsLight'\\n      }, {\\n        dark: 'IcCashierAliPayDark',\\n        light: 'IcCashierAliPayLight'\\n      }, {\\n        dark: 'IcCashierGoPayDark',\\n        light: 'IcCashierGoPayLight'\\n      }, {\\n        dark: 'IcCashierMandiriPay',\\n        light: 'IcCashierMandiriPay'\\n      }, {\\n        dark: 'IcCashierInstaPayLight',\\n        light: 'IcCashierInstaPayDark'\\n      }, {\\n        dark: 'IcCashierCebuanaLhuillierDark',\\n        light: 'IcCashierCebuanaLhuillierLight'\\n      }, {\\n        dark: 'IcCashierPayNowDark',\\n        light: 'IcCashierPayNowLight'\\n      }, {\\n        dark: 'IcCashierUpiDark',\\n        light: 'IcCashierUpiLight'\\n      }, {\\n        dark: 'IcCashierPromptPayDark',\\n        light: 'IcCashierPromptPayLight'\\n      }, {\\n        dark: 'IcCashierViettlePay',\\n        light: 'IcCashierViettlePay'\\n      }];\\n    },\\n    getScriptDependencies: function getScriptDependencies() {\\n      return [];\\n    },\\n    getToCurrencies: function getToCurrencies() {\\n      return ['btc', 'eth', 'ust', 'zil', 'nem'];\\n    },\\n    getWidgetHtml: function getWidgetHtml() {\\n      return new Promise(function (resolve) {\\n        var currency = store.root_store.client.currency;\\n        var url = 'https://checkout.xanpool.com/';\\n        url += \\\"?apiKey=db4ec638dff9a68abda1ef6b7638c220\\\";\\n        url += \\\"&redirectUrl=\\\".concat(window.location.href);\\n        url += \\\"&wallet=\\\".concat(store.deposit_address);\\n        url += \\\"&cryptoCurrency=\\\".concat(currency === 'UST' ? 'USDT' : currency);\\n        url += \\\"&transactionType=buy\\\";\\n        window.open(url);\\n        resolve();\\n      });\\n    },\\n    onMountWidgetContainer: function onMountWidgetContainer() {},\\n    should_show_deposit_address: false\\n  };\\n};\\n\\n/* harmony default export */ const on_ramp_providers = ({\\n  createBanxaProvider: createBanxaProvider,\\n  createChangellyProvider: createChangellyProvider,\\n  createXanPoolProvider: createXanPoolProvider\\n});\\n;// CONCATENATED MODULE: ./Stores/on-ramp-store.js\\nfunction on_ramp_store_typeof(obj) { \\\"@babel/helpers - typeof\\\"; return on_ramp_store_typeof = \\\"function\\\" == typeof Symbol && \\\"symbol\\\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \\\"function\\\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \\\"symbol\\\" : typeof obj; }, on_ramp_store_typeof(obj); }\\n\\nvar on_ramp_store_dec, on_ramp_store_dec2, on_ramp_store_dec3, on_ramp_store_dec4, on_ramp_store_dec5, on_ramp_store_dec6, on_ramp_store_dec7, on_ramp_store_dec8, on_ramp_store_dec9, on_ramp_store_dec10, on_ramp_store_dec11, on_ramp_store_dec12, on_ramp_store_dec13, on_ramp_store_dec14, on_ramp_store_dec15, on_ramp_store_dec16, on_ramp_store_dec17, on_ramp_store_dec18, on_ramp_store_dec19, on_ramp_store_dec20, on_ramp_store_dec21, on_ramp_store_dec22, on_ramp_store_class, on_ramp_store_descriptor, on_ramp_store_descriptor2, on_ramp_store_descriptor3, on_ramp_store_descriptor4, on_ramp_store_descriptor5, on_ramp_store_descriptor6, on_ramp_store_descriptor7, on_ramp_store_descriptor8, on_ramp_store_descriptor9, on_ramp_store_descriptor10, on_ramp_store_descriptor11;\\n\\nfunction on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction on_ramp_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { on_ramp_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction on_ramp_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction on_ramp_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction on_ramp_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction on_ramp_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) on_ramp_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) on_ramp_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction on_ramp_store_inherits(subClass, superClass) { if (typeof superClass !== \\\"function\\\" && superClass !== null) { throw new TypeError(\\\"Super expression must either be null or a function\\\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, \\\"prototype\\\", { writable: false }); if (superClass) on_ramp_store_setPrototypeOf(subClass, superClass); }\\n\\nfunction on_ramp_store_setPrototypeOf(o, p) { on_ramp_store_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return on_ramp_store_setPrototypeOf(o, p); }\\n\\nfunction on_ramp_store_createSuper(Derived) { var hasNativeReflectConstruct = on_ramp_store_isNativeReflectConstruct(); return function _createSuperInternal() { var Super = on_ramp_store_getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = on_ramp_store_getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return on_ramp_store_possibleConstructorReturn(this, result); }; }\\n\\nfunction on_ramp_store_possibleConstructorReturn(self, call) { if (call && (on_ramp_store_typeof(call) === \\\"object\\\" || typeof call === \\\"function\\\")) { return call; } else if (call !== void 0) { throw new TypeError(\\\"Derived constructors may only return object or undefined\\\"); } return on_ramp_store_assertThisInitialized(self); }\\n\\nfunction on_ramp_store_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\\\"this hasn't been initialised - super() hasn't been called\\\"); } return self; }\\n\\nfunction on_ramp_store_isNativeReflectConstruct() { if (typeof Reflect === \\\"undefined\\\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \\\"function\\\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\\n\\nfunction on_ramp_store_getPrototypeOf(o) { on_ramp_store_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return on_ramp_store_getPrototypeOf(o); }\\n\\nfunction on_ramp_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction on_ramp_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar OnRampStore = (on_ramp_store_dec = external_mobx_.observable.shallow, on_ramp_store_dec2 = external_mobx_.observable.ref, on_ramp_store_dec3 = external_mobx_.action.bound, on_ramp_store_dec4 = external_mobx_.action.bound, on_ramp_store_dec5 = external_mobx_.action.bound, on_ramp_store_dec6 = external_mobx_.action.bound, on_ramp_store_dec7 = external_mobx_.action.bound, on_ramp_store_dec8 = external_mobx_.action.bound, on_ramp_store_dec9 = external_mobx_.action.bound, on_ramp_store_dec10 = external_mobx_.action.bound, on_ramp_store_dec11 = external_mobx_.action.bound, on_ramp_store_dec12 = external_mobx_.action.bound, on_ramp_store_dec13 = external_mobx_.action.bound, on_ramp_store_dec14 = external_mobx_.action.bound, on_ramp_store_dec15 = external_mobx_.action.bound, on_ramp_store_dec16 = external_mobx_.action.bound, on_ramp_store_dec17 = external_mobx_.action.bound, on_ramp_store_dec18 = external_mobx_.action.bound, on_ramp_store_dec19 = external_mobx_.action.bound, on_ramp_store_dec20 = external_mobx_.action.bound, on_ramp_store_dec21 = external_mobx_.action.bound, on_ramp_store_dec22 = external_mobx_.action.bound, (on_ramp_store_class = /*#__PURE__*/function (_BaseStore) {\\n  on_ramp_store_inherits(OnRampStore, _BaseStore);\\n\\n  var _super = on_ramp_store_createSuper(OnRampStore);\\n\\n  function OnRampStore(_ref) {\\n    var _this;\\n\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    on_ramp_store_classCallCheck(this, OnRampStore);\\n\\n    _this = _super.call(this, {\\n      root_store: root_store\\n    });\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"api_error\\\", on_ramp_store_descriptor, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"deposit_address\\\", on_ramp_store_descriptor2, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_loading\\\", on_ramp_store_descriptor3, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_deposit_address_popover_open\\\", on_ramp_store_descriptor4, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_onramp_modal_open\\\", on_ramp_store_descriptor5, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"is_requesting_widget_html\\\", on_ramp_store_descriptor6, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"onramp_providers\\\", on_ramp_store_descriptor7, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"selected_provider\\\", on_ramp_store_descriptor8, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"should_show_widget\\\", on_ramp_store_descriptor9, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_error\\\", on_ramp_store_descriptor10, on_ramp_store_assertThisInitialized(_this));\\n\\n    on_ramp_store_initializerDefineProperty(_this, \\\"widget_html\\\", on_ramp_store_descriptor11, on_ramp_store_assertThisInitialized(_this));\\n\\n    _this.deposit_address_ref = null;\\n    _this.WS = WS;\\n\\n    _this.onClientInit( /*#__PURE__*/on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n      return regeneratorRuntime.wrap(function _callee$(_context) {\\n        while (1) {\\n          switch (_context.prev = _context.next) {\\n            case 0:\\n              _this.setOnrampProviders([on_ramp_providers.createChangellyProvider(on_ramp_store_assertThisInitialized(_this)), on_ramp_providers.createXanPoolProvider(on_ramp_store_assertThisInitialized(_this)), on_ramp_providers.createBanxaProvider(on_ramp_store_assertThisInitialized(_this))]);\\n\\n            case 1:\\n            case \\\"end\\\":\\n              return _context.stop();\\n          }\\n        }\\n      }, _callee);\\n    })));\\n\\n    return _this;\\n  }\\n\\n  on_ramp_store_createClass(OnRampStore, [{\\n    key: \\\"is_onramp_tab_visible\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return client.is_virtual === false && (0,shared_.isCryptocurrency)(client.currency) && this.filtered_onramp_providers.length > 0;\\n    }\\n  }, {\\n    key: \\\"filtered_onramp_providers\\\",\\n    get: function get() {\\n      var client = this.root_store.client;\\n      return this.onramp_providers // Ensure provider supports this user's account currency.\\n      .filter(function (provider) {\\n        var to_currencies = provider.getToCurrencies();\\n        return to_currencies.includes('*') || to_currencies.includes(client.currency.toLowerCase());\\n      }) // Ensure provider supports this user's residency.\\n      .filter(function (provider) {\\n        var allowed_residencies = provider.getAllowedResidencies();\\n        return allowed_residencies.includes('*') || allowed_residencies.includes(client.residence);\\n      });\\n    }\\n  }, {\\n    key: \\\"onramp_popup_modal_title\\\",\\n    get: function get() {\\n      if (this.should_show_widget) {\\n        return (0,translations_.localize)('Payment channel');\\n      } else if (this.selected_provider) {\\n        if (this.should_show_dialog) {\\n          return (0,translations_.localize)('Our server cannot retrieve an address.');\\n        }\\n\\n        return ' '; // Empty string to render header + close icon.\\n      }\\n\\n      return undefined;\\n    }\\n  }, {\\n    key: \\\"should_show_dialog\\\",\\n    get: function get() {\\n      return this.api_error;\\n    }\\n  }, {\\n    key: \\\"onMountOnramp\\\",\\n    value: function onMountOnramp() {\\n      var _this2 = this;\\n\\n      this.disposeThirdPartyJsReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.selected_provider;\\n      }, /*#__PURE__*/function () {\\n        var _ref3 = on_ramp_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(provider) {\\n          var dependencies, _yield$import, loadjs, script_name;\\n\\n          return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n            while (1) {\\n              switch (_context2.prev = _context2.next) {\\n                case 0:\\n                  if (provider) {\\n                    _context2.next = 2;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 2:\\n                  dependencies = provider.getScriptDependencies();\\n\\n                  if (!(dependencies.length === 0)) {\\n                    _context2.next = 5;\\n                    break;\\n                  }\\n\\n                  return _context2.abrupt(\\\"return\\\");\\n\\n                case 5:\\n                  _context2.next = 7;\\n                  return __webpack_require__.e(/* import() | loadjs */ \\\"loadjs\\\").then(__webpack_require__.t.bind(__webpack_require__, \\\"../../../node_modules/loadjs/dist/loadjs.umd.js\\\", 23));\\n\\n                case 7:\\n                  _yield$import = _context2.sent;\\n                  loadjs = _yield$import[\\\"default\\\"];\\n                  script_name = \\\"\\\".concat((0,shared_.getKebabCase)(provider.name), \\\"-onramp\\\");\\n\\n                  if (!loadjs.isDefined(script_name)) {\\n                    loadjs(dependencies, script_name, {\\n                      error: function error() {\\n                        // eslint-disable-next-line no-console\\n                        console.warn(\\\"Dependencies for onramp provider \\\".concat(provider.name, \\\" could not be loaded.\\\"));\\n\\n                        _this2.setSelectedProvider(null);\\n                      }\\n                    });\\n                  }\\n\\n                case 11:\\n                case \\\"end\\\":\\n                  return _context2.stop();\\n              }\\n            }\\n          }, _callee2);\\n        }));\\n\\n        return function (_x) {\\n          return _ref3.apply(this, arguments);\\n        };\\n      }()); // When \\\"should_show_widget\\\", attempt to fetch \\\"selected_provider\\\"'s \\\"widget_html\\\".\\n\\n      this.disposeGetWidgetHtmlReaction = (0,external_mobx_.reaction)(function () {\\n        return _this2.should_show_widget;\\n      }, function (should_show_widget) {\\n        if (should_show_widget) {\\n          if (_this2.is_requesting_widget_html) {\\n            return;\\n          }\\n\\n          _this2.setIsRequestingWidgetHtml(true);\\n\\n          _this2.selected_provider.getWidgetHtml().then(function (widget_html) {\\n            if (widget_html) {\\n              // Regular providers (iframe/JS embed)\\n              _this2.setWidgetHtml(widget_html);\\n            } else {\\n              // An empty resolve (widget_html) identifies a redirect.\\n              _this2.setShouldShowWidget(false);\\n            }\\n          })[\\\"catch\\\"](function (error) {\\n            _this2.setWidgetError(error);\\n          })[\\\"finally\\\"](function () {\\n            return _this2.setIsRequestingWidgetHtml(false);\\n          });\\n        }\\n      });\\n    }\\n  }, {\\n    key: \\\"onUnmountOnramp\\\",\\n    value: function onUnmountOnramp() {\\n      if (typeof this.disposeThirdPartyJsReaction === 'function') {\\n        this.disposeThirdPartyJsReaction();\\n      }\\n\\n      if (typeof this.disposeGetWidgetHtmlReaction === 'function') {\\n        this.disposeGetWidgetHtmlReaction();\\n      }\\n    }\\n  }, {\\n    key: \\\"onClickCopyDepositAddress\\\",\\n    value: function onClickCopyDepositAddress() {\\n      var _this3 = this;\\n\\n      var range = document.createRange();\\n      range.selectNodeContents(this.deposit_address_ref);\\n      var selections = window.getSelection();\\n      selections.removeAllRanges();\\n      selections.addRange(range);\\n      navigator.clipboard.writeText(this.deposit_address).then(function () {\\n        _this3.setIsDepositAddressPopoverOpen(true);\\n\\n        setTimeout(function () {\\n          return _this3.setIsDepositAddressPopoverOpen(false);\\n        }, 500);\\n      });\\n    }\\n  }, {\\n    key: \\\"onClickDisclaimerContinue\\\",\\n    value: function onClickDisclaimerContinue() {\\n      this.setShouldShowWidget(true);\\n    }\\n  }, {\\n    key: \\\"onClickGoToDepositPage\\\",\\n    value: function onClickGoToDepositPage() {\\n      this.pollApiForDepositAddress(false);\\n      window.open((0,shared_.websiteUrl)() + shared_.routes.cashier_deposit.substring(1));\\n    }\\n  }, {\\n    key: \\\"pollApiForDepositAddress\\\",\\n    value: function pollApiForDepositAddress(should_allow_empty_address) {\\n      var _this4 = this;\\n\\n      // should_allow_empty_address: API returns empty deposit address for legacy accounts\\n      // that have never generated a deposit address. Setting this to \\\"true\\\" will allow\\n      // the user to be redirected to the Deposit page (where an address will be generated).\\n      // Setting this to \\\"false\\\" will start polling the API for this deposit address.\\n      this.setIsDepositAddressLoading(true);\\n      this.setApiError(null);\\n      var deposit_address_interval = setInterval(function () {\\n        return getDepositAddressFromApi;\\n      }, 3000);\\n\\n      var getDepositAddressFromApi = function getDepositAddressFromApi() {\\n        _this4.WS.authorized.cashier('deposit', {\\n          provider: 'crypto',\\n          type: 'api'\\n        }).then(function (response) {\\n          var should_clear_interval = false;\\n\\n          if (response.error) {\\n            _this4.setApiError(response.error);\\n\\n            should_clear_interval = true;\\n          } else {\\n            var address = response.cashier.deposit.address;\\n\\n            if (address || should_allow_empty_address) {\\n              _this4.setDepositAddress(address);\\n\\n              should_clear_interval = true;\\n            }\\n          }\\n\\n          if (should_clear_interval) {\\n            clearInterval(deposit_address_interval);\\n\\n            _this4.setIsDepositAddressLoading(false);\\n          }\\n        });\\n      };\\n\\n      getDepositAddressFromApi();\\n      setTimeout(function () {\\n        clearInterval(deposit_address_interval);\\n\\n        _this4.setIsDepositAddressLoading(false);\\n      }, 30000);\\n    }\\n  }, {\\n    key: \\\"resetPopup\\\",\\n    value: function resetPopup() {\\n      this.setApiError(null);\\n      this.setDepositAddress(null);\\n      this.setDepositAddressRef(null);\\n      this.setIsDepositAddressLoading(true);\\n      this.setSelectedProvider(null);\\n      this.setShouldShowWidget(false);\\n      this.setWidgetError(null);\\n      this.setWidgetHtml(null);\\n    }\\n  }, {\\n    key: \\\"setApiError\\\",\\n    value: function setApiError(api_error) {\\n      this.api_error = api_error;\\n    }\\n  }, {\\n    key: \\\"setCopyIconRef\\\",\\n    value: function setCopyIconRef(ref) {\\n      this.copy_icon_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setDepositAddress\\\",\\n    value: function setDepositAddress(deposit_address) {\\n      this.deposit_address = deposit_address;\\n    }\\n  }, {\\n    key: \\\"setDepositAddressRef\\\",\\n    value: function setDepositAddressRef(ref) {\\n      this.deposit_address_ref = ref;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressLoading\\\",\\n    value: function setIsDepositAddressLoading(is_loading) {\\n      this.is_deposit_address_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsDepositAddressPopoverOpen\\\",\\n    value: function setIsDepositAddressPopoverOpen(is_open) {\\n      this.is_deposit_address_popover_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsOnRampModalOpen\\\",\\n    value: function setIsOnRampModalOpen(is_open) {\\n      this.is_onramp_modal_open = is_open;\\n    }\\n  }, {\\n    key: \\\"setIsRequestingWidgetHtml\\\",\\n    value: function setIsRequestingWidgetHtml(is_requesting_widget_html) {\\n      this.is_requesting_widget_html = is_requesting_widget_html;\\n    }\\n  }, {\\n    key: \\\"setSelectedProvider\\\",\\n    value: function setSelectedProvider(provider) {\\n      if (provider) {\\n        this.selected_provider = provider;\\n        this.setIsOnRampModalOpen(true);\\n        this.pollApiForDepositAddress(true);\\n      } else {\\n        this.setIsOnRampModalOpen(false);\\n        this.selected_provider = null;\\n      }\\n    }\\n  }, {\\n    key: \\\"setShouldShowWidget\\\",\\n    value: function setShouldShowWidget(should_show) {\\n      this.should_show_widget = should_show;\\n    }\\n  }, {\\n    key: \\\"setOnrampProviders\\\",\\n    value: function setOnrampProviders(onramp_providers) {\\n      this.onramp_providers = onramp_providers.slice();\\n    }\\n  }, {\\n    key: \\\"setWidgetError\\\",\\n    value: function setWidgetError(widget_error) {\\n      this.widget_error = widget_error;\\n    }\\n  }, {\\n    key: \\\"setWidgetHtml\\\",\\n    value: function setWidgetHtml(widget_html) {\\n      this.widget_html = widget_html;\\n    }\\n  }]);\\n\\n  return OnRampStore;\\n}(BaseStore), (on_ramp_store_descriptor = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"api_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor2 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"deposit_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor3 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), on_ramp_store_descriptor4 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_deposit_address_popover_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor5 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_modal_open\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor6 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_requesting_widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor7 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_providers\\\", [on_ramp_store_dec], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), on_ramp_store_descriptor8 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"selected_provider\\\", [on_ramp_store_dec2], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor9 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_widget\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), on_ramp_store_descriptor10 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_descriptor11 = on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"widget_html\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return null;\\n  }\\n}), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"is_onramp_tab_visible\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"filtered_onramp_providers\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onramp_popup_modal_title\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"should_show_dialog\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\", [on_ramp_store_dec3], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onMountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\", [on_ramp_store_dec4], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onUnmountOnramp\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\", [on_ramp_store_dec5], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickCopyDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\", [on_ramp_store_dec6], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickDisclaimerContinue\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\", [on_ramp_store_dec7], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"onClickGoToDepositPage\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\", [on_ramp_store_dec8], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"pollApiForDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\", [on_ramp_store_dec9], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"resetPopup\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\", [on_ramp_store_dec10], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setApiError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\", [on_ramp_store_dec11], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setCopyIconRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\", [on_ramp_store_dec12], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddress\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\", [on_ramp_store_dec13], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setDepositAddressRef\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\", [on_ramp_store_dec14], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressLoading\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\", [on_ramp_store_dec15], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsDepositAddressPopoverOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\", [on_ramp_store_dec16], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsOnRampModalOpen\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\", [on_ramp_store_dec17], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setIsRequestingWidgetHtml\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\", [on_ramp_store_dec18], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setSelectedProvider\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\", [on_ramp_store_dec19], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setShouldShowWidget\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\", [on_ramp_store_dec20], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setOnrampProviders\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\", [on_ramp_store_dec21], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetError\\\"), on_ramp_store_class.prototype), on_ramp_store_applyDecoratedDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\", [on_ramp_store_dec22], Object.getOwnPropertyDescriptor(on_ramp_store_class.prototype, \\\"setWidgetHtml\\\"), on_ramp_store_class.prototype)), on_ramp_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/verification-store.js\\nvar verification_store_dec, verification_store_dec2, verification_store_dec3, verification_store_dec4, verification_store_dec5, verification_store_dec6, verification_store_dec7, verification_store_dec8, verification_store_class, verification_store_descriptor, verification_store_descriptor2, verification_store_descriptor3, verification_store_descriptor4, verification_store_descriptor5, verification_store_descriptor6;\\n\\nfunction verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction verification_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { verification_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction verification_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction verification_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction verification_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction verification_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) verification_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) verification_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction verification_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction verification_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\nvar VerificationStore = (verification_store_dec = external_mobx_.action.bound, verification_store_dec2 = external_mobx_.action.bound, verification_store_dec3 = external_mobx_.action.bound, verification_store_dec4 = external_mobx_.action.bound, verification_store_dec5 = external_mobx_.action.bound, verification_store_dec6 = external_mobx_.action.bound, verification_store_dec7 = external_mobx_.action.bound, verification_store_dec8 = external_mobx_.action.bound, (verification_store_class = /*#__PURE__*/function () {\\n  function VerificationStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    verification_store_classCallCheck(this, VerificationStore);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_button_clicked\\\", verification_store_descriptor, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"timeout_button\\\", verification_store_descriptor2, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"error\\\", verification_store_descriptor3, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_email_sent\\\", verification_store_descriptor4, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"is_resend_clicked\\\", verification_store_descriptor5, this);\\n\\n    verification_store_initializerDefineProperty(this, \\\"resend_timeout\\\", verification_store_descriptor6, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  verification_store_createClass(VerificationStore, [{\\n    key: \\\"setIsButtonClicked\\\",\\n    value: function setIsButtonClicked(value) {\\n      this.is_button_clicked = value;\\n    }\\n  }, {\\n    key: \\\"setTimeoutButton\\\",\\n    value: function setTimeoutButton(value) {\\n      this.timeout_button = value;\\n    }\\n  }, {\\n    key: \\\"setIsEmailSent\\\",\\n    value: function setIsEmailSent(value) {\\n      this.is_email_sent = value;\\n    }\\n  }, {\\n    key: \\\"setIsResendClicked\\\",\\n    value: function setIsResendClicked(value) {\\n      this.is_resend_clicked = value;\\n    }\\n  }, {\\n    key: \\\"setResendTimeout\\\",\\n    value: function setResendTimeout(value) {\\n      this.resend_timeout = value;\\n    }\\n  }, {\\n    key: \\\"clearTimeoutVerification\\\",\\n    value: function clearTimeoutVerification() {\\n      if (this.timeout_button) {\\n        clearTimeout(this.timeout_button);\\n      }\\n    }\\n  }, {\\n    key: \\\"setTimeoutVerification\\\",\\n    value: function setTimeoutVerification() {\\n      var _this = this;\\n\\n      this.clearTimeoutVerification();\\n      this.setTimeoutButton(setTimeout(function () {\\n        _this.clearVerification();\\n      }, 3600000));\\n    }\\n  }, {\\n    key: \\\"sendVerificationEmail\\\",\\n    value: function () {\\n      var _sendVerificationEmail = verification_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this2 = this;\\n\\n        var _this$root_store, client, modules, resetPaymentAgent, active_container, container, withdrawal_type, response_verify_email;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                resetPaymentAgent = modules.cashier.payment_agent.resetPaymentAgent;\\n                active_container = modules.cashier.general_store.active_container;\\n                container = constants.map_action[active_container];\\n\\n                if (!(this.is_button_clicked || !client.email)) {\\n                  _context.next = 6;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 6:\\n                this.error.setErrorMessage('');\\n                this.setIsButtonClicked(true);\\n                withdrawal_type = container === 'payment_agent_withdraw' ? 'paymentagent_withdraw' : 'payment_withdraw';\\n                _context.next = 11;\\n                return this.WS.verifyEmail(client.email, withdrawal_type);\\n\\n              case 11:\\n                response_verify_email = _context.sent;\\n\\n                if (!response_verify_email.error) {\\n                  _context.next = 20;\\n                  break;\\n                }\\n\\n                if (!['PaymentAgentJustification', 'PaymentAgentWithdrawSameMethod', 'PaymentAgentUseOtherMethod'].includes(response_verify_email.error.code)) {\\n                  _context.next = 16;\\n                  break;\\n                }\\n\\n                this.error.setErrorMessage(response_verify_email.error, null, null);\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 16:\\n                this.clearVerification();\\n\\n                if (response_verify_email.error.code === 'PaymentAgentWithdrawError') {\\n                  this.error.setErrorMessage(response_verify_email.error, resetPaymentAgent, null);\\n                } else {\\n                  this.error.setErrorMessage(response_verify_email.error, function () {\\n                    _this2.error.setErrorMessage('', null, null);\\n                  }, null);\\n                }\\n\\n                _context.next = 22;\\n                break;\\n\\n              case 20:\\n                this.setIsEmailSent(true);\\n                this.setTimeoutVerification();\\n\\n              case 22:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function sendVerificationEmail() {\\n        return _sendVerificationEmail.apply(this, arguments);\\n      }\\n\\n      return sendVerificationEmail;\\n    }()\\n  }, {\\n    key: \\\"resendVerificationEmail\\\",\\n    value: function resendVerificationEmail() {\\n      // don't allow clicking while ongoing timeout\\n      if (this.resend_timeout < 60) {\\n        return;\\n      }\\n\\n      this.setIsButtonClicked(false);\\n      this.setCountDownResendVerification();\\n      this.sendVerificationEmail();\\n    }\\n  }, {\\n    key: \\\"setCountDownResendVerification\\\",\\n    value: function setCountDownResendVerification() {\\n      var _this3 = this;\\n\\n      this.setResendTimeout(this.resend_timeout - 1);\\n      var resend_interval = setInterval(function () {\\n        if (_this3.resend_timeout === 1) {\\n          _this3.setResendTimeout(60);\\n\\n          clearInterval(resend_interval);\\n        } else {\\n          _this3.setResendTimeout(_this3.resend_timeout - 1);\\n        }\\n      }, 1000);\\n    }\\n  }, {\\n    key: \\\"clearVerification\\\",\\n    value: function clearVerification() {\\n      var _this$root_store2 = this.root_store,\\n          client = _this$root_store2.client,\\n          modules = _this$root_store2.modules;\\n      var active_container = modules.cashier.general_store.active_container;\\n      var container = constants.map_action[active_container];\\n      this.clearTimeoutVerification();\\n      this.setIsButtonClicked(false);\\n      this.setIsEmailSent(false);\\n      this.setIsResendClicked(false);\\n      this.setResendTimeout(60);\\n      this.error.setErrorMessage('', null, null);\\n      client.setVerificationCode('', container);\\n    }\\n  }]);\\n\\n  return VerificationStore;\\n}(), (verification_store_descriptor = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_button_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor2 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"timeout_button\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), verification_store_descriptor3 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), verification_store_descriptor4 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_email_sent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor5 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"is_resend_clicked\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), verification_store_descriptor6 = verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"resend_timeout\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 60;\\n  }\\n}), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsButtonClicked\\\", [verification_store_dec], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsButtonClicked\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setTimeoutButton\\\", [verification_store_dec2], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setTimeoutButton\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsEmailSent\\\", [verification_store_dec3], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsEmailSent\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setIsResendClicked\\\", [verification_store_dec4], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setIsResendClicked\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setResendTimeout\\\", [verification_store_dec5], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setResendTimeout\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"setTimeoutVerification\\\", [verification_store_dec6], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"setTimeoutVerification\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"sendVerificationEmail\\\", [verification_store_dec7], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"sendVerificationEmail\\\"), verification_store_class.prototype), verification_store_applyDecoratedDescriptor(verification_store_class.prototype, \\\"resendVerificationEmail\\\", [verification_store_dec8], Object.getOwnPropertyDescriptor(verification_store_class.prototype, \\\"resendVerificationEmail\\\"), verification_store_class.prototype)), verification_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/payment-agent-store.js\\nvar payment_agent_store_dec, payment_agent_store_dec2, payment_agent_store_dec3, payment_agent_store_dec4, payment_agent_store_dec5, payment_agent_store_dec6, payment_agent_store_dec7, payment_agent_store_dec8, payment_agent_store_dec9, payment_agent_store_dec10, payment_agent_store_dec11, payment_agent_store_dec12, payment_agent_store_dec13, payment_agent_store_dec14, payment_agent_store_dec15, payment_agent_store_dec16, payment_agent_store_dec17, payment_agent_store_dec18, payment_agent_store_dec19, payment_agent_store_dec20, payment_agent_store_dec21, payment_agent_store_dec22, payment_agent_store_dec23, payment_agent_store_dec24, payment_agent_store_class, payment_agent_store_descriptor, payment_agent_store_descriptor2, payment_agent_store_descriptor3, payment_agent_store_descriptor4, payment_agent_store_descriptor5, payment_agent_store_descriptor6, payment_agent_store_descriptor7, payment_agent_store_descriptor8, payment_agent_store_descriptor9, payment_agent_store_descriptor10, payment_agent_store_descriptor11, payment_agent_store_descriptor12, payment_agent_store_descriptor13, payment_agent_store_descriptor14, payment_agent_store_descriptor15, payment_agent_store_descriptor16, _descriptor17;\\n\\nfunction payment_agent_store_ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\\n\\nfunction payment_agent_store_objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? payment_agent_store_ownKeys(Object(source), !0).forEach(function (key) { payment_agent_store_defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : payment_agent_store_ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\\n\\nfunction payment_agent_store_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\\n\\nfunction payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction payment_agent_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { payment_agent_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction payment_agent_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction payment_agent_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction payment_agent_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction payment_agent_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) payment_agent_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) payment_agent_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction payment_agent_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction payment_agent_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\nvar PaymentAgentStore = (payment_agent_store_dec = external_mobx_.action.bound, payment_agent_store_dec2 = external_mobx_.action.bound, payment_agent_store_dec3 = external_mobx_.action.bound, payment_agent_store_dec4 = external_mobx_.action.bound, payment_agent_store_dec5 = external_mobx_.action.bound, payment_agent_store_dec6 = external_mobx_.action.bound, payment_agent_store_dec7 = external_mobx_.action.bound, payment_agent_store_dec8 = external_mobx_.action.bound, payment_agent_store_dec9 = external_mobx_.action.bound, payment_agent_store_dec10 = external_mobx_.action.bound, payment_agent_store_dec11 = external_mobx_.action.bound, payment_agent_store_dec12 = external_mobx_.action.bound, payment_agent_store_dec13 = external_mobx_.action.bound, payment_agent_store_dec14 = external_mobx_.action.bound, payment_agent_store_dec15 = external_mobx_.action.bound, payment_agent_store_dec16 = external_mobx_.action.bound, payment_agent_store_dec17 = external_mobx_.action.bound, payment_agent_store_dec18 = external_mobx_.action.bound, payment_agent_store_dec19 = external_mobx_.action.bound, payment_agent_store_dec20 = external_mobx_.action.bound, payment_agent_store_dec21 = external_mobx_.action.bound, payment_agent_store_dec22 = external_mobx_.action.bound, payment_agent_store_dec23 = external_mobx_.action.bound, payment_agent_store_dec24 = external_mobx_.action.bound, (payment_agent_store_class = /*#__PURE__*/function () {\\n  function PaymentAgentStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    payment_agent_store_classCallCheck(this, PaymentAgentStore);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"list\\\", payment_agent_store_descriptor, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"agents\\\", payment_agent_store_descriptor2, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"container\\\", payment_agent_store_descriptor3, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"error\\\", payment_agent_store_descriptor4, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"filtered_list\\\", payment_agent_store_descriptor5, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_name_selected\\\", payment_agent_store_descriptor6, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_withdraw\\\", payment_agent_store_descriptor7, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_try_withdraw_successful\\\", payment_agent_store_descriptor8, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"is_withdraw_successful\\\", payment_agent_store_descriptor9, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"confirm\\\", payment_agent_store_descriptor10, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"receipt\\\", payment_agent_store_descriptor11, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"selected_bank\\\", payment_agent_store_descriptor12, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"supported_banks\\\", payment_agent_store_descriptor13, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"verification\\\", payment_agent_store_descriptor14, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"active_tab_index\\\", payment_agent_store_descriptor15, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"all_payment_agent_list\\\", payment_agent_store_descriptor16, this);\\n\\n    payment_agent_store_initializerDefineProperty(this, \\\"resetPaymentAgent\\\", _descriptor17, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  payment_agent_store_createClass(PaymentAgentStore, [{\\n    key: \\\"setActiveTabIndex\\\",\\n    value: function setActiveTabIndex(index) {\\n      this.active_tab_index = index;\\n    }\\n  }, {\\n    key: \\\"setActiveTab\\\",\\n    value: function setActiveTab(index) {\\n      this.setActiveTabIndex(index);\\n\\n      if (index === 1) {\\n        this.verification.sendVerificationEmail();\\n      }\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible\\\",\\n    get: function get() {\\n      return !!(this.filtered_list.length || this.agents.length);\\n    }\\n  }, {\\n    key: \\\"getPaymentAgentList\\\",\\n    value: function () {\\n      var _getPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie, residence, currency;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                _this$root_store$clie = this.root_store.client, residence = _this$root_store$clie.residence, currency = _this$root_store$clie.currency;\\n                return _context.abrupt(\\\"return\\\", this.WS.authorized.paymentAgentList(residence, currency));\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function getPaymentAgentList() {\\n        return _getPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getPaymentAgentDetails\\\",\\n    value: function () {\\n      var _getPaymentAgentDetails = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _yield$this$WS$author, paymentagent_details;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return this.WS.authorized.paymentAgentDetails();\\n\\n              case 2:\\n                _yield$this$WS$author = _context2.sent;\\n                paymentagent_details = _yield$this$WS$author.paymentagent_details;\\n                return _context2.abrupt(\\\"return\\\", paymentagent_details);\\n\\n              case 5:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function getPaymentAgentDetails() {\\n        return _getPaymentAgentDetails.apply(this, arguments);\\n      }\\n\\n      return getPaymentAgentDetails;\\n    }()\\n  }, {\\n    key: \\\"addSupportedBank\\\",\\n    value: function addSupportedBank(bank) {\\n      var supported_bank_exists = this.supported_banks.find(function (supported_bank) {\\n        return supported_bank.value === bank.toLowerCase();\\n      });\\n\\n      if (!supported_bank_exists) {\\n        this.supported_banks.push({\\n          text: bank,\\n          value: bank.toLowerCase()\\n        });\\n      }\\n    }\\n  }, {\\n    key: \\\"clearSuppertedBanks\\\",\\n    value: function clearSuppertedBanks() {\\n      this.supported_banks = [];\\n    }\\n  }, {\\n    key: \\\"sortSupportedBanks\\\",\\n    value: function sortSupportedBanks() {\\n      // sort supported banks alphabetically by value, the option 'All payment agents' with value 0 should be on top\\n      this.supported_banks.replace(this.supported_banks.slice().sort(function (a, b) {\\n        if (a.value < b.value) {\\n          return -1;\\n        }\\n\\n        if (a.value > b.value) {\\n          return 1;\\n        }\\n\\n        return 0;\\n      }));\\n    }\\n  }, {\\n    key: \\\"setList\\\",\\n    value: function setList(pa_list) {\\n      this.list.push(pa_list);\\n    }\\n  }, {\\n    key: \\\"clearList\\\",\\n    value: function clearList() {\\n      this.list = [];\\n    }\\n  }, {\\n    key: \\\"setPaymentAgentList\\\",\\n    value: function () {\\n      var _setPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(pa_list) {\\n        var _this = this;\\n\\n        var payment_agent_list, _payment_agent_list$p;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.t0 = pa_list;\\n\\n                if (_context3.t0) {\\n                  _context3.next = 5;\\n                  break;\\n                }\\n\\n                _context3.next = 4;\\n                return this.getPaymentAgentList();\\n\\n              case 4:\\n                _context3.t0 = _context3.sent;\\n\\n              case 5:\\n                payment_agent_list = _context3.t0;\\n                this.clearList();\\n                this.clearSuppertedBanks(); // TODO: Once telephone, url and supported_banks removed from paymentagent_list.list we can remove them and just use the plural ones\\n\\n                try {\\n                  (_payment_agent_list$p = payment_agent_list.paymentagent_list) === null || _payment_agent_list$p === void 0 ? void 0 : _payment_agent_list$p.list.forEach(function (payment_agent) {\\n                    _this.setList({\\n                      email: payment_agent.email,\\n                      phones: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.phone_numbers) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.telephone),\\n                      name: payment_agent.name,\\n                      supported_banks: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_payment_methods) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_banks),\\n                      urls: (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.urls) || (payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.url)\\n                    });\\n\\n                    if (payment_agent.supported_banks) {\\n                      var supported_banks_array = payment_agent !== null && payment_agent !== void 0 && payment_agent.supported_payment_methods ? payment_agent.supported_payment_methods.map(function (bank) {\\n                        return bank.payment_method;\\n                      }) : payment_agent.supported_banks.split(',');\\n                      supported_banks_array.forEach(function (bank) {\\n                        _this.addSupportedBank(bank);\\n                      });\\n                    }\\n                  });\\n                } catch (e) {\\n                  // eslint-disable-next-line no-console\\n                  console.error(e);\\n                }\\n\\n                this.sortSupportedBanks();\\n\\n              case 10:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function setPaymentAgentList(_x) {\\n        return _setPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return setPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"filterPaymentAgentList\\\",\\n    value: function filterPaymentAgentList(bank) {\\n      var _this2 = this;\\n\\n      var common = this.root_store.common;\\n\\n      if (bank) {\\n        this.filtered_list = [];\\n        this.list.forEach(function (payment_agent) {\\n          var supported_banks = payment_agent === null || payment_agent === void 0 ? void 0 : payment_agent.supported_banks;\\n\\n          if (supported_banks) {\\n            var is_string = typeof supported_banks === 'string';\\n            var bank_index = is_string ? supported_banks.toLowerCase().split(',').indexOf(bank) : supported_banks.map(function (x) {\\n              return x.payment_method.toLowerCase();\\n            }).indexOf(bank);\\n            if (bank_index !== -1) _this2.filtered_list.push(payment_agent);\\n          }\\n        });\\n      } else {\\n        this.filtered_list = this.list;\\n      }\\n\\n      if (!this.is_payment_agent_visible && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n        common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n    }\\n  }, {\\n    key: \\\"onChangePaymentMethod\\\",\\n    value: function onChangePaymentMethod(_ref2) {\\n      var target = _ref2.target;\\n      var value = target.value === '0' ? parseInt(target.value) : target.value;\\n      this.selected_bank = value;\\n      this.filterPaymentAgentList(value);\\n    }\\n  }, {\\n    key: \\\"setIsWithdraw\\\",\\n    value: function setIsWithdraw() {\\n      var is_withdraw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.is_withdraw;\\n      this.is_withdraw = is_withdraw;\\n    }\\n  }, {\\n    key: \\\"setIsTryWithdrawSuccessful\\\",\\n    value: function setIsTryWithdrawSuccessful(is_try_withdraw_successful) {\\n      this.error.setErrorMessage('');\\n      this.is_try_withdraw_successful = is_try_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setIsWithdrawSuccessful\\\",\\n    value: function setIsWithdrawSuccessful(is_withdraw_successful) {\\n      this.is_withdraw_successful = is_withdraw_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmation\\\",\\n    value: function setConfirmation(_ref3) {\\n      var amount = _ref3.amount,\\n          currency = _ref3.currency,\\n          loginid = _ref3.loginid,\\n          payment_agent_name = _ref3.payment_agent_name;\\n      this.confirm = {\\n        amount: amount,\\n        currency: currency,\\n        loginid: loginid,\\n        payment_agent_name: payment_agent_name\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceipt\\\",\\n    value: function setReceipt(_ref4) {\\n      var amount_transferred = _ref4.amount_transferred,\\n          payment_agent_email = _ref4.payment_agent_email,\\n          payment_agent_id = _ref4.payment_agent_id,\\n          payment_agent_name = _ref4.payment_agent_name,\\n          payment_agent_phone = _ref4.payment_agent_phone,\\n          payment_agent_url = _ref4.payment_agent_url;\\n      this.receipt = {\\n        amount_transferred: amount_transferred,\\n        payment_agent_email: payment_agent_email,\\n        payment_agent_id: payment_agent_id,\\n        payment_agent_name: payment_agent_name,\\n        payment_agent_phone: payment_agent_phone,\\n        payment_agent_url: payment_agent_url\\n      };\\n    }\\n  }, {\\n    key: \\\"addPaymentAgent\\\",\\n    value: function addPaymentAgent(payment_agent) {\\n      this.agents.push({\\n        text: payment_agent.name,\\n        value: payment_agent.paymentagent_loginid,\\n        max_withdrawal: payment_agent.max_withdrawal,\\n        min_withdrawal: payment_agent.min_withdrawal,\\n        email: payment_agent.email,\\n        phone: payment_agent.telephone,\\n        url: payment_agent.url\\n      });\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _onMountPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {\\n        var _this3 = this;\\n\\n        var _this$root_store, common, modules, _modules$cashier$gene, setLoading, onMountCommon, payment_agent_list;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _this$root_store = this.root_store, common = _this$root_store.common, modules = _this$root_store.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, setLoading = _modules$cashier$gene.setLoading, onMountCommon = _modules$cashier$gene.onMountCommon;\\n                setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentWithdraw;\\n                onMountCommon();\\n                this.setIsWithdraw(true);\\n                this.setIsWithdrawSuccessful(false);\\n                this.setReceipt({});\\n\\n                if (this.agents.length) {\\n                  _context4.next = 14;\\n                  break;\\n                }\\n\\n                _context4.next = 11;\\n                return this.getPaymentAgentList();\\n\\n              case 11:\\n                payment_agent_list = _context4.sent;\\n                payment_agent_list.paymentagent_list.list.forEach(function (payment_agent) {\\n                  _this3.addPaymentAgent(payment_agent);\\n                });\\n\\n                if (!payment_agent_list.paymentagent_list.list.length && window.location.pathname.endsWith(shared_.routes.cashier_pa)) {\\n                  common.routeTo(shared_.routes.cashier_deposit);\\n                }\\n\\n              case 14:\\n                setLoading(false);\\n\\n              case 15:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function onMountPaymentAgentWithdraw() {\\n        return _onMountPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"requestTryPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestTryPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref5) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                loginid = _ref5.loginid, currency = _ref5.currency, amount = _ref5.amount, verification_code = _ref5.verification_code;\\n                this.error.setErrorMessage('');\\n                _context5.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context5.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 2) {\\n                  selected_agent = this.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setConfirmation(payment_agent_store_objectSpread({\\n                    amount: amount,\\n                    currency: currency,\\n                    loginid: loginid\\n                  }, selected_agent && {\\n                    payment_agent_name: selected_agent.text\\n                  }));\\n                  this.setIsTryWithdrawSuccessful(true);\\n                } else {\\n                  this.error.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function requestTryPaymentAgentWithdraw(_x2) {\\n        return _requestTryPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestTryPaymentAgentWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountPaymentAgentList\\\",\\n    value: function () {\\n      var _onMountPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6() {\\n        var _this$root_store$modu, setLoading, onMountCommon;\\n\\n        return regeneratorRuntime.wrap(function _callee6$(_context6) {\\n          while (1) {\\n            switch (_context6.prev = _context6.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier.general_store, setLoading = _this$root_store$modu.setLoading, onMountCommon = _this$root_store$modu.onMountCommon;\\n                setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentList;\\n                _context6.next = 5;\\n                return onMountCommon();\\n\\n              case 5:\\n                _context6.next = 7;\\n                return this.getPaymentAgentList();\\n\\n              case 7:\\n                setLoading(false);\\n\\n              case 8:\\n              case \\\"end\\\":\\n                return _context6.stop();\\n            }\\n          }\\n        }, _callee6, this);\\n      }));\\n\\n      function onMountPaymentAgentList() {\\n        return _onMountPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"getAllPaymentAgentList\\\",\\n    value: function () {\\n      var _getAllPaymentAgentList = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7() {\\n        return regeneratorRuntime.wrap(function _callee7$(_context7) {\\n          while (1) {\\n            switch (_context7.prev = _context7.next) {\\n              case 0:\\n                _context7.next = 2;\\n                return this.WS.wait('get_settings');\\n\\n              case 2:\\n                return _context7.abrupt(\\\"return\\\", this.WS.allPaymentAgentList(this.root_store.client.residence));\\n\\n              case 3:\\n              case \\\"end\\\":\\n                return _context7.stop();\\n            }\\n          }\\n        }, _callee7, this);\\n      }));\\n\\n      function getAllPaymentAgentList() {\\n        return _getAllPaymentAgentList.apply(this, arguments);\\n      }\\n\\n      return getAllPaymentAgentList;\\n    }()\\n  }, {\\n    key: \\\"setAllPaymentAgentList\\\",\\n    value: function setAllPaymentAgentList(list) {\\n      this.all_payment_agent_list = list;\\n    }\\n  }, {\\n    key: \\\"is_payment_agent_visible_in_onboarding\\\",\\n    get: function get() {\\n      var _this$all_payment_age, _this$all_payment_age2, _this$all_payment_age3;\\n\\n      return !!((_this$all_payment_age = this.all_payment_agent_list) !== null && _this$all_payment_age !== void 0 && (_this$all_payment_age2 = _this$all_payment_age.paymentagent_list) !== null && _this$all_payment_age2 !== void 0 && (_this$all_payment_age3 = _this$all_payment_age2.list) !== null && _this$all_payment_age3 !== void 0 && _this$all_payment_age3.length);\\n    }\\n  }, {\\n    key: \\\"requestPaymentAgentWithdraw\\\",\\n    value: function () {\\n      var _requestPaymentAgentWithdraw = payment_agent_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8(_ref6) {\\n        var loginid, currency, amount, verification_code, payment_agent_withdraw, selected_agent;\\n        return regeneratorRuntime.wrap(function _callee8$(_context8) {\\n          while (1) {\\n            switch (_context8.prev = _context8.next) {\\n              case 0:\\n                loginid = _ref6.loginid, currency = _ref6.currency, amount = _ref6.amount, verification_code = _ref6.verification_code;\\n                this.error.setErrorMessage('');\\n                _context8.next = 4;\\n                return this.WS.authorized.paymentAgentWithdraw({\\n                  loginid: loginid,\\n                  currency: currency,\\n                  amount: amount,\\n                  verification_code: verification_code\\n                });\\n\\n              case 4:\\n                payment_agent_withdraw = _context8.sent;\\n\\n                if (+payment_agent_withdraw.paymentagent_withdraw === 1) {\\n                  selected_agent = this.agents.find(function (agent) {\\n                    return agent.value === loginid;\\n                  });\\n                  this.setReceipt(payment_agent_store_objectSpread(payment_agent_store_objectSpread({\\n                    amount_transferred: (0,shared_.formatMoney)(currency, amount, true)\\n                  }, selected_agent && {\\n                    payment_agent_email: selected_agent.email,\\n                    payment_agent_id: selected_agent.value,\\n                    payment_agent_name: selected_agent.text,\\n                    payment_agent_phone: selected_agent.phone,\\n                    payment_agent_url: selected_agent.url\\n                  }), !selected_agent && {\\n                    payment_agent_id: loginid\\n                  }));\\n                  this.setIsWithdrawSuccessful(true);\\n                  this.setIsTryWithdrawSuccessful(false);\\n                  this.setConfirmation({});\\n                } else {\\n                  this.error.setErrorMessage(payment_agent_withdraw.error, this.resetPaymentAgent);\\n                }\\n\\n              case 6:\\n              case \\\"end\\\":\\n                return _context8.stop();\\n            }\\n          }\\n        }, _callee8, this);\\n      }));\\n\\n      function requestPaymentAgentWithdraw(_x3) {\\n        return _requestPaymentAgentWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestPaymentAgentWithdraw;\\n    }()\\n  }]);\\n\\n  return PaymentAgentStore;\\n}(), (payment_agent_store_descriptor = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor2 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"agents\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor3 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.payment_agent;\\n  }\\n}), payment_agent_store_descriptor4 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), payment_agent_store_descriptor5 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"filtered_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor6 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_name_selected\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return true;\\n  }\\n}), payment_agent_store_descriptor7 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_withdraw\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor8 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_try_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor9 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_withdraw_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_store_descriptor10 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_store_descriptor11 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_store_descriptor12 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"selected_bank\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), payment_agent_store_descriptor13 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"supported_banks\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_descriptor14 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new VerificationStore({\\n      root_store: this.root_store,\\n      WS: this.WS\\n    });\\n  }\\n}), payment_agent_store_descriptor15 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"active_tab_index\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), payment_agent_store_descriptor16 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"all_payment_agent_list\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setActiveTabIndex\\\", [payment_agent_store_dec], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setActiveTabIndex\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setActiveTab\\\", [payment_agent_store_dec2], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setActiveTab\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentList\\\", [payment_agent_store_dec3], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentDetails\\\", [payment_agent_store_dec4], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"getPaymentAgentDetails\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"addSupportedBank\\\", [payment_agent_store_dec5], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"addSupportedBank\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"clearSuppertedBanks\\\", [payment_agent_store_dec6], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"clearSuppertedBanks\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"sortSupportedBanks\\\", [payment_agent_store_dec7], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"sortSupportedBanks\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setList\\\", [payment_agent_store_dec8], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"clearList\\\", [payment_agent_store_dec9], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"clearList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setPaymentAgentList\\\", [payment_agent_store_dec10], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"filterPaymentAgentList\\\", [payment_agent_store_dec11], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"filterPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onChangePaymentMethod\\\", [payment_agent_store_dec12], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onChangePaymentMethod\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdraw\\\", [payment_agent_store_dec13], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdraw\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsTryWithdrawSuccessful\\\", [payment_agent_store_dec14], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsTryWithdrawSuccessful\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdrawSuccessful\\\", [payment_agent_store_dec15], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setIsWithdrawSuccessful\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setConfirmation\\\", [payment_agent_store_dec16], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setConfirmation\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setReceipt\\\", [payment_agent_store_dec17], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setReceipt\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"addPaymentAgent\\\", [payment_agent_store_dec18], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"addPaymentAgent\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentWithdraw\\\", [payment_agent_store_dec19], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"requestTryPaymentAgentWithdraw\\\", [payment_agent_store_dec20], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"requestTryPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype), _descriptor17 = payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"resetPaymentAgent\\\", [payment_agent_store_dec21], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this4 = this;\\n\\n    return function () {\\n      _this4.error.setErrorMessage('');\\n\\n      _this4.setIsWithdraw(false);\\n\\n      _this4.verification.clearVerification();\\n\\n      _this4.setActiveTabIndex(0);\\n    };\\n  }\\n}), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentList\\\", [payment_agent_store_dec22], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"onMountPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"setAllPaymentAgentList\\\", [payment_agent_store_dec23], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"setAllPaymentAgentList\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible_in_onboarding\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"is_payment_agent_visible_in_onboarding\\\"), payment_agent_store_class.prototype), payment_agent_store_applyDecoratedDescriptor(payment_agent_store_class.prototype, \\\"requestPaymentAgentWithdraw\\\", [payment_agent_store_dec24], Object.getOwnPropertyDescriptor(payment_agent_store_class.prototype, \\\"requestPaymentAgentWithdraw\\\"), payment_agent_store_class.prototype)), payment_agent_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/payment-agent-transfer-store.js\\nvar payment_agent_transfer_store_dec, payment_agent_transfer_store_dec2, payment_agent_transfer_store_dec3, payment_agent_transfer_store_dec4, payment_agent_transfer_store_dec5, payment_agent_transfer_store_dec6, payment_agent_transfer_store_dec7, payment_agent_transfer_store_dec8, payment_agent_transfer_store_dec9, payment_agent_transfer_store_dec10, payment_agent_transfer_store_class, payment_agent_transfer_store_descriptor, payment_agent_transfer_store_descriptor2, payment_agent_transfer_store_descriptor3, payment_agent_transfer_store_descriptor4, payment_agent_transfer_store_descriptor5, payment_agent_transfer_store_descriptor6, payment_agent_transfer_store_descriptor7, payment_agent_transfer_store_descriptor8, payment_agent_transfer_store_descriptor9, payment_agent_transfer_store_descriptor10, payment_agent_transfer_store_descriptor11;\\n\\nfunction payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction payment_agent_transfer_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { payment_agent_transfer_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction payment_agent_transfer_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction payment_agent_transfer_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction payment_agent_transfer_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction payment_agent_transfer_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) payment_agent_transfer_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) payment_agent_transfer_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction payment_agent_transfer_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction payment_agent_transfer_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\nvar PaymentAgentTransferStore = (payment_agent_transfer_store_dec = external_mobx_.action.bound, payment_agent_transfer_store_dec2 = external_mobx_.action.bound, payment_agent_transfer_store_dec3 = external_mobx_.action.bound, payment_agent_transfer_store_dec4 = external_mobx_.action.bound, payment_agent_transfer_store_dec5 = external_mobx_.action.bound, payment_agent_transfer_store_dec6 = external_mobx_.action.bound, payment_agent_transfer_store_dec7 = external_mobx_.action.bound, payment_agent_transfer_store_dec8 = external_mobx_.action.bound, payment_agent_transfer_store_dec9 = external_mobx_.action.bound, payment_agent_transfer_store_dec10 = external_mobx_.action.bound, (payment_agent_transfer_store_class = /*#__PURE__*/function () {\\n  function PaymentAgentTransferStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    payment_agent_transfer_store_classCallCheck(this, PaymentAgentTransferStore);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"container\\\", payment_agent_transfer_store_descriptor, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"error\\\", payment_agent_transfer_store_descriptor2, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_payment_agent\\\", payment_agent_transfer_store_descriptor3, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_try_transfer_successful\\\", payment_agent_transfer_store_descriptor4, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"is_transfer_successful\\\", payment_agent_transfer_store_descriptor5, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"confirm\\\", payment_agent_transfer_store_descriptor6, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"receipt\\\", payment_agent_transfer_store_descriptor7, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"transfer_limit\\\", payment_agent_transfer_store_descriptor8, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"requestTryPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor9, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"requestPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor10, this);\\n\\n    payment_agent_transfer_store_initializerDefineProperty(this, \\\"resetPaymentAgentTransfer\\\", payment_agent_transfer_store_descriptor11, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  payment_agent_transfer_store_createClass(PaymentAgentTransferStore, [{\\n    key: \\\"is_payment_agent_transfer_visible\\\",\\n    get: function get() {\\n      return this.is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"checkIsPaymentAgent\\\",\\n    value: function () {\\n      var _checkIsPaymentAgent = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _get_settings$is_auth;\\n\\n        var get_settings;\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _context.next = 2;\\n                return this.WS.authorized.storage.getSettings();\\n\\n              case 2:\\n                get_settings = _context.sent.get_settings;\\n                this.setIsPaymentAgent((_get_settings$is_auth = get_settings === null || get_settings === void 0 ? void 0 : get_settings.is_authenticated_payment_agent) !== null && _get_settings$is_auth !== void 0 ? _get_settings$is_auth : false);\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function checkIsPaymentAgent() {\\n        return _checkIsPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return checkIsPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setIsPaymentAgent\\\",\\n    value: function setIsPaymentAgent(is_payment_agent) {\\n      if (!is_payment_agent && window.location.pathname.endsWith(shared_.routes.cashier_pa_transfer)) {\\n        this.root_store.common.routeTo(shared_.routes.cashier_deposit);\\n      }\\n\\n      this.is_payment_agent = !!is_payment_agent;\\n    }\\n  }, {\\n    key: \\\"setIsTryTransferSuccessful\\\",\\n    value: function setIsTryTransferSuccessful(is_try_transfer_successful) {\\n      this.error.setErrorMessage('');\\n      this.is_try_transfer_successful = is_try_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setIsTransferSuccessful\\\",\\n    value: function setIsTransferSuccessful(is_transfer_successful) {\\n      this.is_transfer_successful = is_transfer_successful;\\n    }\\n  }, {\\n    key: \\\"setConfirmationPaymentAgentTransfer\\\",\\n    value: function setConfirmationPaymentAgentTransfer(_ref2) {\\n      var amount = _ref2.amount,\\n          client_id = _ref2.client_id,\\n          client_name = _ref2.client_name,\\n          description = _ref2.description;\\n      this.confirm = {\\n        amount: amount,\\n        client_id: client_id,\\n        client_name: client_name,\\n        description: description\\n      };\\n    }\\n  }, {\\n    key: \\\"setReceiptPaymentAgentTransfer\\\",\\n    value: function setReceiptPaymentAgentTransfer(_ref3) {\\n      var amount_transferred = _ref3.amount_transferred,\\n          client_id = _ref3.client_id,\\n          client_name = _ref3.client_name;\\n      this.receipt = {\\n        amount_transferred: amount_transferred,\\n        client_id: client_id,\\n        client_name: client_name\\n      };\\n    }\\n  }, {\\n    key: \\\"getCurrentPaymentAgent\\\",\\n    value: function () {\\n      var _getCurrentPaymentAgent = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response_payment_agent) {\\n        var _this$root_store, client, modules, payment_agent_listed, current_payment_agent;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                payment_agent_listed = response_payment_agent.paymentagent_list.list.find(function (agent) {\\n                  return agent.paymentagent_loginid === client.loginid;\\n                });\\n                _context2.t0 = payment_agent_listed;\\n\\n                if (_context2.t0) {\\n                  _context2.next = 7;\\n                  break;\\n                }\\n\\n                _context2.next = 6;\\n                return modules.cashier.payment_agent.getPaymentAgentDetails();\\n\\n              case 6:\\n                _context2.t0 = _context2.sent;\\n\\n              case 7:\\n                current_payment_agent = _context2.t0;\\n                return _context2.abrupt(\\\"return\\\", current_payment_agent !== null && current_payment_agent !== void 0 ? current_payment_agent : {});\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function getCurrentPaymentAgent(_x) {\\n        return _getCurrentPaymentAgent.apply(this, arguments);\\n      }\\n\\n      return getCurrentPaymentAgent;\\n    }()\\n  }, {\\n    key: \\\"setMinMaxPaymentAgentTransfer\\\",\\n    value: function setMinMaxPaymentAgentTransfer(_ref4) {\\n      var min_withdrawal = _ref4.min_withdrawal,\\n          max_withdrawal = _ref4.max_withdrawal;\\n      this.transfer_limit = {\\n        min: min_withdrawal,\\n        max: max_withdrawal\\n      };\\n    }\\n  }, {\\n    key: \\\"onMountPaymentAgentTransfer\\\",\\n    value: function () {\\n      var _onMountPaymentAgentTransfer = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var _this$root_store$modu, general_store, payment_agent, response, current_payment_agent;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _this$root_store$modu = this.root_store.modules.cashier, general_store = _this$root_store$modu.general_store, payment_agent = _this$root_store$modu.payment_agent;\\n                general_store.setLoading(true);\\n                this.onRemount = this.onMountPaymentAgentTransfer;\\n                _context3.next = 5;\\n                return general_store.onMountCommon();\\n\\n              case 5:\\n                if (this.transfer_limit.min_withdrawal) {\\n                  _context3.next = 13;\\n                  break;\\n                }\\n\\n                _context3.next = 8;\\n                return payment_agent.getPaymentAgentList();\\n\\n              case 8:\\n                response = _context3.sent;\\n                _context3.next = 11;\\n                return this.getCurrentPaymentAgent(response);\\n\\n              case 11:\\n                current_payment_agent = _context3.sent;\\n                this.setMinMaxPaymentAgentTransfer(current_payment_agent);\\n\\n              case 13:\\n                general_store.setLoading(false);\\n\\n              case 14:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onMountPaymentAgentTransfer() {\\n        return _onMountPaymentAgentTransfer.apply(this, arguments);\\n      }\\n\\n      return onMountPaymentAgentTransfer;\\n    }()\\n  }]);\\n\\n  return PaymentAgentTransferStore;\\n}(), (payment_agent_transfer_store_descriptor = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.payment_agent_transfer;\\n  }\\n}), payment_agent_transfer_store_descriptor2 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), payment_agent_transfer_store_descriptor3 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor4 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_try_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor5 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_transfer_successful\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), payment_agent_transfer_store_descriptor6 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"confirm\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_descriptor7 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"receipt\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_descriptor8 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"transfer_limit\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent_transfer_visible\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"is_payment_agent_transfer_visible\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsPaymentAgent\\\", [payment_agent_transfer_store_dec], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsPaymentAgent\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTryTransferSuccessful\\\", [payment_agent_transfer_store_dec2], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTryTransferSuccessful\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\", [payment_agent_transfer_store_dec3], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setIsTransferSuccessful\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setConfirmationPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec4], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setConfirmationPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setReceiptPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec5], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setReceiptPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"setMinMaxPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec6], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"setMinMaxPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"onMountPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec7], Object.getOwnPropertyDescriptor(payment_agent_transfer_store_class.prototype, \\\"onMountPaymentAgentTransfer\\\"), payment_agent_transfer_store_class.prototype), payment_agent_transfer_store_descriptor9 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"requestTryPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec8], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref6 = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(_ref5) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                amount = _ref5.amount, currency = _ref5.currency, description = _ref5.description, transfer_to = _ref5.transfer_to;\\n\\n                _this.error.setErrorMessage('');\\n\\n                _context4.next = 4;\\n                return _this.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to,\\n                  dry_run: 1\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context4.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 2) {\\n                  // show confirmation screen\\n                  _this.setConfirmationPaymentAgentTransfer({\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name,\\n                    amount: amount,\\n                    description: description\\n                  });\\n\\n                  _this.setIsTryTransferSuccessful(true);\\n                } else {\\n                  _this.error.setErrorMessage(payment_agent_transfer.error, _this.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context4.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4);\\n      }));\\n\\n      return function (_x2) {\\n        return _ref6.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), payment_agent_transfer_store_descriptor10 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"requestPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec9], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this2 = this;\\n\\n    return /*#__PURE__*/function () {\\n      var _ref8 = payment_agent_transfer_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5(_ref7) {\\n        var amount, currency, description, transfer_to, payment_agent_transfer;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                amount = _ref7.amount, currency = _ref7.currency, description = _ref7.description, transfer_to = _ref7.transfer_to;\\n\\n                _this2.error.setErrorMessage('');\\n\\n                _context5.next = 4;\\n                return _this2.WS.authorized.paymentAgentTransfer({\\n                  amount: amount,\\n                  currency: currency,\\n                  description: description,\\n                  transfer_to: transfer_to\\n                });\\n\\n              case 4:\\n                payment_agent_transfer = _context5.sent;\\n\\n                if (+payment_agent_transfer.paymentagent_transfer === 1) {\\n                  _this2.setReceiptPaymentAgentTransfer({\\n                    amount_transferred: amount,\\n                    client_id: transfer_to,\\n                    client_name: payment_agent_transfer.client_to_full_name\\n                  });\\n\\n                  _this2.setIsTransferSuccessful(true);\\n\\n                  _this2.setIsTryTransferSuccessful(false);\\n\\n                  _this2.setConfirmationPaymentAgentTransfer({});\\n                } else {\\n                  _this2.error.setErrorMessage(payment_agent_transfer.error, _this2.resetPaymentAgentTransfer);\\n                }\\n\\n                return _context5.abrupt(\\\"return\\\", payment_agent_transfer);\\n\\n              case 7:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5);\\n      }));\\n\\n      return function (_x3) {\\n        return _ref8.apply(this, arguments);\\n      };\\n    }();\\n  }\\n}), payment_agent_transfer_store_descriptor11 = payment_agent_transfer_store_applyDecoratedDescriptor(payment_agent_transfer_store_class.prototype, \\\"resetPaymentAgentTransfer\\\", [payment_agent_transfer_store_dec10], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    var _this3 = this;\\n\\n    return function () {\\n      _this3.setIsTransferSuccessful(false);\\n\\n      _this3.error.setErrorMessage('');\\n    };\\n  }\\n})), payment_agent_transfer_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/transaction-history-store.js\\nvar transaction_history_store_dec, transaction_history_store_dec2, transaction_history_store_dec3, transaction_history_store_dec4, transaction_history_store_dec5, transaction_history_store_dec6, transaction_history_store_dec7, transaction_history_store_dec8, transaction_history_store_dec9, transaction_history_store_dec10, transaction_history_store_dec11, transaction_history_store_dec12, transaction_history_store_dec13, transaction_history_store_dec14, transaction_history_store_dec15, transaction_history_store_dec16, transaction_history_store_dec17, transaction_history_store_dec18, transaction_history_store_class, transaction_history_store_descriptor, transaction_history_store_descriptor2, transaction_history_store_descriptor3, transaction_history_store_descriptor4, transaction_history_store_descriptor5, transaction_history_store_descriptor6, transaction_history_store_descriptor7, transaction_history_store_descriptor8;\\n\\nfunction transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction transaction_history_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { transaction_history_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction transaction_history_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction transaction_history_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction transaction_history_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction transaction_history_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) transaction_history_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) transaction_history_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction transaction_history_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction transaction_history_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\nvar TransactionHistoryStore = (transaction_history_store_dec = external_mobx_.action.bound, transaction_history_store_dec2 = external_mobx_.action.bound, transaction_history_store_dec3 = external_mobx_.action.bound, transaction_history_store_dec4 = external_mobx_.action.bound, transaction_history_store_dec5 = external_mobx_.action.bound, transaction_history_store_dec6 = external_mobx_.action.bound, transaction_history_store_dec7 = external_mobx_.action.bound, transaction_history_store_dec8 = external_mobx_.action.bound, transaction_history_store_dec9 = external_mobx_.action.bound, transaction_history_store_dec10 = external_mobx_.action.bound, transaction_history_store_dec11 = external_mobx_.action.bound, transaction_history_store_dec12 = external_mobx_.action.bound, transaction_history_store_dec13 = external_mobx_.action.bound, transaction_history_store_dec14 = external_mobx_.action.bound, transaction_history_store_dec15 = external_mobx_.action.bound, transaction_history_store_dec16 = external_mobx_.action.bound, transaction_history_store_dec17 = external_mobx_.action.bound, transaction_history_store_dec18 = external_mobx_.action.bound, (transaction_history_store_class = /*#__PURE__*/function () {\\n  function TransactionHistoryStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    transaction_history_store_classCallCheck(this, TransactionHistoryStore);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"crypto_transactions\\\", transaction_history_store_descriptor, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_cancel_modal_visible\\\", transaction_history_store_descriptor2, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_status_modal_visible\\\", transaction_history_store_descriptor3, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_crypto_transactions_visible\\\", transaction_history_store_descriptor4, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"is_loading\\\", transaction_history_store_descriptor5, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_transaction_id\\\", transaction_history_store_descriptor6, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status\\\", transaction_history_store_descriptor7, this);\\n\\n    transaction_history_store_initializerDefineProperty(this, \\\"selected_crypto_status_description\\\", transaction_history_store_descriptor8, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  transaction_history_store_createClass(TransactionHistoryStore, [{\\n    key: \\\"onMount\\\",\\n    value: function () {\\n      var _onMount = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\\n        var _this$root_store$clie, currency, switched, is_crypto;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store$clie = this.root_store.client, currency = _this$root_store$clie.currency, switched = _this$root_store$clie.switched;\\n                is_crypto = !!currency && (0,shared_.isCryptocurrency)(currency);\\n\\n                if (!(is_crypto && !switched)) {\\n                  _context.next = 9;\\n                  break;\\n                }\\n\\n                this.setLoading(true);\\n                _context.next = 6;\\n                return this.unsubscribeCryptoTransactions();\\n\\n              case 6:\\n                _context.next = 8;\\n                return this.getCryptoTransactions();\\n\\n              case 8:\\n                this.setLoading(false);\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function onMount() {\\n        return _onMount.apply(this, arguments);\\n      }\\n\\n      return onMount;\\n    }()\\n  }, {\\n    key: \\\"unsubscribeCryptoTransactions\\\",\\n    value: function () {\\n      var _unsubscribeCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\\n        var _this = this;\\n\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                _context2.next = 2;\\n                return this.WS.authorized.cashierPayments({\\n                  provider: 'crypto',\\n                  transaction_type: 'all'\\n                }).then(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this.setCryptoTransactionsHistory(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function unsubscribeCryptoTransactions() {\\n        return _unsubscribeCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return unsubscribeCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"getCryptoTransactions\\\",\\n    value: function () {\\n      var _getCryptoTransactions = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {\\n        var _this2 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _context3.next = 2;\\n                return this.WS.subscribeCashierPayments(function (response) {\\n                  if (!response.error) {\\n                    var crypto = response.cashier_payments.crypto;\\n\\n                    _this2.updateCryptoTransactions(crypto);\\n                  }\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function getCryptoTransactions() {\\n        return _getCryptoTransactions.apply(this, arguments);\\n      }\\n\\n      return getCryptoTransactions;\\n    }()\\n  }, {\\n    key: \\\"setCryptoTransactionsHistory\\\",\\n    value: function setCryptoTransactionsHistory(transactions) {\\n      this.crypto_transactions = transactions;\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"updateCryptoTransactions\\\",\\n    value: function updateCryptoTransactions(transactions) {\\n      var _this3 = this;\\n\\n      transactions.forEach(function (transaction) {\\n        var index = _this3.crypto_transactions.findIndex(function (crypto) {\\n          return crypto.id === transaction.id;\\n        });\\n\\n        if (index === -1) {\\n          _this3.crypto_transactions.push(transaction);\\n        } else {\\n          Object.assign(_this3.crypto_transactions[index], transaction);\\n        }\\n      });\\n      this.sortCryptoTransactions();\\n    }\\n  }, {\\n    key: \\\"sortCryptoTransactions\\\",\\n    value: function sortCryptoTransactions() {\\n      this.crypto_transactions.replace(this.crypto_transactions.slice().sort(function (a, b) {\\n        return b.submit_date - a.submit_date;\\n      }));\\n    }\\n  }, {\\n    key: \\\"cancelCryptoTransaction\\\",\\n    value: function () {\\n      var _cancelCryptoTransaction = transaction_history_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(transaction_id) {\\n        var _this4 = this;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _context4.next = 2;\\n                return this.WS.cancelCryptoTransaction(transaction_id).then(function (response) {\\n                  if (!response.error) {\\n                    _this4.setSelectedCryptoTransactionId('');\\n\\n                    _this4.setIsCryptoTransactionsCancelModalVisible(false);\\n\\n                    return Promise.resolve(response);\\n                  }\\n\\n                  return Promise.reject(response.error);\\n                });\\n\\n              case 2:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function cancelCryptoTransaction(_x) {\\n        return _cancelCryptoTransaction.apply(this, arguments);\\n      }\\n\\n      return cancelCryptoTransaction;\\n    }()\\n  }, {\\n    key: \\\"setSelectedCryptoTransactionId\\\",\\n    value: function setSelectedCryptoTransactionId(id) {\\n      this.selected_crypto_transaction_id = id;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsCancelModalVisible\\\",\\n    value: function setIsCryptoTransactionsCancelModalVisible(is_visible) {\\n      this.is_crypto_transactions_cancel_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsCancelModal\\\",\\n    value: function showCryptoTransactionsCancelModal(id) {\\n      this.setSelectedCryptoTransactionId(id);\\n      this.setIsCryptoTransactionsCancelModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsCancelModal\\\",\\n    value: function hideCryptoTransactionsCancelModal() {\\n      this.setSelectedCryptoTransactionId('');\\n      this.setIsCryptoTransactionsCancelModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatus\\\",\\n    value: function setSelectedCryptoStatus(status) {\\n      this.selected_crypto_status = status;\\n    }\\n  }, {\\n    key: \\\"setSelectedCryptoStatusDescription\\\",\\n    value: function setSelectedCryptoStatusDescription(description) {\\n      this.selected_crypto_status_description = description;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsStatusModalVisible\\\",\\n    value: function setIsCryptoTransactionsStatusModalVisible(is_visible) {\\n      this.is_crypto_transactions_status_modal_visible = is_visible;\\n    }\\n  }, {\\n    key: \\\"showCryptoTransactionsStatusModal\\\",\\n    value: function showCryptoTransactionsStatusModal(description, name) {\\n      this.setSelectedCryptoStatusDescription(description);\\n      this.setSelectedCryptoStatus(name);\\n      this.setIsCryptoTransactionsStatusModalVisible(true);\\n    }\\n  }, {\\n    key: \\\"hideCryptoTransactionsStatusModal\\\",\\n    value: function hideCryptoTransactionsStatusModal() {\\n      this.setIsCryptoTransactionsStatusModalVisible(false);\\n    }\\n  }, {\\n    key: \\\"setLoading\\\",\\n    value: function setLoading(is_loading) {\\n      this.is_loading = is_loading;\\n    }\\n  }, {\\n    key: \\\"setIsCryptoTransactionsVisible\\\",\\n    value: function setIsCryptoTransactionsVisible(is_visible) {\\n      this.is_crypto_transactions_visible = is_visible;\\n    }\\n  }]);\\n\\n  return TransactionHistoryStore;\\n}(), (transaction_history_store_descriptor = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"crypto_transactions\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return [];\\n  }\\n}), transaction_history_store_descriptor2 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_cancel_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor3 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_status_modal_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor4 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_crypto_transactions_visible\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor5 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"is_loading\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), transaction_history_store_descriptor6 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_transaction_id\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor7 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_descriptor8 = transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"selected_crypto_status_description\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\", [transaction_history_store_dec], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"onMount\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\", [transaction_history_store_dec2], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"unsubscribeCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\", [transaction_history_store_dec3], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"getCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\", [transaction_history_store_dec4], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setCryptoTransactionsHistory\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\", [transaction_history_store_dec5], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"updateCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\", [transaction_history_store_dec6], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"sortCryptoTransactions\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\", [transaction_history_store_dec7], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"cancelCryptoTransaction\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\", [transaction_history_store_dec8], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoTransactionId\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\", [transaction_history_store_dec9], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsCancelModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\", [transaction_history_store_dec10], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\", [transaction_history_store_dec11], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsCancelModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\", [transaction_history_store_dec12], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatus\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\", [transaction_history_store_dec13], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setSelectedCryptoStatusDescription\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\", [transaction_history_store_dec14], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsStatusModalVisible\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\", [transaction_history_store_dec15], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"showCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\", [transaction_history_store_dec16], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"hideCryptoTransactionsStatusModal\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\", [transaction_history_store_dec17], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setLoading\\\"), transaction_history_store_class.prototype), transaction_history_store_applyDecoratedDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\", [transaction_history_store_dec18], Object.getOwnPropertyDescriptor(transaction_history_store_class.prototype, \\\"setIsCryptoTransactionsVisible\\\"), transaction_history_store_class.prototype)), transaction_history_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/withdraw-store.js\\nvar withdraw_store_dec, withdraw_store_dec2, withdraw_store_dec3, withdraw_store_dec4, withdraw_store_dec5, withdraw_store_dec6, withdraw_store_dec7, withdraw_store_dec8, withdraw_store_dec9, withdraw_store_dec10, withdraw_store_dec11, withdraw_store_dec12, withdraw_store_dec13, withdraw_store_dec14, withdraw_store_dec15, withdraw_store_class, withdraw_store_descriptor, withdraw_store_descriptor2, withdraw_store_descriptor3, withdraw_store_descriptor4, withdraw_store_descriptor5, withdraw_store_descriptor6, withdraw_store_descriptor7, withdraw_store_descriptor8, withdraw_store_descriptor9;\\n\\nfunction withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\\n\\nfunction withdraw_store_asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"next\\\", value); } function _throw(err) { withdraw_store_asyncGeneratorStep(gen, resolve, reject, _next, _throw, \\\"throw\\\", err); } _next(undefined); }); }; }\\n\\nfunction withdraw_store_initializerDefineProperty(target, property, descriptor, context) { if (!descriptor) return; Object.defineProperty(target, property, { enumerable: descriptor.enumerable, configurable: descriptor.configurable, writable: descriptor.writable, value: descriptor.initializer ? descriptor.initializer.call(context) : void 0 }); }\\n\\nfunction withdraw_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\nfunction withdraw_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction withdraw_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) withdraw_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) withdraw_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction withdraw_store_applyDecoratedDescriptor(target, property, decorators, descriptor, context) { var desc = {}; Object.keys(descriptor).forEach(function (key) { desc[key] = descriptor[key]; }); desc.enumerable = !!desc.enumerable; desc.configurable = !!desc.configurable; if ('value' in desc || desc.initializer) { desc.writable = true; } desc = decorators.slice().reverse().reduce(function (desc, decorator) { return decorator(target, property, desc) || desc; }, desc); if (context && desc.initializer !== void 0) { desc.value = desc.initializer ? desc.initializer.call(context) : void 0; desc.initializer = undefined; } if (desc.initializer === void 0) { Object.defineProperty(target, property, desc); desc = null; } return desc; }\\n\\nfunction withdraw_store_initializerWarningHelper(descriptor, context) { throw new Error('Decorating class property failed. Please ensure that ' + 'proposal-class-properties is enabled and runs after the decorators transform.'); }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar WithdrawStore = (withdraw_store_dec = external_mobx_.action.bound, withdraw_store_dec2 = external_mobx_.action.bound, withdraw_store_dec3 = external_mobx_.action.bound, withdraw_store_dec4 = external_mobx_.action.bound, withdraw_store_dec5 = external_mobx_.action.bound, withdraw_store_dec6 = external_mobx_.action.bound, withdraw_store_dec7 = external_mobx_.action.bound, withdraw_store_dec8 = external_mobx_.action.bound, withdraw_store_dec9 = external_mobx_.action.bound, withdraw_store_dec10 = external_mobx_.action.bound, withdraw_store_dec11 = external_mobx_.action.bound, withdraw_store_dec12 = external_mobx_.action.bound, withdraw_store_dec13 = external_mobx_.action.bound, withdraw_store_dec14 = external_mobx_.action.bound, withdraw_store_dec15 = external_mobx_.action.bound, (withdraw_store_class = /*#__PURE__*/function () {\\n  function WithdrawStore(_ref) {\\n    var WS = _ref.WS,\\n        root_store = _ref.root_store;\\n\\n    withdraw_store_classCallCheck(this, WithdrawStore);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"blockchain_address\\\", withdraw_store_descriptor, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"container\\\", withdraw_store_descriptor2, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"error\\\", withdraw_store_descriptor3, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"is_10k_withdrawal_limit_reached\\\", withdraw_store_descriptor4, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"is_withdraw_confirmed\\\", withdraw_store_descriptor5, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"verification\\\", withdraw_store_descriptor6, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"withdraw_amount\\\", withdraw_store_descriptor7, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"max_withdraw_amount\\\", withdraw_store_descriptor8, this);\\n\\n    withdraw_store_initializerDefineProperty(this, \\\"crypto_config\\\", withdraw_store_descriptor9, this);\\n\\n    this.root_store = root_store;\\n    this.WS = WS;\\n  }\\n\\n  withdraw_store_createClass(WithdrawStore, [{\\n    key: \\\"setIsWithdrawConfirmed\\\",\\n    value: function setIsWithdrawConfirmed(is_withdraw_confirmed) {\\n      var converter_from_amount = this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n      this.is_withdraw_confirmed = is_withdraw_confirmed;\\n      if (is_withdraw_confirmed) this.setWithdrawAmount(converter_from_amount);\\n\\n      if (!is_withdraw_confirmed && this.verification) {\\n        this.verification.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"setWithdrawAmount\\\",\\n    value: function setWithdrawAmount(amount) {\\n      this.withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"requestWithdraw\\\",\\n    value: function () {\\n      var _requestWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(verification_code) {\\n        var _this = this;\\n\\n        var _this$root_store, client, modules, _modules$cashier, crypto_fiat_converter, error_dialog;\\n\\n        return regeneratorRuntime.wrap(function _callee$(_context) {\\n          while (1) {\\n            switch (_context.prev = _context.next) {\\n              case 0:\\n                _this$root_store = this.root_store, client = _this$root_store.client, modules = _this$root_store.modules;\\n                _modules$cashier = modules.cashier, crypto_fiat_converter = _modules$cashier.crypto_fiat_converter, error_dialog = _modules$cashier.error_dialog;\\n\\n                if (client.is_logged_in) {\\n                  _context.next = 4;\\n                  break;\\n                }\\n\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 4:\\n                if (crypto_fiat_converter.converter_from_amount) {\\n                  _context.next = 7;\\n                  break;\\n                }\\n\\n                crypto_fiat_converter.setConverterFromError((0,translations_.localize)('This field is required.'));\\n                return _context.abrupt(\\\"return\\\");\\n\\n              case 7:\\n                _context.next = 9;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +crypto_fiat_converter.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    error_dialog.setErrorMessage(response.error.message);\\n                  } else {\\n                    _this.saveWithdraw(verification_code);\\n                  }\\n                });\\n\\n              case 9:\\n              case \\\"end\\\":\\n                return _context.stop();\\n            }\\n          }\\n        }, _callee, this);\\n      }));\\n\\n      function requestWithdraw(_x) {\\n        return _requestWithdraw.apply(this, arguments);\\n      }\\n\\n      return requestWithdraw;\\n    }()\\n  }, {\\n    key: \\\"saveWithdraw\\\",\\n    value: function () {\\n      var _saveWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(verification_code) {\\n        var _this2 = this;\\n\\n        var converter_from_amount;\\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\\n          while (1) {\\n            switch (_context2.prev = _context2.next) {\\n              case 0:\\n                converter_from_amount = this.root_store.modules.cashier.crypto_fiat_converter.converter_from_amount;\\n                this.error.setErrorMessage('');\\n                _context2.next = 4;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +converter_from_amount,\\n                  verification_code: verification_code\\n                }).then(function (response) {\\n                  if (response.error) {\\n                    _this2.error.setErrorMessage(response.error);\\n\\n                    if (verification_code) {\\n                      // clear verification code on error\\n                      _this2.verification.clearVerification();\\n                    }\\n\\n                    _this2.resetWithrawForm();\\n                  } else {\\n                    _this2.setIsWithdrawConfirmed(true);\\n                  }\\n                });\\n\\n              case 4:\\n              case \\\"end\\\":\\n                return _context2.stop();\\n            }\\n          }\\n        }, _callee2, this);\\n      }));\\n\\n      function saveWithdraw(_x2) {\\n        return _saveWithdraw.apply(this, arguments);\\n      }\\n\\n      return saveWithdraw;\\n    }()\\n  }, {\\n    key: \\\"resetWithrawForm\\\",\\n    value: function resetWithrawForm() {\\n      var _this$root_store$modu = this.root_store.modules.cashier.crypto_fiat_converter,\\n          setConverterFromAmount = _this$root_store$modu.setConverterFromAmount,\\n          setConverterToAmount = _this$root_store$modu.setConverterToAmount;\\n      this.setBlockchainAddress('');\\n      setConverterFromAmount('');\\n      setConverterToAmount('');\\n      this.verification.clearVerification();\\n    }\\n  }, {\\n    key: \\\"setBlockchainAddress\\\",\\n    value: function setBlockchainAddress(address) {\\n      this.blockchain_address = address;\\n    }\\n  }, {\\n    key: \\\"willMountWithdraw\\\",\\n    value: function willMountWithdraw(verification_code) {\\n      if (verification_code) {\\n        this.verification.clearVerification();\\n      }\\n    }\\n  }, {\\n    key: \\\"onMountWithdraw\\\",\\n    value: function () {\\n      var _onMountWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(verification_code) {\\n        var _this$root_store2, client, modules, _modules$cashier$gene, active_container, is_crypto, onMountCommon, setLoading, setOnRemount, _modules$cashier$ifra, checkIframeLoaded, clearTimeoutCashierUrl, clearIframe, is_session_timeout, setContainerHeight, setIframeUrl, setSessionTimeout, setTimeoutCashierUrl, is_virtual, current_container, response_cashier;\\n\\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\\n          while (1) {\\n            switch (_context3.prev = _context3.next) {\\n              case 0:\\n                _this$root_store2 = this.root_store, client = _this$root_store2.client, modules = _this$root_store2.modules;\\n                _modules$cashier$gene = modules.cashier.general_store, active_container = _modules$cashier$gene.active_container, is_crypto = _modules$cashier$gene.is_crypto, onMountCommon = _modules$cashier$gene.onMountCommon, setLoading = _modules$cashier$gene.setLoading, setOnRemount = _modules$cashier$gene.setOnRemount;\\n                _modules$cashier$ifra = modules.cashier.iframe, checkIframeLoaded = _modules$cashier$ifra.checkIframeLoaded, clearTimeoutCashierUrl = _modules$cashier$ifra.clearTimeoutCashierUrl, clearIframe = _modules$cashier$ifra.clearIframe, is_session_timeout = _modules$cashier$ifra.is_session_timeout, setContainerHeight = _modules$cashier$ifra.setContainerHeight, setIframeUrl = _modules$cashier$ifra.setIframeUrl, setSessionTimeout = _modules$cashier$ifra.setSessionTimeout, setTimeoutCashierUrl = _modules$cashier$ifra.setTimeoutCashierUrl;\\n                is_virtual = client.is_virtual;\\n                current_container = active_container;\\n                setOnRemount(this.onMountWithdraw);\\n                _context3.next = 8;\\n                return onMountCommon();\\n\\n              case 8:\\n                this.error.setErrorMessage('');\\n                setContainerHeight(0);\\n                clearIframe();\\n                setLoading(true);\\n\\n                if (is_session_timeout) {\\n                  _context3.next = 15;\\n                  break;\\n                }\\n\\n                checkIframeLoaded();\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 15:\\n                // if session has timed out reset everything\\n                setIframeUrl('');\\n\\n                if (!(!verification_code || is_virtual)) {\\n                  _context3.next = 19;\\n                  break;\\n                }\\n\\n                setLoading(false); // if virtual, clear everything and don't proceed further\\n                // if no verification code, we should request again\\n\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 19:\\n                _context3.next = 21;\\n                return this.WS.authorized.cashier(active_container, {\\n                  verification_code: verification_code\\n                });\\n\\n              case 21:\\n                response_cashier = _context3.sent;\\n\\n                if (!(current_container !== active_container)) {\\n                  _context3.next = 25;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                return _context3.abrupt(\\\"return\\\");\\n\\n              case 25:\\n                if (!response_cashier.error) {\\n                  _context3.next = 33;\\n                  break;\\n                }\\n\\n                this.error.handleCashierError(response_cashier.error);\\n                setLoading(false);\\n                setSessionTimeout(true);\\n                clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.verification.clearVerification();\\n                }\\n\\n                _context3.next = 43;\\n                break;\\n\\n              case 33:\\n                if (!is_crypto) {\\n                  _context3.next = 37;\\n                  break;\\n                }\\n\\n                setLoading(false);\\n                _context3.next = 43;\\n                break;\\n\\n              case 37:\\n                _context3.next = 39;\\n                return checkIframeLoaded();\\n\\n              case 39:\\n                setLoading(false);\\n                setIframeUrl(response_cashier.cashier);\\n                setSessionTimeout(false);\\n                setTimeoutCashierUrl();\\n\\n              case 43:\\n              case \\\"end\\\":\\n                return _context3.stop();\\n            }\\n          }\\n        }, _callee3, this);\\n      }));\\n\\n      function onMountWithdraw(_x3) {\\n        return _onMountWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountWithdraw;\\n    }()\\n  }, {\\n    key: \\\"onMountCryptoWithdraw\\\",\\n    value: function () {\\n      var _onMountCryptoWithdraw = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(verification_code) {\\n        var _response_cashier$err;\\n\\n        var _this$root_store$modu2, crypto_fiat_converter, general_store, iframe, str_reg_exp, response_cashier, _yield$this$WS$crypto;\\n\\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\\n          while (1) {\\n            switch (_context4.prev = _context4.next) {\\n              case 0:\\n                _this$root_store$modu2 = this.root_store.modules.cashier, crypto_fiat_converter = _this$root_store$modu2.crypto_fiat_converter, general_store = _this$root_store$modu2.general_store, iframe = _this$root_store$modu2.iframe;\\n                general_store.setLoading(true);\\n                str_reg_exp = /^\\\\w{8,128}$/;\\n\\n                if (!str_reg_exp.test(verification_code)) {\\n                  _context4.next = 9;\\n                  break;\\n                }\\n\\n                _context4.next = 6;\\n                return this.WS.cryptoWithdraw({\\n                  address: this.blockchain_address,\\n                  amount: +crypto_fiat_converter.converter_from_amount,\\n                  verification_code: verification_code,\\n                  dry_run: 1\\n                });\\n\\n              case 6:\\n                response_cashier = _context4.sent;\\n                _context4.next = 10;\\n                break;\\n\\n              case 9:\\n                response_cashier = {\\n                  error: {\\n                    code: 'InvalidToken',\\n                    message: 'Your token has expired or is invalid.'\\n                  }\\n                };\\n\\n              case 10:\\n                if (!(((_response_cashier$err = response_cashier.error) === null || _response_cashier$err === void 0 ? void 0 : _response_cashier$err.code) === 'InvalidToken')) {\\n                  _context4.next = 18;\\n                  break;\\n                }\\n\\n                this.error.handleCashierError(response_cashier.error);\\n                general_store.setLoading(false);\\n                iframe.setSessionTimeout(true);\\n                iframe.clearTimeoutCashierUrl();\\n\\n                if (verification_code) {\\n                  // clear verification code on error\\n                  this.verification.clearVerification();\\n                }\\n\\n                _context4.next = 31;\\n                break;\\n\\n              case 18:\\n                _context4.next = 20;\\n                return this.WS.cryptoConfig();\\n\\n              case 20:\\n                _context4.t1 = _yield$this$WS$crypto = _context4.sent;\\n                _context4.t0 = _context4.t1 === null;\\n\\n                if (_context4.t0) {\\n                  _context4.next = 24;\\n                  break;\\n                }\\n\\n                _context4.t0 = _yield$this$WS$crypto === void 0;\\n\\n              case 24:\\n                if (!_context4.t0) {\\n                  _context4.next = 28;\\n                  break;\\n                }\\n\\n                _context4.t2 = void 0;\\n                _context4.next = 29;\\n                break;\\n\\n              case 28:\\n                _context4.t2 = _yield$this$WS$crypto.crypto_config;\\n\\n              case 29:\\n                this.crypto_config = _context4.t2;\\n                general_store.setLoading(false);\\n\\n              case 31:\\n              case \\\"end\\\":\\n                return _context4.stop();\\n            }\\n          }\\n        }, _callee4, this);\\n      }));\\n\\n      function onMountCryptoWithdraw(_x4) {\\n        return _onMountCryptoWithdraw.apply(this, arguments);\\n      }\\n\\n      return onMountCryptoWithdraw;\\n    }()\\n  }, {\\n    key: \\\"is_withdrawal_locked\\\",\\n    get: function get() {\\n      var _client$account_statu;\\n\\n      var client = this.root_store.client;\\n      var authentication = client.account_status.authentication;\\n      if (!((_client$account_statu = client.account_status) !== null && _client$account_statu !== void 0 && _client$account_statu.status)) return false;\\n      var need_poi = authentication.needs_verification.includes('identity');\\n      var need_authentication = this.error.is_ask_authentication && need_poi;\\n      return client.is_withdrawal_lock || need_authentication || this.error.is_ask_financial_risk_approval;\\n    }\\n  }, {\\n    key: \\\"setMaxWithdrawAmount\\\",\\n    value: function setMaxWithdrawAmount(amount) {\\n      this.max_withdraw_amount = amount;\\n    }\\n  }, {\\n    key: \\\"check10kLimit\\\",\\n    value: function () {\\n      var _check10kLimit = withdraw_store_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {\\n        var _yield$client$getLimi, _yield$client$getLimi2;\\n\\n        var client, remainder, min_withdrawal, is_limit_reached;\\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\\n          while (1) {\\n            switch (_context5.prev = _context5.next) {\\n              case 0:\\n                client = this.root_store.client;\\n                _context5.next = 3;\\n                return client.getLimits();\\n\\n              case 3:\\n                _context5.t1 = _yield$client$getLimi = _context5.sent;\\n                _context5.t0 = _context5.t1 === null;\\n\\n                if (_context5.t0) {\\n                  _context5.next = 7;\\n                  break;\\n                }\\n\\n                _context5.t0 = _yield$client$getLimi === void 0;\\n\\n              case 7:\\n                if (!_context5.t0) {\\n                  _context5.next = 11;\\n                  break;\\n                }\\n\\n                _context5.t2 = void 0;\\n                _context5.next = 12;\\n                break;\\n\\n              case 11:\\n                _context5.t2 = (_yield$client$getLimi2 = _yield$client$getLimi.get_limits) === null || _yield$client$getLimi2 === void 0 ? void 0 : _yield$client$getLimi2.remainder;\\n\\n              case 12:\\n                remainder = _context5.t2;\\n                this.setMaxWithdrawAmount(remainder);\\n                min_withdrawal = (0,shared_.getMinWithdrawal)(client.currency);\\n                is_limit_reached = !!(typeof remainder !== 'undefined' && +remainder < min_withdrawal);\\n                this.set10kLimitation(is_limit_reached);\\n\\n              case 17:\\n              case \\\"end\\\":\\n                return _context5.stop();\\n            }\\n          }\\n        }, _callee5, this);\\n      }));\\n\\n      function check10kLimit() {\\n        return _check10kLimit.apply(this, arguments);\\n      }\\n\\n      return check10kLimit;\\n    }()\\n  }, {\\n    key: \\\"set10kLimitation\\\",\\n    value: function set10kLimitation(is_limit_reached) {\\n      this.is_10k_withdrawal_limit_reached = is_limit_reached;\\n    }\\n  }, {\\n    key: \\\"setWithdrawPercentageSelectorResult\\\",\\n    value: function setWithdrawPercentageSelectorResult(amount) {\\n      var _this$root_store3 = this.root_store,\\n          client = _this$root_store3.client,\\n          modules = _this$root_store3.modules;\\n      var _modules$cashier2 = modules.cashier,\\n          crypto_fiat_converter = _modules$cashier2.crypto_fiat_converter,\\n          general_store = _modules$cashier2.general_store;\\n      var currency = client.currency,\\n          current_fiat_currency = client.current_fiat_currency;\\n\\n      if (amount > 0) {\\n        crypto_fiat_converter.setConverterFromAmount(amount);\\n        this.validateWithdrawFromAmount();\\n        crypto_fiat_converter.onChangeConverterFromAmount({\\n          target: {\\n            value: amount\\n          }\\n        }, currency, current_fiat_currency || 'USD');\\n      } else {\\n        crypto_fiat_converter.resetConverter();\\n      }\\n\\n      crypto_fiat_converter.setIsTimerVisible(false);\\n      general_store.percentageSelectorSelectionStatus(false);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawFromAmount\\\",\\n    value: function validateWithdrawFromAmount() {\\n      var _this$crypto_config, _this$crypto_config$c, _this$crypto_config$c2;\\n\\n      var error_message = '';\\n      var _this$root_store4 = this.root_store,\\n          client = _this$root_store4.client,\\n          modules = _this$root_store4.modules;\\n      var balance = client.balance,\\n          currency = client.currency;\\n      var _modules$cashier3 = modules.cashier,\\n          crypto_fiat_converter = _modules$cashier3.crypto_fiat_converter,\\n          error_dialog = _modules$cashier3.error_dialog;\\n      var converter_from_amount = crypto_fiat_converter.converter_from_amount,\\n          setConverterFromError = crypto_fiat_converter.setConverterFromError;\\n      var openReadMoreDialog = error_dialog.openReadMoreDialog;\\n      var min_withdraw_amount = (_this$crypto_config = this.crypto_config) === null || _this$crypto_config === void 0 ? void 0 : (_this$crypto_config$c = _this$crypto_config.currencies_config) === null || _this$crypto_config$c === void 0 ? void 0 : (_this$crypto_config$c2 = _this$crypto_config$c[currency]) === null || _this$crypto_config$c2 === void 0 ? void 0 : _this$crypto_config$c2.minimum_withdrawal;\\n      var max_withdraw_amount = +this.max_withdraw_amount > +balance ? +balance : +this.max_withdraw_amount;\\n      var format_balance = (0,shared_.formatMoney)(currency, balance, true);\\n      var format_min_withdraw_amount = (0,shared_.formatMoney)(currency, min_withdraw_amount, true);\\n      var format_max_withdraw_amount = (0,shared_.formatMoney)(currency, max_withdraw_amount, true);\\n\\n      if (converter_from_amount) {\\n        var _validNumber = (0,shared_.validNumber)(converter_from_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(currency)\\n        }),\\n            is_ok = _validNumber.is_ok,\\n            message = _validNumber.message;\\n\\n        if (!is_ok) error_message = message;else if (+balance < +converter_from_amount) error_message = (0,translations_.localize)('Insufficient funds');else if (+balance < +min_withdraw_amount) {\\n          error_message = (0,translations_.localize)('Your balance ({{format_balance}} {{currency}}) is less than the current minimum withdrawal allowed ({{format_min_withdraw_amount}} {{currency}}). Please top up your account to continue with your withdrawal.', {\\n            format_balance: format_balance,\\n            currency: currency,\\n            format_min_withdraw_amount: format_min_withdraw_amount\\n          });\\n        } else if (+converter_from_amount < +min_withdraw_amount || +converter_from_amount > +max_withdraw_amount) {\\n          error_message = (0,translations_.localize)('The current allowed withdraw amount is {{format_min_withdraw_amount}} to {{format_max_withdraw_amount}} {{currency}}', {\\n            format_min_withdraw_amount: format_min_withdraw_amount,\\n            format_max_withdraw_amount: format_max_withdraw_amount,\\n            currency: currency\\n          });\\n        }\\n\\n        if ((0,shared_.isMobile)() && error_message.length > 35) {\\n          var error_content = error_message;\\n          error_message = /*#__PURE__*/external_react_default().createElement(components_.ReadMore, {\\n            expand_text: (0,translations_.localize)('more'),\\n            text: error_content,\\n            collapse_length: 28,\\n            openDialog: function openDialog() {\\n              return openReadMoreDialog(error_content, (0,translations_.localize)('OK'));\\n            },\\n            show_dialog: true\\n          });\\n        }\\n      }\\n\\n      setConverterFromError(error_message);\\n    }\\n  }, {\\n    key: \\\"validateWithdrawToAmount\\\",\\n    value: function validateWithdrawToAmount() {\\n      var error_message = '';\\n      var _this$root_store5 = this.root_store,\\n          client = _this$root_store5.client,\\n          modules = _this$root_store5.modules;\\n      var current_fiat_currency = client.current_fiat_currency;\\n      var _modules$cashier$cryp = modules.cashier.crypto_fiat_converter,\\n          converter_to_amount = _modules$cashier$cryp.converter_to_amount,\\n          setConverterToError = _modules$cashier$cryp.setConverterToError;\\n\\n      if (converter_to_amount) {\\n        var _validNumber2 = (0,shared_.validNumber)(converter_to_amount, {\\n          type: 'float',\\n          decimals: (0,shared_.getDecimalPlaces)(current_fiat_currency)\\n        }),\\n            is_ok = _validNumber2.is_ok,\\n            message = _validNumber2.message;\\n\\n        if (!is_ok) error_message = message;\\n      }\\n\\n      setConverterToError(error_message);\\n    }\\n  }, {\\n    key: \\\"account_platform_icon\\\",\\n    get: function get() {\\n      var _this$root_store$clie = this.root_store.client,\\n          account_list = _this$root_store$clie.account_list,\\n          loginid = _this$root_store$clie.loginid;\\n      var platform_icon = account_list.find(function (acc) {\\n        return loginid === acc.loginid;\\n      }).icon;\\n      return platform_icon;\\n    }\\n  }]);\\n\\n  return WithdrawStore;\\n}(), (withdraw_store_descriptor = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"blockchain_address\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), withdraw_store_descriptor2 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"container\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return constants.containers.withdraw;\\n  }\\n}), withdraw_store_descriptor3 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"error\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new ErrorStore();\\n  }\\n}), withdraw_store_descriptor4 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_10k_withdrawal_limit_reached\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return undefined;\\n  }\\n}), withdraw_store_descriptor5 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_withdraw_confirmed\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return false;\\n  }\\n}), withdraw_store_descriptor6 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"verification\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return new VerificationStore({\\n      root_store: this.root_store,\\n      WS: this.WS\\n    });\\n  }\\n}), withdraw_store_descriptor7 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return '';\\n  }\\n}), withdraw_store_descriptor8 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"max_withdraw_amount\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return 0;\\n  }\\n}), withdraw_store_descriptor9 = withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"crypto_config\\\", [external_mobx_.observable], {\\n  configurable: true,\\n  enumerable: true,\\n  writable: true,\\n  initializer: function initializer() {\\n    return {};\\n  }\\n}), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setIsWithdrawConfirmed\\\", [withdraw_store_dec], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setIsWithdrawConfirmed\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setWithdrawAmount\\\", [withdraw_store_dec2], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setWithdrawAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"requestWithdraw\\\", [withdraw_store_dec3], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"requestWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"saveWithdraw\\\", [withdraw_store_dec4], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"saveWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"resetWithrawForm\\\", [withdraw_store_dec5], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"resetWithrawForm\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setBlockchainAddress\\\", [withdraw_store_dec6], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setBlockchainAddress\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"willMountWithdraw\\\", [withdraw_store_dec7], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"willMountWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"onMountWithdraw\\\", [withdraw_store_dec8], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"onMountWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"onMountCryptoWithdraw\\\", [withdraw_store_dec9], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"onMountCryptoWithdraw\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"is_withdrawal_locked\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"is_withdrawal_locked\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setMaxWithdrawAmount\\\", [withdraw_store_dec10], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setMaxWithdrawAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"check10kLimit\\\", [withdraw_store_dec11], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"check10kLimit\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"set10kLimitation\\\", [withdraw_store_dec12], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"set10kLimitation\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"setWithdrawPercentageSelectorResult\\\", [withdraw_store_dec13], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"setWithdrawPercentageSelectorResult\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawFromAmount\\\", [withdraw_store_dec14], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawFromAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawToAmount\\\", [withdraw_store_dec15], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"validateWithdrawToAmount\\\"), withdraw_store_class.prototype), withdraw_store_applyDecoratedDescriptor(withdraw_store_class.prototype, \\\"account_platform_icon\\\", [external_mobx_.computed], Object.getOwnPropertyDescriptor(withdraw_store_class.prototype, \\\"account_platform_icon\\\"), withdraw_store_class.prototype)), withdraw_store_class));\\n\\n;// CONCATENATED MODULE: ./Stores/cashier-store.js\\nfunction cashier_store_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\\\"value\\\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\\n\\nfunction cashier_store_createClass(Constructor, protoProps, staticProps) { if (protoProps) cashier_store_defineProperties(Constructor.prototype, protoProps); if (staticProps) cashier_store_defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, \\\"prototype\\\", { writable: false }); return Constructor; }\\n\\nfunction cashier_store_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\\\"Cannot call a class as a function\\\"); } }\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\nvar CashierStore = /*#__PURE__*/cashier_store_createClass(function CashierStore(_ref) {\\n  var root_store = _ref.root_store,\\n      WS = _ref.WS;\\n\\n  cashier_store_classCallCheck(this, CashierStore);\\n\\n  this.account_prompt_dialog = new AccountPromptDialogStore(root_store);\\n  this.account_transfer = new AccountTransferStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.crypto_fiat_converter = new CryptoFiatConverterStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.deposit = new DepositStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.error_dialog = new ErrorDialogStore();\\n  this.error = new ErrorStore();\\n  this.general_store = new GeneralStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.iframe = new IframeStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.onramp = new OnRampStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.payment_agent = new PaymentAgentStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.payment_agent_transfer = new PaymentAgentTransferStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.transaction_history = new TransactionHistoryStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.verification = new VerificationStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n  this.withdraw = new WithdrawStore({\\n    root_store: root_store,\\n    WS: WS\\n  });\\n});\\n\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\\n//# sourceURL=webpack-internal:///./Stores/cashier-store.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/factoryWithThrowingShims.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = __webpack_require__(\\\"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\\");\\n\\nfunction emptyFunction() {}\\nfunction emptyFunctionWithReset() {}\\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\\n\\nmodule.exports = function() {\\n  function shim(props, propName, componentName, location, propFullName, secret) {\\n    if (secret === ReactPropTypesSecret) {\\n      // It is still safe when called from React.\\n      return;\\n    }\\n    var err = new Error(\\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\\n      'Use PropTypes.checkPropTypes() to call them. ' +\\n      'Read more at http://fb.me/use-check-prop-types'\\n    );\\n    err.name = 'Invariant Violation';\\n    throw err;\\n  };\\n  shim.isRequired = shim;\\n  function getShim() {\\n    return shim;\\n  };\\n  // Important!\\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\\n  var ReactPropTypes = {\\n    array: shim,\\n    bigint: shim,\\n    bool: shim,\\n    func: shim,\\n    number: shim,\\n    object: shim,\\n    string: shim,\\n    symbol: shim,\\n\\n    any: shim,\\n    arrayOf: getShim,\\n    element: shim,\\n    elementType: shim,\\n    instanceOf: getShim,\\n    node: shim,\\n    objectOf: getShim,\\n    oneOf: getShim,\\n    oneOfType: getShim,\\n    shape: getShim,\\n    exact: getShim,\\n\\n    checkPropTypes: emptyFunctionWithReset,\\n    resetWarningCache: emptyFunction\\n  };\\n\\n  ReactPropTypes.PropTypes = ReactPropTypes;\\n\\n  return ReactPropTypes;\\n};\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AZGVyaXYvY2FzaGllci8uLi8uLi8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanM/ZGMwNyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYmlnaW50OiBzaGltLFxuICAgIGJvb2w6IHNoaW0sXG4gICAgZnVuYzogc2hpbSxcbiAgICBudW1iZXI6IHNoaW0sXG4gICAgb2JqZWN0OiBzaGltLFxuICAgIHN0cmluZzogc2hpbSxcbiAgICBzeW1ib2w6IHNoaW0sXG5cbiAgICBhbnk6IHNoaW0sXG4gICAgYXJyYXlPZjogZ2V0U2hpbSxcbiAgICBlbGVtZW50OiBzaGltLFxuICAgIGVsZW1lbnRUeXBlOiBzaGltLFxuICAgIGluc3RhbmNlT2Y6IGdldFNoaW0sXG4gICAgbm9kZTogc2hpbSxcbiAgICBvYmplY3RPZjogZ2V0U2hpbSxcbiAgICBvbmVPZjogZ2V0U2hpbSxcbiAgICBvbmVPZlR5cGU6IGdldFNoaW0sXG4gICAgc2hhcGU6IGdldFNoaW0sXG4gICAgZXhhY3Q6IGdldFNoaW0sXG5cbiAgICBjaGVja1Byb3BUeXBlczogZW1wdHlGdW5jdGlvbldpdGhSZXNldCxcbiAgICByZXNldFdhcm5pbmdDYWNoZTogZW1wdHlGdW5jdGlvblxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLlByb3BUeXBlcyA9IFJlYWN0UHJvcFR5cGVzO1xuXG4gIHJldHVybiBSZWFjdFByb3BUeXBlcztcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/factoryWithThrowingShims.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/index.js\":\n/***/ ((module, __unused_webpack_exports, __webpack_require__) => {\n\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\nif (false) { var throwOnDirectAccess, ReactIs; } else {\\n  // By explicitly using `prop-types` you are opting into new production behavior.\\n  // http://fb.me/prop-types-in-prod\\n  module.exports = __webpack_require__(\\\"../../../node_modules/prop-types/factoryWithThrowingShims.js\\\")();\\n}\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVFBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGRlcml2L2Nhc2hpZXIvLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanM/NzBkNCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIHZhciBSZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBkZXZlbG9wbWVudCBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICB2YXIgdGhyb3dPbkRpcmVjdEFjY2VzcyA9IHRydWU7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFR5cGVDaGVja2VycycpKFJlYWN0SXMuaXNFbGVtZW50LCB0aHJvd09uRGlyZWN0QWNjZXNzKTtcbn0gZWxzZSB7XG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IHByb2R1Y3Rpb24gYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcycpKCk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/index.js\\n\");\n\n/***/ }),\n\n/***/ \"../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\":\n/***/ ((module) => {\n\n\"use strict\";\neval(\"/**\\n * Copyright (c) 2013-present, Facebook, Inc.\\n *\\n * This source code is licensed under the MIT license found in the\\n * LICENSE file in the root directory of this source tree.\\n */\\n\\n\\n\\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\\n\\nmodule.exports = ReactPropTypesSecret;\\n//# sourceURL=[module]\\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BkZXJpdi9jYXNoaWVyLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcz9hZDgzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\\n//# sourceURL=webpack-internal:///../../../node_modules/prop-types/lib/ReactPropTypesSecret.js\\n\");\n\n/***/ }),\n\n/***/ \"@deriv/components\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_components__;\n\n/***/ }),\n\n/***/ \"@deriv/shared\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_shared__;\n\n/***/ }),\n\n/***/ \"@deriv/translations\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE__deriv_translations__;\n\n/***/ }),\n\n/***/ \"mobx\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_mobx__;\n\n/***/ }),\n\n/***/ \"react\":\n/***/ ((module) => {\n\n\"use strict\";\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_react__;\n\n/***/ })\n\n/******/ \t});\n/************************************************************************/\n/******/ \t// The module cache\n/******/ \tvar __webpack_module_cache__ = {};\n/******/ \t\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_636349__(moduleId) {\n/******/ \t\t// Check if module is in cache\n/******/ \t\tvar cachedModule = __webpack_module_cache__[moduleId];\n/******/ \t\tif (cachedModule !== undefined) {\n/******/ \t\t\treturn cachedModule.exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = __webpack_module_cache__[moduleId] = {\n/******/ \t\t\t// no module.id needed\n/******/ \t\t\t// no module.loaded needed\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/ \t\n/******/ \t\t// Execute the module function\n/******/ \t\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_636349__);\n/******/ \t\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/ \t\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_636349__.m = __webpack_modules__;\n/******/ \t\n/************************************************************************/\n/******/ \t/* webpack/runtime/compat get default export */\n/******/ \t(() => {\n/******/ \t\t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t\t__nested_webpack_require_636349__.n = (module) => {\n/******/ \t\t\tvar getter = module && module.__esModule ?\n/******/ \t\t\t\t() => (module['default']) :\n/******/ \t\t\t\t() => (module);\n/******/ \t\t\t__nested_webpack_require_636349__.d(getter, { a: getter });\n/******/ \t\t\treturn getter;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/create fake namespace object */\n/******/ \t(() => {\n/******/ \t\tvar getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\n/******/ \t\tvar leafPrototypes;\n/******/ \t\t// create a fake namespace object\n/******/ \t\t// mode & 1: value is a module id, require it\n/******/ \t\t// mode & 2: merge all properties of value into the ns\n/******/ \t\t// mode & 4: return value when already ns object\n/******/ \t\t// mode & 16: return value when it's Promise-like\n/******/ \t\t// mode & 8|1: behave like require\n/******/ \t\t__nested_webpack_require_636349__.t = function(value, mode) {\n/******/ \t\t\tif(mode & 1) value = this(value);\n/******/ \t\t\tif(mode & 8) return value;\n/******/ \t\t\tif(typeof value === 'object' && value) {\n/******/ \t\t\t\tif((mode & 4) && value.__esModule) return value;\n/******/ \t\t\t\tif((mode & 16) && typeof value.then === 'function') return value;\n/******/ \t\t\t}\n/******/ \t\t\tvar ns = Object.create(null);\n/******/ \t\t\t__nested_webpack_require_636349__.r(ns);\n/******/ \t\t\tvar def = {};\n/******/ \t\t\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n/******/ \t\t\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n/******/ \t\t\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n/******/ \t\t\t}\n/******/ \t\t\tdef['default'] = () => (value);\n/******/ \t\t\t__nested_webpack_require_636349__.d(ns, def);\n/******/ \t\t\treturn ns;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/define property getters */\n/******/ \t(() => {\n/******/ \t\t// define getter functions for harmony exports\n/******/ \t\t__nested_webpack_require_636349__.d = (exports, definition) => {\n/******/ \t\t\tfor(var key in definition) {\n/******/ \t\t\t\tif(__nested_webpack_require_636349__.o(definition, key) && !__nested_webpack_require_636349__.o(exports, key)) {\n/******/ \t\t\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/ensure chunk */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_636349__.f = {};\n/******/ \t\t// This file contains only the entry chunk.\n/******/ \t\t// The chunk loading function for additional chunks\n/******/ \t\t__nested_webpack_require_636349__.e = (chunkId) => {\n/******/ \t\t\treturn Promise.all(Object.keys(__nested_webpack_require_636349__.f).reduce((promises, key) => {\n/******/ \t\t\t\t__nested_webpack_require_636349__.f[key](chunkId, promises);\n/******/ \t\t\t\treturn promises;\n/******/ \t\t\t}, []));\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get javascript chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference async chunks\n/******/ \t\t__nested_webpack_require_636349__.u = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn \"cashier/js/cashier.\" + chunkId + \".\" + \"a007a79dd7345a890a13\" + \".js\";\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/get mini-css chunk filename */\n/******/ \t(() => {\n/******/ \t\t// This function allow to reference all chunks\n/******/ \t\t__nested_webpack_require_636349__.miniCssF = (chunkId) => {\n/******/ \t\t\t// return url for filenames based on template\n/******/ \t\t\treturn undefined;\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/hasOwnProperty shorthand */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_636349__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/load script */\n/******/ \t(() => {\n/******/ \t\tvar inProgress = {};\n/******/ \t\tvar dataWebpackPrefix = \"@deriv/cashier:\";\n/******/ \t\t// loadScript function to load a script via script tag\n/******/ \t\t__nested_webpack_require_636349__.l = (url, done, key, chunkId) => {\n/******/ \t\t\tif(inProgress[url]) { inProgress[url].push(done); return; }\n/******/ \t\t\tvar script, needAttach;\n/******/ \t\t\tif(key !== undefined) {\n/******/ \t\t\t\tvar scripts = document.getElementsByTagName(\"script\");\n/******/ \t\t\t\tfor(var i = 0; i < scripts.length; i++) {\n/******/ \t\t\t\t\tvar s = scripts[i];\n/******/ \t\t\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n/******/ \t\t\t\t}\n/******/ \t\t\t}\n/******/ \t\t\tif(!script) {\n/******/ \t\t\t\tneedAttach = true;\n/******/ \t\t\t\tscript = document.createElement('script');\n/******/ \t\t\n/******/ \t\t\t\tscript.charset = 'utf-8';\n/******/ \t\t\t\tscript.timeout = 120;\n/******/ \t\t\t\tif (__nested_webpack_require_636349__.nc) {\n/******/ \t\t\t\t\tscript.setAttribute(\"nonce\", __nested_webpack_require_636349__.nc);\n/******/ \t\t\t\t}\n/******/ \t\t\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n/******/ \t\t\t\tscript.src = url;\n/******/ \t\t\t}\n/******/ \t\t\tinProgress[url] = [done];\n/******/ \t\t\tvar onScriptComplete = (prev, event) => {\n/******/ \t\t\t\t// avoid mem leaks in IE.\n/******/ \t\t\t\tscript.onerror = script.onload = null;\n/******/ \t\t\t\tclearTimeout(timeout);\n/******/ \t\t\t\tvar doneFns = inProgress[url];\n/******/ \t\t\t\tdelete inProgress[url];\n/******/ \t\t\t\tscript.parentNode && script.parentNode.removeChild(script);\n/******/ \t\t\t\tdoneFns && doneFns.forEach((fn) => (fn(event)));\n/******/ \t\t\t\tif(prev) return prev(event);\n/******/ \t\t\t}\n/******/ \t\t\t;\n/******/ \t\t\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n/******/ \t\t\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n/******/ \t\t\tscript.onload = onScriptComplete.bind(null, script.onload);\n/******/ \t\t\tneedAttach && document.head.appendChild(script);\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/make namespace object */\n/******/ \t(() => {\n/******/ \t\t// define __esModule on exports\n/******/ \t\t__nested_webpack_require_636349__.r = (exports) => {\n/******/ \t\t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n/******/ \t\t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n/******/ \t\t\t}\n/******/ \t\t\tObject.defineProperty(exports, '__esModule', { value: true });\n/******/ \t\t};\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/publicPath */\n/******/ \t(() => {\n/******/ \t\t__nested_webpack_require_636349__.p = \"/\";\n/******/ \t})();\n/******/ \t\n/******/ \t/* webpack/runtime/jsonp chunk loading */\n/******/ \t(() => {\n/******/ \t\t// no baseURI\n/******/ \t\t\n/******/ \t\t// object to store loaded and loading chunks\n/******/ \t\t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n/******/ \t\t// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\n/******/ \t\tvar installedChunks = {\n/******/ \t\t\t\"cashier-store\": 0\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t__nested_webpack_require_636349__.f.j = (chunkId, promises) => {\n/******/ \t\t\t\t// JSONP chunk loading for javascript\n/******/ \t\t\t\tvar installedChunkData = __nested_webpack_require_636349__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n/******/ \t\t\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n/******/ \t\t\n/******/ \t\t\t\t\t// a Promise means \"currently loading\".\n/******/ \t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\tpromises.push(installedChunkData[2]);\n/******/ \t\t\t\t\t} else {\n/******/ \t\t\t\t\t\tif(true) { // all chunks have JS\n/******/ \t\t\t\t\t\t\t// setup Promise in chunk cache\n/******/ \t\t\t\t\t\t\tvar promise = new Promise((resolve, reject) => (installedChunkData = installedChunks[chunkId] = [resolve, reject]));\n/******/ \t\t\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n/******/ \t\t\n/******/ \t\t\t\t\t\t\t// start chunk loading\n/******/ \t\t\t\t\t\t\tvar url = __nested_webpack_require_636349__.p + __nested_webpack_require_636349__.u(chunkId);\n/******/ \t\t\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n/******/ \t\t\t\t\t\t\tvar error = new Error();\n/******/ \t\t\t\t\t\t\tvar loadingEnded = (event) => {\n/******/ \t\t\t\t\t\t\t\tif(__nested_webpack_require_636349__.o(installedChunks, chunkId)) {\n/******/ \t\t\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n/******/ \t\t\t\t\t\t\t\t\tif(installedChunkData) {\n/******/ \t\t\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n/******/ \t\t\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n/******/ \t\t\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n/******/ \t\t\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n/******/ \t\t\t\t\t\t\t\t\t\terror.type = errorType;\n/******/ \t\t\t\t\t\t\t\t\t\terror.request = realSrc;\n/******/ \t\t\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n/******/ \t\t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t\t}\n/******/ \t\t\t\t\t\t\t};\n/******/ \t\t\t\t\t\t\t__nested_webpack_require_636349__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n/******/ \t\t\t\t\t\t} else {}\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t};\n/******/ \t\t\n/******/ \t\t// no prefetching\n/******/ \t\t\n/******/ \t\t// no preloaded\n/******/ \t\t\n/******/ \t\t// no HMR\n/******/ \t\t\n/******/ \t\t// no HMR manifest\n/******/ \t\t\n/******/ \t\t// no on chunks loaded\n/******/ \t\t\n/******/ \t\t// install a JSONP callback for chunk loading\n/******/ \t\tvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n/******/ \t\t\tvar [chunkIds, moreModules, runtime] = data;\n/******/ \t\t\t// add \"moreModules\" to the modules object,\n/******/ \t\t\t// then flag all \"chunkIds\" as loaded and fire callback\n/******/ \t\t\tvar moduleId, chunkId, i = 0;\n/******/ \t\t\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n/******/ \t\t\t\tfor(moduleId in moreModules) {\n/******/ \t\t\t\t\tif(__nested_webpack_require_636349__.o(moreModules, moduleId)) {\n/******/ \t\t\t\t\t\t__nested_webpack_require_636349__.m[moduleId] = moreModules[moduleId];\n/******/ \t\t\t\t\t}\n/******/ \t\t\t\t}\n/******/ \t\t\t\tif(runtime) var result = runtime(__nested_webpack_require_636349__);\n/******/ \t\t\t}\n/******/ \t\t\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n/******/ \t\t\tfor(;i < chunkIds.length; i++) {\n/******/ \t\t\t\tchunkId = chunkIds[i];\n/******/ \t\t\t\tif(__nested_webpack_require_636349__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n/******/ \t\t\t\t\tinstalledChunks[chunkId][0]();\n/******/ \t\t\t\t}\n/******/ \t\t\t\tinstalledChunks[chunkId] = 0;\n/******/ \t\t\t}\n/******/ \t\t\n/******/ \t\t}\n/******/ \t\t\n/******/ \t\tvar chunkLoadingGlobal = self[\"webpackChunk_deriv_cashier\"] = self[\"webpackChunk_deriv_cashier\"] || [];\n/******/ \t\tchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\n/******/ \t\tchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));\n/******/ \t})();\n/******/ \t\n/************************************************************************/\n/******/ \t\n/******/ \t// startup\n/******/ \t// Load entry module and return exports\n/******/ \t// This entry module can't be inlined because the eval-source-map devtool is used.\n/******/ \tvar __webpack_exports__ = __nested_webpack_require_636349__(\"./Stores/cashier-store.js\");\n/******/ \t__webpack_exports__ = __webpack_exports__[\"default\"];\n/******/ \t\n/******/ \treturn __webpack_exports__;\n/******/ })()\n;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../cashier/dist/cashier/js/cashier-store.js\n");

/***/ })

}]);